#!/usr/bin/env python3
"""
–†–∞–∑–º–µ—â–µ–Ω–∏–µ Stop Market –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Bitget Spot
Stop Market - –æ—Ä–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è market –æ—Ä–¥–µ—Ä–æ–º –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã
"""

import requests
import json
import hmac
import hashlib
import base64
import time
from datetime import datetime

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    with open('../../config.json', 'r') as f:
        return json.load(f)

def create_signature(timestamp, method, request_path, query_string, body, secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        secret_key.encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')

def get_current_price(config, symbol):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
    try:
        url = f"{config['baseURL']}/api/v2/spot/market/tickers?symbol={symbol}"
        response = requests.get(url, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000' and data.get('data'):
                ticker_data = data['data'][0] if isinstance(data['data'], list) else data['data']
                return float(ticker_data.get('lastPr', 0))
        return None
    except:
        return None

def get_symbol_info(config, symbol):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ"""
    try:
        url = f"{config['baseURL']}/api/v2/spot/public/symbols"
        response = requests.get(url, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000':
                for symbol_info in data['data']:
                    if symbol_info.get('symbol') == symbol:
                        return {
                            'minTradeAmount': float(symbol_info.get('minTradeAmount', 0)),
                            'priceScale': int(symbol_info.get('priceScale', 2)),
                            'quantityScale': int(symbol_info.get('quantityScale', 6)),
                            'baseCoin': symbol_info.get('baseCoin'),
                            'quoteCoin': symbol_info.get('quoteCoin')
                        }
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ: {e}")
        return None

def save_response_example(endpoint_name, data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞"""
    try:
        filename = f"../../docs/response_examples/{endpoint_name}_{int(time.time())}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"üíæ –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {e}")

def place_stop_market_order(config, symbol, side, size, trigger_price):
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ Stop Market –æ—Ä–¥–µ—Ä–∞
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT')
        side: 'buy' –∏–ª–∏ 'sell'
        size: –†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ (–¥–ª—è buy - –≤ quote –≤–∞–ª—é—Ç–µ, –¥–ª—è sell - –≤ base –≤–∞–ª—é—Ç–µ)
        trigger_price: –¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è stop –æ—Ä–¥–µ—Ä–∞
    """
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞
    order_data = {
        'symbol': symbol.upper(),
        'side': side.lower(),
        'orderType': 'market',  # –ü–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è trigger —Å—Ç–∞–µ—Ç market –æ—Ä–¥–µ—Ä–æ–º
        'size': str(size),
        'triggerPrice': str(trigger_price),
        'triggerType': 'fill_price',  # –¢–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞ –ø–æ —Ü–µ–Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏
        'force': 'gtc'
    }
    
    body = json.dumps(order_data)
    timestamp = str(int(time.time() * 1000))
    method = 'POST'
    request_path = '/api/v2/spot/trade/place-plan-order'  # –ü–ª–∞–Ω-–æ—Ä–¥–µ—Ä –¥–ª—è stop orders
    
    signature = create_signature(timestamp, method, request_path, '', body, config['secretKey'])
    
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    url = f"{config['baseURL']}{request_path}"
    
    try:
        response = requests.post(url, headers=headers, data=body, timeout=30)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
        response_data = response.json() if response.status_code == 200 else {"error": response.text}
        save_response_example('place_stop_market_order', {
            'request': order_data,
            'response': response_data,
            'status_code': response.status_code,
            'timestamp': datetime.now().isoformat()
        })
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000':
                return data.get('data', {}), None
            else:
                return None, data.get('msg', 'Unknown error')
        else:
            return None, f"HTTP {response.status_code}: {response.text}"
            
    except Exception as e:
        return None, str(e)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üî• –†–ê–ó–ú–ï–©–ï–ù–ò–ï STOP MARKET –û–†–î–ï–†–ê")
    print("=" * 40)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏)
    symbol = "BTCUSDT"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ –∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
    symbol_info = get_symbol_info(config, symbol)
    current_price = get_current_price(config, symbol)
    
    if not current_price or not symbol_info:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –∏–ª–∏ —Ü–µ–Ω—É")
        return
    
    print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: ${current_price:.2f}")
    print(f"üìè –¢–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã: {symbol_info['priceScale']} –∑–Ω–∞–∫–æ–≤")
    
    # –ü—Ä–∏–º–µ—Ä –¥–ª—è stop-loss sell (–µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–¥–µ—Ç)
    # Trigger –Ω–∞ 2% –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
    stop_loss_trigger = round(current_price * 0.98, symbol_info['priceScale'])
    size = round(1.1 / current_price, symbol_info['quantityScale'])  # –ú–∏–Ω–∏–º—É–º 1.1 USDT
    
    print(f"üìâ Stop Market Sell:")
    print(f"   –†–∞–∑–º–µ—Ä: {size} BTC")
    print(f"   Trigger Price: ${stop_loss_trigger}")
    print(f"   –°—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–¥–µ—Ç –¥–æ ${stop_loss_trigger}")
    
    confirm = input("\n‚ùì –†–∞–∑–º–µ—Å—Ç–∏—Ç—å stop market –æ—Ä–¥–µ—Ä? (y/N): ").strip().lower()
    
    if confirm == 'y':
        print("\nüîÑ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞...")
        
        result, error = place_stop_market_order(
            config=config,
            symbol=symbol,
            side='sell',
            size=size,
            trigger_price=stop_loss_trigger
        )
        
        if result:
            order_id = result.get('orderId', result.get('planOrderId'))
            print(f"‚úÖ Stop Market –æ—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω!")
            print(f"üìã Order ID: {order_id}")
            print(f"üí∞ –†–∞–∑–º–µ—Ä: {size}")
            print(f"üéØ Trigger Price: ${stop_loss_trigger}")
            print(f"‚ö†Ô∏è  –û—Ä–¥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ trigger —Ü–µ–Ω—ã")
            
            # –í—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            print(f"\nüìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:")
            print(json.dumps(result, indent=2, ensure_ascii=False))
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {error}")
    else:
        print("‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

if __name__ == "__main__":
    main()
