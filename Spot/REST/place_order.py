# -*- coding: utf-8 -*-
"""
Bitget Spot REST API - Place Order (Create Order)
–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/spot/trade/Place-Order

–û–ø–∏—Å–∞–Ω–∏–µ:
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞ –Ω–∞ —Å–ø–æ—Ç —Ä—ã–Ω–∫–µ Bitget.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–µ –∏ —Ä—ã–Ω–æ—á–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞, –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä BTCUSDT)
- side: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (buy/sell)
- orderType: —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ (limit/market)
- force: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (gtc/post_only/fok/ioc)
- price: —Ü–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
- size: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
- clientOid: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ID –æ—Ä–¥–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- triggerPrice: —Ü–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è TP/SL –æ—Ä–¥–µ—Ä–æ–≤
- tpslType: —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ (normal/tpsl)

–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:
- gtc: Good Till Cancelled (–¥–æ –æ—Ç–º–µ–Ω—ã)
- post_only: –¢–æ–ª—å–∫–æ –º–µ–π–∫–µ—Ä
- fok: Fill Or Kill (–∏—Å–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å)
- ioc: Immediate Or Cancel (–∏—Å–ø–æ–ª–Ω–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ, –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç–º–µ–Ω–∏—Ç—å)

–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–º–µ—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ!
"""

import requests
import json
import hmac
import hashlib
import base64
import time
import os
from datetime import datetime

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config_path = os.path.join(os.path.dirname(__file__), '../../config.json')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    with open(config_path, 'r') as config_file:
        config = json.load(config_file)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_KEY = config.get('apiKey', '')
SECRET_KEY = config.get('secretKey', '')
PASSPHRASE = config.get('passphrase', '')
BASE_URL = config.get('baseURL', 'https://api.bitget.com')

def create_signature(timestamp, method, request_path, query_string, body):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Bitget API
    
    Args:
        timestamp (str): –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        method (str): HTTP –º–µ—Ç–æ–¥
        request_path (str): –ü—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        query_string (str): –°—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        body (str): –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    
    Returns:
        str: Base64 –ø–æ–¥–ø–∏—Å—å
    """
    
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        SECRET_KEY.encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')

def place_order(symbol, side, order_type, size, price=None, force="gtc", client_oid=None, 
                trigger_price=None, tpsl_type="normal"):
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
    
    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
        side (str): –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (buy/sell)
        order_type (str): –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (limit/market)
        size (str): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        price (str): –¶–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
        force (str): –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        client_oid (str): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ID –æ—Ä–¥–µ—Ä–∞
        trigger_price (str): –¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        tpsl_type (str): –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (normal/tpsl)
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    if not API_KEY or not SECRET_KEY or not PASSPHRASE:
        print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if not symbol or not side or not order_type or not size:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    if order_type == "limit" and not price:
        print("‚ùå –î–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É")
        return None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    order_data = {
        "symbol": symbol,
        "side": side,
        "orderType": order_type,
        "size": size,
        "tpslType": tpsl_type
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if order_type == "limit":
        order_data["force"] = force
        order_data["price"] = price
    
    if client_oid:
        order_data["clientOid"] = client_oid
    
    if trigger_price and tpsl_type == "tpsl":
        order_data["triggerPrice"] = trigger_price
    
    # –ü—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    request_path = "/api/v2/spot/trade/place-order"
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    timestamp = str(int(time.time() * 1000))
    method = "POST"
    body = json.dumps(order_data)
    query_string = ""
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    signature = create_signature(timestamp, method, request_path, query_string, body)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {
        'ACCESS-KEY': API_KEY,
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': PASSPHRASE,
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL
    url = f"{BASE_URL}{request_path}"
    
    try:
        print(f"üìù –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞...")
        print(f"üí± –ü–∞—Ä–∞: {symbol}")
        print(f"üìä –°—Ç–æ—Ä–æ–Ω–∞: {side.upper()}")
        print(f"üìã –¢–∏–ø: {order_type.upper()}")
        print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {size}")
        if price:
            print(f"üí∞ –¶–µ–Ω–∞: {price}")
        print(f"‚ö° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {force}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, headers=headers, data=body, timeout=10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code == 200:
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ Bitget
            if data.get('code') == '00000':
                order_result = data.get('data')
                if order_result:
                    print(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω")
                    return order_result
                else:
                    print("‚ö†Ô∏è –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                    return {}
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API Bitget: {data.get('msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def format_order_response(order_result, order_params):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
    
    Args:
        order_result (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        order_params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
    """
    
    if not order_result:
        print("üìã –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    print(f"\\nüìù –û–†–î–ï–† –£–°–ü–ï–®–ù–û –†–ê–ó–ú–ï–©–ï–ù")
    print("=" * 60)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    order_id = order_result.get('orderId', 'N/A')
    client_oid = order_result.get('clientOid', 'N/A')
    
    print(f"üÜî ID –æ—Ä–¥–µ—Ä–∞: {order_id}")
    if client_oid != 'N/A':
        print(f"üè∑Ô∏è –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID: {client_oid}")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
    print(f"\\nüìã –ü–ê–†–ê–ú–ï–¢–†–´ –û–†–î–ï–†–ê:")
    print("-" * 30)
    print(f"üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {order_params.get('symbol', 'N/A')}")
    print(f"üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {order_params.get('side', 'N/A').upper()}")
    print(f"üìã –¢–∏–ø –æ—Ä–¥–µ—Ä–∞: {order_params.get('orderType', 'N/A').upper()}")
    print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_params.get('size', 'N/A')}")
    
    if order_params.get('price'):
        print(f"üí∞ –¶–µ–Ω–∞: {order_params.get('price')}")
    
    if order_params.get('force'):
        print(f"‚ö° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {order_params.get('force')}")
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    print(f"‚è∞ –í—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–π —Å—É–º–º—ã –æ—Ä–¥–µ—Ä–∞
    try:
        size = float(order_params.get('size', 0))
        if order_params.get('price'):
            price = float(order_params.get('price', 0))
            total_amount = size * price
            print(f"üíµ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞: {total_amount:.6f}")
    except (ValueError, TypeError):
        pass

def get_current_price(symbol):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    
    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
    
    Returns:
        float: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ None
    """
    
    try:
        endpoint = f"{BASE_URL}/api/v2/spot/market/ticker"
        params = {'symbol': symbol}
        
        response = requests.get(endpoint, params=params, timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000':
                ticker_data = data.get('data')
                if ticker_data:
                    return float(ticker_data.get('close', 0))
        
        return None
        
    except Exception:
        return None

def validate_order_params(symbol, side, order_type, size, price=None):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
    
    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        side (str): –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        order_type (str): –¢–∏–ø –æ—Ä–¥–µ—Ä–∞
        size (str): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        price (str): –¶–µ–Ω–∞
    
    Returns:
        tuple: (is_valid, error_message)
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if side not in ['buy', 'sell']:
        return False, "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'buy' –∏–ª–∏ 'sell'"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞
    if order_type not in ['limit', 'market']:
        return False, "–¢–∏–ø –æ—Ä–¥–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'limit' –∏–ª–∏ 'market'"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    try:
        size_float = float(size)
        if size_float <= 0:
            return False, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
    except (ValueError, TypeError):
        return False, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    if order_type == 'limit':
        if not price:
            return False, "–î–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É"
        
        try:
            price_float = float(price)
            if price_float <= 0:
                return False, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
        except (ValueError, TypeError):
            return False, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
    
    return True, "OK"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìù Bitget Spot REST API - Place Order")
    print("=" * 55)
    
    # –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä!
    print("\\nüö® –í–ù–ò–ú–ê–ù–ò–ï: –†–ï–ê–õ–¨–ù–û–ï –†–ê–ó–ú–ï–©–ï–ù–ò–ï –û–†–î–ï–†–ê! üö®")
    print("=" * 50)
    print("‚ö†Ô∏è  –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–º–µ—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ!")
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!")
    print("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö —Å—É–º–º–∞—Ö!")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞ (–ò–ó–ú–ï–ù–ò–¢–ï –ü–û–î –°–í–û–ò –ù–£–ñ–î–´)
    symbol = "BTCUSDT"
    side = "buy"  # buy –∏–ª–∏ sell
    order_type = "limit"  # limit –∏–ª–∏ market
    size = "0.001"  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∞
    price = "30000"  # –¶–µ–Ω–∞ –Ω–∏–∂–µ —Ä—ã–Ω–æ—á–Ω–æ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    force = "gtc"  # gtc, post_only, fok, ioc
    
    print(f"\\nüìã –ü–ê–†–ê–ú–ï–¢–†–´ –¢–ï–°–¢–û–í–û–ì–û –û–†–î–ï–†–ê:")
    print("-" * 40)
    print(f"üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {symbol}")
    print(f"üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {side.upper()}")
    print(f"üìã –¢–∏–ø –æ—Ä–¥–µ—Ä–∞: {order_type.upper()}")
    print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {size}")
    if order_type == "limit":
        print(f"üí∞ –¶–µ–Ω–∞: {price}")
        print(f"‚ö° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {force}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
    current_price = get_current_price(symbol)
    if current_price:
        print(f"üìä –¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {current_price:.2f}")
        
        if order_type == "limit" and price:
            try:
                price_diff = ((float(price) - current_price) / current_price) * 100
                print(f"üìä –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ä—ã–Ω–∫–∞: {price_diff:+.2f}%")
            except:
                pass
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    is_valid, error_msg = validate_order_params(symbol, side, order_type, size, price)
    if not is_valid:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error_msg}")
        return
    
    print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\\n‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞:")
    confirmation = input("–í–≤–µ–¥–∏—Ç–µ '–†–ê–ó–ú–ï–°–¢–ò–¢–¨' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()
    
    if confirmation != '–†–ê–ó–ú–ï–°–¢–ò–¢–¨':
        print("‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID
    client_oid = f"bitget_test_{int(time.time())}"
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    order_params = {
        'symbol': symbol,
        'side': side,
        'orderType': order_type,
        'size': size,
        'force': force
    }
    
    if order_type == "limit":
        order_params['price'] = price
    
    # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
    result = place_order(
        symbol=symbol,
        side=side,
        order_type=order_type,
        size=size,
        price=price if order_type == "limit" else None,
        force=force,
        client_oid=client_oid
    )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result is not None:
        format_order_response(result, order_params)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
        print(f"\\nüí° –î–ê–õ–¨–ù–ï–ô–®–ò–ï –î–ï–ô–°–¢–í–ò–Ø:")
        print("-" * 30)
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ get_orders.py")
        print("üóëÔ∏è –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ cancel_order.py")
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket")
        
        if result.get('orderId'):
            print(f"\\nüÜî ID –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π: {result.get('orderId')}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä")
        print("\\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
        print("- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å")
        print("- –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞")
        print("- –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        print("- API –∫–ª—é—á–∏ –Ω–µ –∏–º–µ—é—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–∞–≤")
        print("- –ù–∞—Ä—É—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –±–∏—Ä–∂–∏")

if __name__ == "__main__":
    main()
