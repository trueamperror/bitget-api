#!/usr/bin/env python3
"""
Bitget API - –ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤ (Spot)
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
https://www.bitget.com/api-doc/spot/trade/Get-Order-History

–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –î–∞
–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: 10 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É
"""

import requests
import json
import hmac
import hashlib
import base64
import time
from datetime import datetime, timedelta

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('../../config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.json —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏")
        return None
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ config.json!")
        return None

def create_signature(timestamp, method, request_path, query_string, body, secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        secret_key.encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')

def get_orders_history(config, symbol=None, start_time=None, end_time=None, limit=100):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT'). –ï—Å–ª–∏ None - –≤—Å–µ –ø–∞—Ä—ã
    - start_time: –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (timestamp –≤ ms)
    - end_time: –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è (timestamp –≤ ms)  
    - limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (1-100)
    """
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    params = {
        'limit': str(min(limit, 100))  # –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π –∑–∞ –∑–∞–ø—Ä–æ—Å
    }
    
    if symbol:
        params['symbol'] = symbol.upper()
    
    if start_time:
        params['startTime'] = str(start_time)
        
    if end_time:
        params['endTime'] = str(end_time)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    query_string = '&'.join([f"{k}={v}" for k, v in params.items()])
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    timestamp = str(int(time.time() * 1000))
    method = 'GET'
    request_path = '/api/v2/spot/trade/fills'
    body = ''
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
    signature = create_signature(timestamp, method, request_path, query_string, body, config['secretKey'])
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    # URL –∑–∞–ø—Ä–æ—Å–∞
    url = f"{config['baseURL']}{request_path}?{query_string}"
    
    try:
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤...")
        if symbol:
            print(f"üí± –ü–∞—Ä–∞: {symbol}")
        
        response = requests.get(url, headers=headers, timeout=config.get('timeout', 30))
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('code') == '00000':
                return data.get('data', [])
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg')}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def format_order_status(status):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞"""
    status_map = {
        'live': 'üü° –ê–∫—Ç–∏–≤–Ω—ã–π',
        'partially_filled': 'üü† –ß–∞—Å—Ç–∏—á–Ω–æ',
        'filled': 'üü¢ –ò—Å–ø–æ–ª–Ω–µ–Ω',
        'cancelled': 'üî¥ –û—Ç–º–µ–Ω–µ–Ω',
        'new': 'üîµ –ù–æ–≤—ã–π'
    }
    return status_map.get(status, f"‚ùì {status}")

def format_order_type(order_type):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞"""
    type_map = {
        'limit': 'üìä –õ–∏–º–∏—Ç–Ω—ã–π',
        'market': '‚ö° –†—ã–Ω–æ—á–Ω—ã–π',
        'post_only': 'üìå Post Only',
        'fok': 'üéØ FOK',
        'ioc': '‚è±Ô∏è IOC'
    }
    return type_map.get(order_type, f"‚ùì {order_type}")

def format_side(side):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ä–¥–µ—Ä–∞"""
    if side.lower() == 'buy':
        return 'üü¢ –ü–æ–∫—É–ø–∫–∞'
    elif side.lower() == 'sell':
        return 'üî¥ –ü—Ä–æ–¥–∞–∂–∞'
    else:
        return f"‚ùì {side}"

def analyze_orders(orders):
    """–ê–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–æ–≤"""
    if not orders:
        return
    
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –û–†–î–ï–†–û–í")
    print("=" * 50)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_count = {}
    total_volume = 0
    total_fees = 0
    symbols_traded = set()
    
    for order in orders:
        status = order.get('status', 'unknown')
        status_count[status] = status_count.get(status, 0) + 1
        
        if order.get('fillNotionalUsd'):
            total_volume += float(order['fillNotionalUsd'])
        
        if order.get('feeDetail'):
            # –°—É–º–º–∏—Ä—É–µ–º –∫–æ–º–∏—Å—Å–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤)
            fee_detail = order['feeDetail']
            if isinstance(fee_detail, list):
                for fee in fee_detail:
                    if fee.get('totalFee'):
                        total_fees += abs(float(fee['totalFee']))
        
        symbols_traded.add(order.get('symbol', ''))
    
    print(f"üìà –û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: ${total_volume:,.2f}")
    print(f"üí∏ –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: ${total_fees:.4f}")
    print(f"üí± –¢–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(symbols_traded)}")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
    for status, count in status_count.items():
        formatted_status = format_order_status(status)
        percentage = (count / len(orders)) * 100
        print(f"   {formatted_status}: {count} ({percentage:.1f}%)")
    
    # –¢–æ–ø —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    if len(symbols_traded) > 1:
        symbol_volume = {}
        for order in orders:
            symbol = order.get('symbol', '')
            volume = float(order.get('fillNotionalUsd', 0))
            symbol_volume[symbol] = symbol_volume.get(symbol, 0) + volume
        
        print(f"\nüíé –¢–æ–ø —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É:")
        sorted_symbols = sorted(symbol_volume.items(), key=lambda x: x[1], reverse=True)
        for i, (symbol, volume) in enumerate(sorted_symbols[:5], 1):
            print(f"   {i}. {symbol}: ${volume:,.2f}")

def display_orders(orders):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    if not orders:
        print("üì≠ –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    print(f"\nüìã –ò–°–¢–û–†–ò–Ø –û–†–î–ï–†–û–í")
    print("=" * 80)
    print(f"üî¢ –ù–∞–π–¥–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(orders)}")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    table_data = []
    
    for order in orders:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        create_time = int(order.get('cTime', 0))
        if create_time:
            dt = datetime.fromtimestamp(create_time / 1000)
            time_str = dt.strftime('%d.%m %H:%M')
        else:
            time_str = "N/A"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        symbol = order.get('symbol', 'N/A')
        side = format_side(order.get('side', ''))
        order_type = format_order_type(order.get('orderType', ''))
        status = format_order_status(order.get('status', ''))
        
        # –¶–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        price = float(order.get('price', 0))
        size = float(order.get('size', 0))
        filled_size = float(order.get('baseVolume', 0))
        
        # –û–±—ä–µ–º –≤ USDT
        filled_notional = float(order.get('fillNotionalUsd', 0))
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        if size > 0:
            fill_pct = (filled_size / size) * 100
            fill_str = f"{fill_pct:.1f}%"
        else:
            fill_str = "0%"
        
        table_data.append([
            time_str,
            symbol,
            side.split()[1] if ' ' in side else side,  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            order_type.split()[1] if ' ' in order_type else order_type,
            f"${price:.4f}" if price > 0 else "Market",
            f"{size:.6f}",
            fill_str,
            f"${filled_notional:.2f}",
            status.split()[1] if ' ' in status else status
        ])
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    headers = [
        "–í—Ä–µ–º—è", "–ü–∞—Ä–∞", "–°—Ç–æ—Ä–æ–Ω–∞", "–¢–∏–ø", 
        "–¶–µ–Ω–∞", "–†–∞–∑–º–µ—Ä", "–ò—Å–ø–æ–ª–Ω.", "–û–±—ä–µ–º USD", "–°—Ç–∞—Ç—É—Å"
    ]
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    print(tabulate(table_data, headers=headers, tablefmt="grid", stralign="center"))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìã –ò–°–¢–û–†–ò–Ø –û–†–î–ï–†–û–í BITGET SPOT")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    if not config:
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π, –≤—Å–µ –ø–∞—Ä—ã, –ª–∏–º–∏—Ç 50
    from datetime import timedelta
    start_time = int((datetime.now() - timedelta(days=7)).timestamp() * 1000)
    orders = get_orders_history(config, symbol=None, start_time=start_time, end_time=None, limit=50)
    
    if orders is not None:
        import json
        print("\nÔøΩ RAW JSON RESPONSE:")
        print(json.dumps(orders, indent=2, ensure_ascii=False))
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {len(orders)}")
        if orders:
            print("ÔøΩ –ü–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤")
        else:
            print("‚úÖ –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.json –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
