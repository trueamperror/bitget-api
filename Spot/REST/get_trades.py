#!/usr/bin/env python3
"""
Bitget API - –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Spot)
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (fills)

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
https://www.bitget.com/api-doc/spot/trade/Get-Fills

–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –î–∞
–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: 10 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É
"""

import requests
import json
import hmac
import hashlib
import base64
import time
from datetime import datetime, timedelta

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('../../config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.json —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏")
        return None
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ config.json!")
        return None

def create_signature(timestamp, method, request_path, query_string, body, secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        secret_key.encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')

def get_trade_fills(config, symbol=None, start_time=None, end_time=None, limit=100):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT'). –ï—Å–ª–∏ None - –≤—Å–µ –ø–∞—Ä—ã
    - start_time: –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (timestamp –≤ ms)
    - end_time: –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è (timestamp –≤ ms)
    - limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (1-100)
    """
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    params = {
        'limit': str(min(limit, 100))  # –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π –∑–∞ –∑–∞–ø—Ä–æ—Å
    }
    
    if symbol:
        params['symbol'] = symbol.upper()
    
    if start_time:
        params['startTime'] = str(start_time)
        
    if end_time:
        params['endTime'] = str(end_time)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    query_string = '&'.join([f"{k}={v}" for k, v in params.items()])
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    timestamp = str(int(time.time() * 1000))
    method = 'GET'
    request_path = '/api/v2/spot/trade/fills'
    body = ''
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
    signature = create_signature(timestamp, method, request_path, query_string, body, config['secretKey'])
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    # URL –∑–∞–ø—Ä–æ—Å–∞
    url = f"{config['baseURL']}{request_path}?{query_string}"
    
    try:
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫...")
        if symbol:
            print(f"üí± –ü–∞—Ä–∞: {symbol}")
        
        response = requests.get(url, headers=headers, timeout=config.get('timeout', 30))
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('code') == '00000':
                return data.get('data', [])
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg')}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def format_side(side):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å–¥–µ–ª–∫–∏"""
    if side.lower() == 'buy':
        return 'üü¢ –ü–æ–∫—É–ø–∫–∞'
    elif side.lower() == 'sell':
        return 'üî¥ –ü—Ä–æ–¥–∞–∂–∞'
    else:
        return f"‚ùì {side}"

def format_fee_currency(fee_currency):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏"""
    if not fee_currency:
        return "N/A"
    
    currency_emojis = {
        'USDT': 'üíµ',
        'BTC': 'üü°',
        'ETH': 'üî∑',
        'BNB': 'üü®',
        'USDC': 'üí∂'
    }
    
    emoji = currency_emojis.get(fee_currency.upper(), 'üí∞')
    return f"{emoji} {fee_currency}"

def analyze_trades(trades):
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫"""
    if not trades:
        return
    
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –°–î–ï–õ–û–ö")
    print("=" * 50)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_buy_volume = 0
    total_sell_volume = 0
    total_buy_qty = 0
    total_sell_qty = 0
    total_fees = 0
    symbols_traded = set()
    currencies_traded = set()
    
    buy_count = 0
    sell_count = 0
    
    for trade in trades:
        side = trade.get('side', '').lower()
        notional = float(trade.get('notional', 0))
        base_volume = float(trade.get('baseVolume', 0))
        fee = float(trade.get('fee', 0))
        
        symbols_traded.add(trade.get('symbol', ''))
        currencies_traded.add(trade.get('feeCcy', ''))
        
        total_fees += abs(fee)
        
        if side == 'buy':
            buy_count += 1
            total_buy_volume += notional
            total_buy_qty += base_volume
        elif side == 'sell':
            sell_count += 1
            total_sell_volume += notional
            total_sell_qty += base_volume
    
    total_volume = total_buy_volume + total_sell_volume
    
    print(f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: ${total_volume:,.2f}")
    print(f"üü¢ –ü–æ–∫—É–ø–∫–∏: {buy_count} —Å–¥–µ–ª–æ–∫, ${total_buy_volume:,.2f}")
    print(f"üî¥ –ü—Ä–æ–¥–∞–∂–∏: {sell_count} —Å–¥–µ–ª–æ–∫, ${total_sell_volume:,.2f}")
    print(f"üí∏ –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: ${total_fees:.6f}")
    print(f"üí± –¢–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(symbols_traded)}")
    
    # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏
    if len(trades) > 0:
        avg_trade_size = total_volume / len(trades)
        print(f"üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏: ${avg_trade_size:.2f}")
    
    # –¢–æ–ø —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É
    if len(symbols_traded) > 1:
        symbol_volume = {}
        symbol_count = {}
        
        for trade in trades:
            symbol = trade.get('symbol', '')
            volume = float(trade.get('notional', 0))
            symbol_volume[symbol] = symbol_volume.get(symbol, 0) + volume
            symbol_count[symbol] = symbol_count.get(symbol, 0) + 1
        
        print(f"\nüíé –¢–æ–ø —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä:")
        sorted_symbols = sorted(symbol_volume.items(), key=lambda x: x[1], reverse=True)
        for i, (symbol, volume) in enumerate(sorted_symbols[:5], 1):
            count = symbol_count[symbol]
            avg_size = volume / count
            print(f"   {i}. {symbol}: ${volume:,.2f} ({count} —Å–¥–µ–ª–æ–∫, —Å—Ä. ${avg_size:.2f})")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π –ø–æ –≤–∞–ª—é—Ç–∞–º
    if len(currencies_traded) > 1:
        fee_by_currency = {}
        for trade in trades:
            currency = trade.get('feeCcy', 'UNKNOWN')
            fee = float(trade.get('fee', 0))
            fee_by_currency[currency] = fee_by_currency.get(currency, 0) + abs(fee)
        
        print(f"\nüí∏ –ö–æ–º–∏—Å—Å–∏–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º:")
        for currency, fee_total in sorted(fee_by_currency.items(), key=lambda x: x[1], reverse=True):
            formatted_currency = format_fee_currency(currency)
            print(f"   {formatted_currency}: {fee_total:.6f}")

def display_trades(trades):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫"""
    if not trades:
        print("üì≠ –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    print(f"\nüíº –ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö")
    print("=" * 80)
    print(f"üî¢ –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {len(trades)}")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    print(f"\n{'–í—Ä–µ–º—è':<12} {'–ü–∞—Ä–∞':<10} {'–°—Ç–æ—Ä–æ–Ω–∞':<8} {'–¶–µ–Ω–∞':<12} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':<15} {'–û–±—ä–µ–º USD':<12} {'–ö–æ–º–∏—Å—Å–∏—è':<10}")
    print("-" * 85)
    
    for trade in trades:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        trade_time = int(trade.get('cTime', 0))
        if trade_time:
            dt = datetime.fromtimestamp(trade_time / 1000)
            time_str = dt.strftime('%d.%m %H:%M')
        else:
            time_str = "N/A"
        
        # –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        symbol = trade.get('symbol', 'N/A')[:10]
        side = 'üü¢ BUY' if trade.get('side', '').lower() == 'buy' else 'üî¥ SELL'
        price = float(trade.get('price', 0))
        base_volume = float(trade.get('baseVolume', 0))
        notional = float(trade.get('notional', 0))
        fee = float(trade.get('fee', 0))
        fee_currency = trade.get('feeCcy', '')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        price_str = f"${price:.4f}" if price > 0 else "N/A"
        volume_str = f"{base_volume:.6f}".rstrip('0').rstrip('.')
        notional_str = f"${notional:.2f}"
        fee_str = f"{abs(fee):.6f} {fee_currency}" if fee != 0 else "0"
        
        print(f"{time_str:<12} {symbol:<10} {side:<8} {price_str:<12} {volume_str:<15} {notional_str:<12} {fee_str:<10}")

def display_recent_summary(trades):
    """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫"""
    if not trades:
        return
    
    recent_trades = trades[:5]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
    
    print(f"\nüî• –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò")
    print("=" * 40)
    
    for i, trade in enumerate(recent_trades, 1):
        trade_time = int(trade.get('cTime', 0))
        if trade_time:
            dt = datetime.fromtimestamp(trade_time / 1000)
            time_str = dt.strftime('%d.%m.%Y %H:%M:%S')
        else:
            time_str = "N/A"
        
        symbol = trade.get('symbol', 'N/A')
        side = format_side(trade.get('side', ''))
        price = float(trade.get('price', 0))
        notional = float(trade.get('notional', 0))
        
        print(f"#{i} [{time_str}]")
        print(f"   üí± {symbol} ‚Ä¢ {side}")
        print(f"   üí∞ ${price:.4f} ‚Ä¢ –û–±—ä–µ–º: ${notional:.2f}")
        print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üíº –ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö BITGET SPOT")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    if not config:
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π, –≤—Å–µ –ø–∞—Ä—ã, –ª–∏–º–∏—Ç 50
    from datetime import timedelta
    start_time = int((datetime.now() - timedelta(days=7)).timestamp() * 1000)
    trades = get_trade_fills(config, symbol=None, start_time=start_time, end_time=None, limit=50)
    
    if trades is not None:
        import json
        print("\nüìÑ RAW JSON RESPONSE:")
        print(json.dumps(trades, indent=2, ensure_ascii=False))
        
        print(f"\nÔøΩ –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {len(trades)}")
        if trades:
            print("ÔøΩ –ü–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            print("‚úÖ –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫")
    
    period_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
    
    start_time = None
    end_time = None
    
    if period_choice == "1":
        start_time = int((datetime.now() - timedelta(days=1)).timestamp() * 1000)
    elif period_choice == "2":
        start_time = int((datetime.now() - timedelta(days=7)).timestamp() * 1000)
    elif period_choice == "3":
        start_time = int((datetime.now() - timedelta(days=30)).timestamp() * 1000)
    elif period_choice == "4":
        try:
            days = int(input("üìÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥: "))
            start_time = int((datetime.now() - timedelta(days=days)).timestamp() * 1000)
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
            start_time = int((datetime.now() - timedelta(days=7)).timestamp() * 1000)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
    try:
        limit = int(input("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ (1-100, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50): ") or "50")
        limit = max(1, min(limit, 100))
    except ValueError:
        limit = 50
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
    trades = get_trade_fills(config, symbol, start_time, end_time, limit)
    
    if trades is not None:
        if trades:
            display_recent_summary(trades)
            display_trades(trades)
            analyze_trades(trades)
        else:
            print("üì≠ –°–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            if symbol:
                print(f"üí± –ü–∞—Ä–∞: {symbol}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.json –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
