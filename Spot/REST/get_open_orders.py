#!/usr/bin/env python3
"""
Bitget API - –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (Spot)
–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö (–∞–∫—Ç–∏–≤–Ω—ã—Ö) –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
https://www.bitget.com/api-doc/spot/trade/Get-Open-Orders

–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –î–∞
–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: 10 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É
"""

import requests
import json
import hmac
import hashlib
import base64
import time
from datetime import datetime

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('../../config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.json —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏")
        return None
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ config.json!")
        return None

def create_signature(timestamp, method, request_path, query_string, body, secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        secret_key.encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')

def get_open_orders(config, symbol=None, limit=100):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT'). –ï—Å–ª–∏ None - –≤—Å–µ –ø–∞—Ä—ã
    - limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (1-100)
    """
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    params = {
        'limit': str(min(limit, 100))
    }
    
    if symbol:
        params['symbol'] = symbol.upper()
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    query_string = '&'.join([f"{k}={v}" for k, v in params.items()])
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    timestamp = str(int(time.time() * 1000))
    method = 'GET'
    request_path = '/api/v2/spot/trade/unfilled-orders'
    body = ''
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
    signature = create_signature(timestamp, method, request_path, query_string, body, config['secretKey'])
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    # URL –∑–∞–ø—Ä–æ—Å–∞
    url = f"{config['baseURL']}{request_path}?{query_string}"
    
    try:
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤...")
        if symbol:
            print(f"üí± –ü–∞—Ä–∞: {symbol}")
        
        response = requests.get(url, headers=headers, timeout=config.get('timeout', 30))
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('code') == '00000':
                return data.get('data', [])
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg')}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def format_order_type(order_type):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞"""
    type_map = {
        'limit': 'üìä –õ–∏–º–∏—Ç–Ω—ã–π',
        'market': '‚ö° –†—ã–Ω–æ—á–Ω—ã–π',
        'post_only': 'üìå Post Only',
        'fok': 'üéØ FOK',
        'ioc': '‚è±Ô∏è IOC'
    }
    return type_map.get(order_type, f"‚ùì {order_type}")

def format_side(side):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ä–¥–µ—Ä–∞"""
    if side.lower() == 'buy':
        return 'üü¢ –ü–æ–∫—É–ø–∫–∞'
    elif side.lower() == 'sell':
        return 'üî¥ –ü—Ä–æ–¥–∞–∂–∞'
    else:
        return f"‚ùì {side}"

def format_status(status):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞"""
    status_map = {
        'live': 'üü° –ê–∫—Ç–∏–≤–Ω—ã–π',
        'new': 'üîµ –ù–æ–≤—ã–π',
        'partially_filled': 'üü† –ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω'
    }
    return status_map.get(status, f"‚ùì {status}")

def calculate_order_value(order):
    """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ä–¥–µ—Ä–∞"""
    try:
        price = float(order.get('price', 0))
        size = float(order.get('size', 0))
        
        if price > 0 and size > 0:
            return price * size
        return 0
    except (ValueError, TypeError):
        return 0

def calculate_distance_from_market(order, market_price):
    """–†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã"""
    try:
        order_price = float(order.get('price', 0))
        if order_price <= 0 or market_price <= 0:
            return 0, 0
        
        distance = abs(order_price - market_price)
        distance_pct = (distance / market_price) * 100
        
        return distance, distance_pct
    except (ValueError, TypeError):
        return 0, 0

def analyze_open_orders(orders):
    """–ê–Ω–∞–ª–∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    if not orders:
        return
    
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –û–¢–ö–†–´–¢–´–• –û–†–î–ï–†–û–í")
    print("=" * 50)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_buy_orders = 0
    total_sell_orders = 0
    total_buy_value = 0
    total_sell_value = 0
    
    symbols_count = {}
    order_types_count = {}
    
    for order in orders:
        side = order.get('side', '').lower()
        order_value = calculate_order_value(order)
        symbol = order.get('symbol', 'UNKNOWN')
        order_type = order.get('orderType', 'unknown')
        
        # –°—á–µ—Ç—á–∏–∫–∏ –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º
        if side == 'buy':
            total_buy_orders += 1
            total_buy_value += order_value
        elif side == 'sell':
            total_sell_orders += 1
            total_sell_value += order_value
        
        # –°—á–µ—Ç—á–∏–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        symbols_count[symbol] = symbols_count.get(symbol, 0) + 1
        
        # –°—á–µ—Ç—á–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –æ—Ä–¥–µ—Ä–æ–≤
        order_types_count[order_type] = order_types_count.get(order_type, 0) + 1
    
    total_orders = len(orders)
    total_value = total_buy_value + total_sell_value
    
    print(f"üìà –í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {total_orders}")
    print(f"üü¢ –û—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {total_buy_orders} (${total_buy_value:,.2f})")
    print(f"üî¥ –û—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {total_sell_orders} (${total_sell_value:,.2f})")
    print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_value:,.2f}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º –ø–∞—Ä–∞–º
    if len(symbols_count) > 1:
        print(f"\nüí± –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–∞—Ä–∞–º:")
        sorted_symbols = sorted(symbols_count.items(), key=lambda x: x[1], reverse=True)
        for symbol, count in sorted_symbols:
            percentage = (count / total_orders) * 100
            print(f"   {symbol}: {count} –æ—Ä–¥–µ—Ä–æ–≤ ({percentage:.1f}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—Ä–¥–µ—Ä–æ–≤
    print(f"\nüìä –¢–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤:")
    for order_type, count in order_types_count.items():
        formatted_type = format_order_type(order_type)
        percentage = (count / total_orders) * 100
        print(f"   {formatted_type}: {count} ({percentage:.1f}%)")

def display_orders(orders):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    if not orders:
        print("üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        return
    
    print(f"\nüìã –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê")
    print("=" * 100)
    print(f"üî¢ –ù–∞–π–¥–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(orders)}")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    print(f"\n{'ID –æ—Ä–¥–µ—Ä–∞':<15} {'–í—Ä–µ–º—è':<12} {'–ü–∞—Ä–∞':<10} {'–°—Ç–æ—Ä–æ–Ω–∞':<8} {'–¢–∏–ø':<10} {'–¶–µ–Ω–∞':<12} {'–†–∞–∑–º–µ—Ä':<15} {'–°—Ç–æ–∏–º–æ—Å—Ç—å':<12} {'–°—Ç–∞—Ç—É—Å':<10}")
    print("-" * 100)
    
    for order in orders:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        order_id = order.get('orderId', 'N/A')[:14]
        
        # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        create_time = int(order.get('cTime', 0))
        if create_time:
            dt = datetime.fromtimestamp(create_time / 1000)
            time_str = dt.strftime('%d.%m %H:%M')
        else:
            time_str = "N/A"
        
        symbol = order.get('symbol', 'N/A')[:9]
        side = 'üü¢ BUY' if order.get('side', '').lower() == 'buy' else 'üî¥ SELL'
        order_type = order.get('orderType', 'N/A')[:9]
        
        # –¶–µ–Ω–∞ –∏ —Ä–∞–∑–º–µ—Ä—ã
        price = float(order.get('price', 0))
        size = float(order.get('size', 0))
        order_value = calculate_order_value(order)
        
        # –°—Ç–∞—Ç—É—Å
        status = format_status(order.get('status', ''))
        status_short = status.split()[1] if ' ' in status else status[:9]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        price_str = f"${price:.4f}" if price > 0 else "Market"
        size_str = f"{size:.6f}".rstrip('0').rstrip('.')
        value_str = f"${order_value:.2f}" if order_value > 0 else "N/A"
        
        print(f"{order_id:<15} {time_str:<12} {symbol:<10} {side:<8} {order_type:<10} {price_str:<12} {size_str:<15} {value_str:<12} {status_short:<10}")

def display_order_summary(orders):
    """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –æ—Ä–¥–µ—Ä–∞–º"""
    if not orders:
        return
    
    print(f"\nüéØ –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê")
    print("=" * 40)
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—Ä–¥–µ—Ä–∞
    recent_orders = orders[:3]
    
    for i, order in enumerate(recent_orders, 1):
        create_time = int(order.get('cTime', 0))
        if create_time:
            dt = datetime.fromtimestamp(create_time / 1000)
            time_str = dt.strftime('%d.%m.%Y %H:%M')
        else:
            time_str = "N/A"
        
        symbol = order.get('symbol', 'N/A')
        side = format_side(order.get('side', ''))
        price = float(order.get('price', 0))
        size = float(order.get('size', 0))
        order_value = calculate_order_value(order)
        
        print(f"#{i} [{time_str}]")
        print(f"   üí± {symbol} ‚Ä¢ {side}")
        print(f"   üí∞ ${price:.4f} ‚Ä¢ –†–∞–∑–º–µ—Ä: {size:.6f}")
        print(f"   üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${order_value:.2f}")
        print()

def check_order_risks(orders):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤"""
    if not orders:
        return
    
    print(f"\n‚ö†Ô∏è –ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í")
    print("=" * 30)
    
    risks_found = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ –æ—Ä–¥–µ—Ä–∞
    current_time = time.time() * 1000
    old_orders = []
    
    for order in orders:
        create_time = int(order.get('cTime', 0))
        if create_time:
            age_hours = (current_time - create_time) / (1000 * 60 * 60)
            if age_hours > 24:  # –°—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                old_orders.append((order, age_hours))
    
    if old_orders:
        risks_found.append(f"üìÖ –°—Ç–∞—Ä—ã–µ –æ—Ä–¥–µ—Ä–∞: {len(old_orders)} –æ—Ä–¥–µ—Ä–æ–≤ —Å—Ç–∞—Ä—à–µ 24—á")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤
    if len(orders) > 20:
        risks_found.append(f"üìä –ú–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(orders)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –≤ –æ–¥–Ω–æ–π –ø–∞—Ä–µ
    symbols_count = {}
    for order in orders:
        symbol = order.get('symbol', '')
        symbols_count[symbol] = symbols_count.get(symbol, 0) + 1
    
    for symbol, count in symbols_count.items():
        if count > len(orders) * 0.7:  # –ë–æ–ª–µ–µ 70% –æ—Ä–¥–µ—Ä–æ–≤ –≤ –æ–¥–Ω–æ–π –ø–∞—Ä–µ
            risks_found.append(f"‚öñÔ∏è –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {count} –æ—Ä–¥–µ—Ä–æ–≤ –≤ {symbol}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –æ—Ä–¥–µ—Ä–∞
    large_orders = []
    for order in orders:
        order_value = calculate_order_value(order)
        if order_value > 10000:  # –û—Ä–¥–µ—Ä–∞ –±–æ–ª—å—à–µ $10,000
            large_orders.append((order, order_value))
    
    if large_orders:
        risks_found.append(f"üí∞ –ö—Ä—É–ø–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: {len(large_orders)} –æ—Ä–¥–µ—Ä–æ–≤ > $10k")
    
    if risks_found:
        for risk in risks_found:
            print(f"   {risk}")
    else:
        print("   ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìã –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê BITGET SPOT")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    if not config:
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    orders = get_open_orders(config, symbol=None, limit=100)
    
    if orders is not None:
        import json
        print("\nüìÑ RAW JSON RESPONSE:")
        print(json.dumps(orders, indent=2, ensure_ascii=False))
        
        print(f"\nÔøΩ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(orders)}")
        if orders:
            print("ÔøΩ –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞")
            display_order_summary(orders)
        else:
            print("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.json –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
