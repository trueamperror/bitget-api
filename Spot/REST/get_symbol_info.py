# -*- coding: utf-8 -*-
"""
Bitget Spot REST API - Get Symbol Info
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/spot/market/Get-Symbol-List

–û–ø–∏—Å–∞–Ω–∏–µ:
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (—Å–∏–º–≤–æ–ª–æ–≤) –Ω–∞ —Å–ø–æ—Ç —Ä—ã–Ω–∫–µ Bitget.
–í–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö/–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö –æ—Ä–¥–µ—Ä–æ–≤, —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
–≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã.

–í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:
- symbol: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
- baseCoin: –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC)
- quoteCoin: –ö–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDT)
- minTradeAmount: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
- maxTradeAmount: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
- takerFeeRate: –ö–æ–º–∏—Å—Å–∏—è —Ç–µ–π–∫–µ—Ä–∞
- makerFeeRate: –ö–æ–º–∏—Å—Å–∏—è –º–µ–π–∫–µ—Ä–∞
- priceScale: –¢–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
- quantityScale: –¢–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
- status: –°—Ç–∞—Ç—É—Å –ø–∞—Ä—ã (online/offline)
"""

import requests
import json
import os
from datetime import datetime

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config_path = os.path.join(os.path.dirname(__file__), '../../config.json')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    with open(config_path, 'r') as config_file:
        config = json.load(config_file)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
BASE_URL = config.get('baseURL', 'https://api.bitget.com')

def get_symbol_info():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    endpoint = f"{BASE_URL}/api/v2/spot/public/symbols"
    
    try:
        print(f"üîç –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö...")
        print(f"üåê –≠–Ω–¥–ø–æ–∏–Ω—Ç: {endpoint}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å (–ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        response = requests.get(endpoint, timeout=10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code == 200:
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ Bitget
            if data.get('code') == '00000':
                symbols_data = data.get('data', [])
                if symbols_data:
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(symbols_data)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
                    return symbols_data
                else:
                    print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return []
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API Bitget: {data.get('msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def format_symbol_info_response(symbols_data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö
    
    Args:
        symbols_data (list): –î–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    """
    
    if not symbols_data:
        print("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    print(f"\\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–†–ì–û–í–´–• –ü–ê–†–ê–• BITGET")
    print("=" * 100)
    print(f"üî¢ –í—Å–µ–≥–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(symbols_data)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    online_pairs = [s for s in symbols_data if s.get('status') == 'online']
    offline_pairs = [s for s in symbols_data if s.get('status') != 'online']
    
    print(f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: {len(online_pairs)}")
    print(f"üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: {len(offline_pairs)}")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    print(f"\\n{'–°–∏–º–≤–æ–ª':^15} {'–ë–∞–∑–æ–≤–∞—è':^8} {'–ö–æ—Ç–∏—Ä.':^8} {'–°—Ç–∞—Ç—É—Å':^8} {'–ú–∏–Ω.—Ä–∞–∑–º–µ—Ä':>12} {'–ú–∞–∫—Å.—Ä–∞–∑–º–µ—Ä':>15} {'–¢–æ—á–Ω.—Ü–µ–Ω—ã':>10} {'–ö–æ–º–∏—Å—Å–∏–∏':>15}")
    print("-" * 100)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã (–ø–µ—Ä–≤—ã–µ 20 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
    display_pairs = online_pairs[:20] if len(online_pairs) > 20 else online_pairs
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–∑–æ–≤—ã–º –≤–∞–ª—é—Ç–∞–º
    base_coins_stats = {}
    quote_coins_stats = {}
    
    for symbol in symbols_data:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            symbol_name = symbol.get('symbol', 'N/A')
            base_coin = symbol.get('baseCoin', 'N/A')
            quote_coin = symbol.get('quoteCoin', 'N/A')
            status = symbol.get('status', 'N/A')
            min_trade_amount = symbol.get('minTradeAmount', '0')
            max_trade_amount = symbol.get('maxTradeAmount', '0')
            price_scale = symbol.get('priceScale', '0')
            quantity_scale = symbol.get('quantityScale', '0')
            taker_fee = symbol.get('takerFeeRate', '0')
            maker_fee = symbol.get('makerFeeRate', '0')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º
            if base_coin != 'N/A':
                base_coins_stats[base_coin] = base_coins_stats.get(base_coin, 0) + 1
            if quote_coin != 'N/A':
                quote_coins_stats[quote_coin] = quote_coins_stats.get(quote_coin, 0) + 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            if symbol in display_pairs:
                # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                status_emoji = "üü¢" if status == "online" else "üî¥"
                status_display = f"{status_emoji}{status}"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                fees_display = f"{float(taker_fee)*100:.3f}%/{float(maker_fee)*100:.3f}%"
                
                print(f"{symbol_name:^15} {base_coin:^8} {quote_coin:^8} {status_display:^10} {min_trade_amount:>12} {max_trade_amount:>15} {price_scale:>10} {fees_display:>15}")
                
        except (ValueError, KeyError) as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–º–≤–æ–ª–∞: {e}")
            continue
    
    if len(online_pairs) > 20:
        print(f"... –∏ –µ—â–µ {len(online_pairs) - 20} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä")
    
    # –¢–æ–ø –±–∞–∑–æ–≤—ã—Ö –≤–∞–ª—é—Ç
    print(f"\\nüìà –¢–û–ü –ë–ê–ó–û–í–´–• –í–ê–õ–Æ–¢:")
    print("-" * 40)
    sorted_base_coins = sorted(base_coins_stats.items(), key=lambda x: x[1], reverse=True)[:10]
    
    for coin, count in sorted_base_coins:
        print(f"üí∞ {coin}: {count} –ø–∞—Ä")
    
    # –¢–æ–ø –∫–æ—Ç–∏—Ä—É–µ–º—ã—Ö –≤–∞–ª—é—Ç
    print(f"\\nüíµ –¢–û–ü –ö–û–¢–ò–†–£–ï–ú–´–• –í–ê–õ–Æ–¢:")
    print("-" * 40)
    sorted_quote_coins = sorted(quote_coins_stats.items(), key=lambda x: x[1], reverse=True)[:10]
    
    for coin, count in sorted_quote_coins:
        print(f"üíµ {coin}: {count} –ø–∞—Ä")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π
    if symbols_data:
        try:
            taker_fees = [float(s.get('takerFeeRate', 0)) for s in symbols_data if s.get('takerFeeRate')]
            maker_fees = [float(s.get('makerFeeRate', 0)) for s in symbols_data if s.get('makerFeeRate')]
            
            if taker_fees and maker_fees:
                avg_taker = sum(taker_fees) / len(taker_fees) * 100
                avg_maker = sum(maker_fees) / len(maker_fees) * 100
                
                print(f"\\nüí∏ –ê–ù–ê–õ–ò–ó –ö–û–ú–ò–°–°–ò–ô:")
                print("-" * 30)
                print(f"üìä –°—Ä–µ–¥–Ω—è—è –∫–æ–º–∏—Å—Å–∏—è —Ç–µ–π–∫–µ—Ä–∞: {avg_taker:.4f}%")
                print(f"üìä –°—Ä–µ–¥–Ω—è—è –∫–æ–º–∏—Å—Å–∏—è –º–µ–π–∫–µ—Ä–∞: {avg_maker:.4f}%")
                print(f"üìä –†–∞–∑–±—Ä–æ—Å —Ç–µ–π–∫–µ—Ä–∞: {min(taker_fees)*100:.4f}% - {max(taker_fees)*100:.4f}%")
                print(f"üìä –†–∞–∑–±—Ä–æ—Å –º–µ–π–∫–µ—Ä–∞: {min(maker_fees)*100:.4f}% - {max(maker_fees)*100:.4f}%")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∏—Å—Å–∏–π: {e}")

def search_symbols(symbols_data, search_term):
    """
    –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    
    Args:
        symbols_data (list): –î–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        search_term (str): –ü–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω
    
    Returns:
        list: –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
    """
    
    if not symbols_data or not search_term:
        return []
    
    search_term = search_term.upper()
    found_symbols = []
    
    for symbol in symbols_data:
        symbol_name = symbol.get('symbol', '').upper()
        base_coin = symbol.get('baseCoin', '').upper()
        quote_coin = symbol.get('quoteCoin', '').upper()
        
        if (search_term in symbol_name or 
            search_term in base_coin or 
            search_term in quote_coin):
            found_symbols.append(symbol)
    
    return found_symbols

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Bitget Spot REST API - Get Symbol Info")
    print("=" * 55)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö
    symbols = get_symbol_info()
    
    if symbols is not None:
        import json
        print("\nÔøΩ RAW JSON RESPONSE (first 3 symbols):")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞, —Ç–∞–∫ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π
        print(json.dumps(symbols[:3], indent=2, ensure_ascii=False))
        
        print(f"\nÔøΩ –í—Å–µ–≥–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(symbols)}")
        print("üí° –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 3 –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∂–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        format_symbol_info_response(symbols)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö")

if __name__ == "__main__":
    main()
