#!/usr/bin/env python3
"""
Bitget API - –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —è–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏ (Spot)
–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —è–ø–æ–Ω—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
https://www.bitget.com/api-doc/spot/market/Get-Candle-Data

–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ù–µ—Ç (–ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: 20 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É
"""

import requests
import json
import time
from datetime import datetime, timedelta

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('../../config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª ../../config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.json —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        return None
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ config.json!")
        return None

def get_candlesticks(config, symbol, granularity='1h', start_time=None, end_time=None, limit=100):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —è–ø–æ–Ω—Å–∫–∏—Ö —Å–≤–µ—á–µ–π
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 'BTCUSDT')
    - granularity: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (1m, 5m, 15m, 30m, 1h, 4h, 6h, 12h, 1day, 1week)
    - start_time: –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (timestamp –≤ ms)
    - end_time: –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è (timestamp –≤ ms)
    - limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π (–º–∞–∫—Å–∏–º—É–º 1000)
    """
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not symbol:
        print("‚ùå –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
        return None
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    params = {
        'symbol': symbol.upper(),
        'granularity': granularity,
        'limit': str(min(limit, 1000))
    }
    
    if start_time:
        params['startTime'] = str(start_time)
        
    if end_time:
        params['endTime'] = str(end_time)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    query_string = '&'.join([f"{k}={v}" for k, v in params.items()])
    
    # URL –∑–∞–ø—Ä–æ—Å–∞
    url = f"{config['baseURL']}/api/v2/spot/market/candles?{query_string}"
    
    try:
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å —Å–≤–µ—á–µ–π –¥–ª—è {symbol}...")
        print(f"üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª: {granularity}")
        print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {limit}")
        
        response = requests.get(url, timeout=config.get('timeout', 30))
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('code') == '00000':
                return data.get('data', [])
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg')}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def parse_candle_data(candles):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ API
    
    –§–æ—Ä–º–∞—Ç API: [timestamp, open, high, low, close, baseVolume, quoteVolume]
    """
    parsed_candles = []
    
    for candle in candles:
        if len(candle) >= 7:
            parsed_candle = {
                'timestamp': int(candle[0]),
                'open': float(candle[1]),
                'high': float(candle[2]),
                'low': float(candle[3]),
                'close': float(candle[4]),
                'base_volume': float(candle[5]),
                'quote_volume': float(candle[6]),
                'datetime': datetime.fromtimestamp(int(candle[0]) / 1000)
            }
            parsed_candles.append(parsed_candle)
    
    return parsed_candles

def analyze_price_movement(candles):
    """–ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã"""
    if len(candles) < 2:
        return
    
    print(f"\nüìà –ê–ù–ê–õ–ò–ó –î–í–ò–ñ–ï–ù–ò–Ø –¶–ï–ù–´")
    print("=" * 50)
    
    first_candle = candles[-1]  # –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è —Å–≤–µ—á–∞
    last_candle = candles[0]    # –°–∞–º–∞—è –Ω–æ–≤–∞—è —Å–≤–µ—á–∞
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    price_change = last_candle['close'] - first_candle['open']
    price_change_pct = (price_change / first_candle['open']) * 100
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    highest_price = max([c['high'] for c in candles])
    lowest_price = min([c['low'] for c in candles])
    
    # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
    avg_price = sum([c['close'] for c in candles]) / len(candles)
    
    # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
    volatility = sum([abs(c['high'] - c['low']) for c in candles]) / len(candles)
    volatility_pct = (volatility / avg_price) * 100
    
    # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤
    total_volume = sum([c['quote_volume'] for c in candles])
    avg_volume = total_volume / len(candles)
    
    print(f"üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${first_candle['open']:.4f}")
    print(f"üí∞ –ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞: ${last_candle['close']:.4f}")
    
    change_emoji = "üü¢" if price_change >= 0 else "üî¥"
    print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_emoji} ${price_change:.4f} ({price_change_pct:+.2f}%)")
    
    print(f"üìà –ú–∞–∫—Å–∏–º—É–º: ${highest_price:.4f}")
    print(f"üìâ –ú–∏–Ω–∏–º—É–º: ${lowest_price:.4f}")
    print(f"‚öñÔ∏è –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${avg_price:.4f}")
    print(f"üåä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${volatility:.4f} ({volatility_pct:.2f}%)")
    print(f"üìä –û–±—â–∏–π –æ–±—ä–µ–º: ${total_volume:,.2f}")
    print(f"üìä –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: ${avg_volume:,.2f}")

def detect_patterns(candles):
    """–ü–æ–∏—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    if len(candles) < 3:
        return
    
    print(f"\nüîç –ü–û–ò–°–ö –ü–ê–¢–¢–ï–†–ù–û–í")
    print("=" * 30)
    
    patterns_found = []
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    recent_candles = candles[:3]
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω "–¢—Ä–∏ –±–µ–ª—ã—Ö —Å–æ–ª–¥–∞—Ç–∞" (—Ç—Ä–∏ —Ä–∞—Å—Ç—É—â–∏—Ö —Å–≤–µ—á–∏ –ø–æ–¥—Ä—è–¥)
    if all(c['close'] > c['open'] for c in recent_candles):
        patterns_found.append("üü¢ –¢—Ä–∏ –±–µ–ª—ã—Ö —Å–æ–ª–¥–∞—Ç–∞ (–±—ã—á–∏–π)")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω "–¢—Ä–∏ —á–µ—Ä–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∞" (—Ç—Ä–∏ –ø–∞–¥–∞—é—â–∏—Ö —Å–≤–µ—á–∏ –ø–æ–¥—Ä—è–¥)
    elif all(c['close'] < c['open'] for c in recent_candles):
        patterns_found.append("üî¥ –¢—Ä–∏ —á–µ—Ä–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∞ (–º–µ–¥–≤–µ–∂–∏–π)")
    
    # –î–æ–¥–∂–∏ (–æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç–∏—é)
    last_candle = recent_candles[0]
    body_size = abs(last_candle['close'] - last_candle['open'])
    candle_range = last_candle['high'] - last_candle['low']
    
    if candle_range > 0 and (body_size / candle_range) < 0.1:
        patterns_found.append("‚≠ê –î–æ–¥–∂–∏ (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å)")
    
    # –ú–æ–ª–æ—Ç –∏–ª–∏ –ø–æ–≤–µ—à–µ–Ω–Ω—ã–π
    if candle_range > 0:
        upper_shadow = last_candle['high'] - max(last_candle['open'], last_candle['close'])
        lower_shadow = min(last_candle['open'], last_candle['close']) - last_candle['low']
        
        if lower_shadow > 2 * body_size and upper_shadow < body_size:
            if last_candle['close'] > last_candle['open']:
                patterns_found.append("üî® –ú–æ–ª–æ—Ç (–±—ã—á–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç)")
            else:
                patterns_found.append("ü™ì –ü–æ–≤–µ—à–µ–Ω–Ω—ã–π (–º–µ–¥–≤–µ–∂–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç)")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
    if len(candles) >= 5:
        prices = [c['close'] for c in candles[:5]]
        if all(prices[i] > prices[i+1] for i in range(len(prices)-1)):
            patterns_found.append("üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        elif all(prices[i] < prices[i+1] for i in range(len(prices)-1)):
            patterns_found.append("üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        else:
            patterns_found.append("üìä –ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ")
    
    if patterns_found:
        for pattern in patterns_found:
            print(f"   {pattern}")
    else:
        print("   ‚ùì –Ø–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

def calculate_indicators(candles):
    """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    if len(candles) < 20:
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 20 —Å–≤–µ—á–µ–π)")
        return
    
    print(f"\nüßÆ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´")
    print("=" * 40)
    
    prices = [c['close'] for c in candles]
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è (SMA)
    sma_10 = sum(prices[:10]) / 10
    sma_20 = sum(prices[:20]) / 20
    
    current_price = prices[0]
    
    print(f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}")
    print(f"üìà SMA(10): ${sma_10:.4f}")
    print(f"üìà SMA(20): ${sma_20:.4f}")
    
    # –ü–æ–∑–∏—Ü–∏—è —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
    if current_price > sma_10 > sma_20:
        print("üü¢ –¶–µ–Ω–∞ –≤—ã—à–µ –æ–±–µ–∏—Ö SMA (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)")
    elif current_price < sma_10 < sma_20:
        print("üî¥ –¶–µ–Ω–∞ –Ω–∏–∂–µ –æ–±–µ–∏—Ö SMA (–º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)")
    else:
        print("üü° –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç SMA")
    
    # RSI —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if len(candles) >= 14:
        changes = []
        for i in range(13):
            change = candles[i]['close'] - candles[i+1]['close']
            changes.append(change)
        
        gains = [c for c in changes if c > 0]
        losses = [abs(c) for c in changes if c < 0]
        
        if gains and losses:
            avg_gain = sum(gains) / len(gains) if gains else 0
            avg_loss = sum(losses) / len(losses) if losses else 0.001
            
            rs = avg_gain / avg_loss
            rsi = 100 - (100 / (1 + rs))
            
            print(f"üìä RSI(14): {rsi:.1f}")
            if rsi > 70:
                print("üî¥ RSI —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
            elif rsi < 30:
                print("üü¢ RSI —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
            else:
                print("üü° RSI –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")

def display_candles(candles, limit_display=10):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    if not candles:
        print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    print(f"\nüïØÔ∏è –Ø–ü–û–ù–°–ö–ò–ï –°–í–ï–ß–ò")
    print("=" * 85)
    print(f"üî¢ –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π: {len(candles)}")
    print(f"üëÅÔ∏è –ü–æ–∫–∞–∑–∞–Ω–æ: {min(limit_display, len(candles))}")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    print(f"\n{'–í—Ä–µ–º—è':<17} {'–û—Ç–∫—Ä—ã—Ç–∏–µ':<10} {'–ú–∞–∫—Å–∏–º—É–º':<10} {'–ú–∏–Ω–∏–º—É–º':<10} {'–ó–∞–∫—Ä—ã—Ç–∏–µ':<10} {'–û–±—ä–µ–º':<12} {'–ò–∑–º.':<8}")
    print("-" * 85)
    
    display_candles = candles[:limit_display]
    
    for i, candle in enumerate(display_candles):
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        time_str = candle['datetime'].strftime('%d.%m.%Y %H:%M')
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–∏
        if candle['close'] > candle['open']:
            change_emoji = "üü¢"
            change_pct = ((candle['close'] - candle['open']) / candle['open']) * 100
        elif candle['close'] < candle['open']:
            change_emoji = "üî¥"
            change_pct = ((candle['close'] - candle['open']) / candle['open']) * 100
        else:
            change_emoji = "‚ö™"
            change_pct = 0
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–º–∞
        volume_str = f"{candle['quote_volume']:,.0f}"
        if len(volume_str) > 11:
            volume_str = f"{candle['quote_volume']/1000000:.1f}M"
        
        print(f"{time_str:<17} ${candle['open']:<9.4f} ${candle['high']:<9.4f} ${candle['low']:<9.4f} ${candle['close']:<9.4f} {volume_str:<12} {change_emoji}{change_pct:+5.2f}%")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üïØÔ∏è –Ø–ü–û–ù–°–ö–ò–ï –°–í–ï–ß–ò BITGET SPOT")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL
    if not config.get('baseURL'):
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç baseURL –≤ config.json")
        return
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:")
    
    # –í—ã–±–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
    if not symbol:
        print("‚ùå –°–∏–º–≤–æ–ª –ø–∞—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
        return
    
    # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    print("\nüìä –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:")
    intervals = {
        '1': '1m',   '2': '5m',   '3': '15m',  '4': '30m',
        '5': '1h',   '6': '4h',   '7': '6h',   '8': '12h',
        '9': '1day',  '10': '1week'
    }
    
    print("1. 1 –º–∏–Ω—É—Ç–∞    2. 5 –º–∏–Ω—É—Ç    3. 15 –º–∏–Ω—É—Ç   4. 30 –º–∏–Ω—É—Ç")
    print("5. 1 —á–∞—Å       6. 4 —á–∞—Å–∞     7. 6 —á–∞—Å–æ–≤    8. 12 —á–∞—Å–æ–≤")
    print("9. 1 –¥–µ–Ω—å      10. 1 –Ω–µ–¥–µ–ª—è")
    
    interval_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-10): ").strip()
    granularity = intervals.get(interval_choice, '1h')
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
    try:
        limit = int(input("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π (1-1000, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100): ") or "100")
        limit = max(1, min(limit, 1000))
    except ValueError:
        limit = 100
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    use_time_range = input("\nüìÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥? (y/n): ").strip().lower()
    
    start_time = None
    end_time = None
    
    if use_time_range == 'y':
        try:
            days_back = int(input("üìÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞: "))
            end_time = int(time.time() * 1000)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            start_time = int((time.time() - (days_back * 24 * 60 * 60)) * 1000)
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
    candles_raw = get_candlesticks(config, symbol, granularity, start_time, end_time, limit)
    
    if candles_raw is not None:
        # –í—ã–≤–æ–¥–∏–º —Å—ã—Ä–æ–π JSON –æ—Ç–≤–µ—Ç
        import json
        print("\nüìÑ RAW JSON RESPONSE:")
        print(json.dumps(candles_raw, indent=2, ensure_ascii=False))
        
        if candles_raw:
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
            candles = parse_candle_data(candles_raw)
            
            if candles:
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                display_candles(candles)
                analyze_price_movement(candles)
                detect_patterns(candles)
                calculate_indicators(candles)
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π")
        else:
            print("üì≠ –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print(f"üí± –ü–∞—Ä–∞: {symbol}")
            print(f"üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª: {granularity}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.json –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
