#!/usr/bin/env python3
"""
Bitget API - –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ (Spot)
–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
https://www.bitget.com/api-doc/spot/trade/Cancel-Batch-Orders

–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –î–∞
–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: 10 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É
"""

import requests
import json
import hmac
import hashlib
import base64
import time
from datetime import datetime

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.json —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏")
        return None
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ config.json!")
        return None

def create_signature(timestamp, method, request_path, query_string, body, secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        secret_key.encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')

def get_open_orders(config, symbol=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    params = {'limit': '100'}
    if symbol:
        params['symbol'] = symbol.upper()
    
    query_string = '&'.join([f"{k}={v}" for k, v in params.items()])
    timestamp = str(int(time.time() * 1000))
    method = 'GET'
    request_path = '/api/v2/spot/trade/orders-pending'
    body = ''
    
    signature = create_signature(timestamp, method, request_path, query_string, body, config['secretKey'])
    
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    url = f"{config['baseURL']}{request_path}?{query_string}"
    
    try:
        response = requests.get(url, headers=headers, timeout=config.get('timeout', 30))
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000':
                return data.get('data', [])
        return []
    except:
        return []

def cancel_batch_orders(config, symbol, order_ids):
    """
    –û—Ç–º–µ–Ω–∞ –ø–∞–∫–µ—Ç–∞ –æ—Ä–¥–µ—Ä–æ–≤
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    - order_ids: –°–ø–∏—Å–æ–∫ ID –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã (–º–∞–∫—Å–∏–º—É–º 10 –∑–∞ —Ä–∞–∑)
    """
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞ —Ä–∞–∑ (–ª–∏–º–∏—Ç API)
    order_ids_batch = order_ids[:10]
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
    request_data = {
        'symbol': symbol.upper(),
        'orderIds': order_ids_batch
    }
    
    body = json.dumps(request_data)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    timestamp = str(int(time.time() * 1000))
    method = 'POST'
    request_path = '/api/v2/spot/trade/cancel-batch-orders'
    query_string = ''
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
    signature = create_signature(timestamp, method, request_path, query_string, body, config['secretKey'])
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    # URL –∑–∞–ø—Ä–æ—Å–∞
    url = f"{config['baseURL']}{request_path}"
    
    try:
        print(f"üîÑ –û—Ç–º–µ–Ω–∞ –ø–∞–∫–µ—Ç–∞ –∏–∑ {len(order_ids_batch)} –æ—Ä–¥–µ—Ä–æ–≤...")
        
        response = requests.post(url, headers=headers, data=body, timeout=config.get('timeout', 30))
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('code') == '00000':
                return data.get('data', {})
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg')}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def cancel_single_order(config, symbol, order_id):
    """–û—Ç–º–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ (fallback)"""
    request_data = {
        'symbol': symbol.upper(),
        'orderId': str(order_id)
    }
    
    body = json.dumps(request_data)
    timestamp = str(int(time.time() * 1000))
    method = 'POST'
    request_path = '/api/v2/spot/trade/cancel-order'
    query_string = ''
    
    signature = create_signature(timestamp, method, request_path, query_string, body, config['secretKey'])
    
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    url = f"{config['baseURL']}{request_path}"
    
    try:
        response = requests.post(url, headers=headers, data=body, timeout=config.get('timeout', 30))
        
        if response.status_code == 200:
            data = response.json()
            return data.get('code') == '00000'
        return False
    except:
        return False

def format_side(side):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ä–¥–µ—Ä–∞"""
    if side.lower() == 'buy':
        return 'üü¢'
    elif side.lower() == 'sell':
        return 'üî¥'
    else:
        return '‚ùì'

def analyze_orders_for_cancellation(orders):
    """–ê–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π"""
    if not orders:
        return
    
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –û–†–î–ï–†–û–í –î–õ–Ø –û–¢–ú–ï–ù–´")
    print("=" * 50)
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–∞—Ä–∞–º
    symbols_orders = {}
    total_value = 0
    partially_filled_count = 0
    
    for order in orders:
        symbol = order.get('symbol', 'UNKNOWN')
        if symbol not in symbols_orders:
            symbols_orders[symbol] = {'orders': [], 'total_value': 0}
        
        symbols_orders[symbol]['orders'].append(order)
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        price = float(order.get('price', 0))
        size = float(order.get('size', 0))
        order_value = price * size if price > 0 and size > 0 else 0
        symbols_orders[symbol]['total_value'] += order_value
        total_value += order_value
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
        filled_size = float(order.get('baseVolume', 0))
        if filled_size > 0:
            partially_filled_count += 1
    
    print(f"üìà –í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤ –∫ –æ—Ç–º–µ–Ω–µ: {len(orders)}")
    print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_value:,.2f}")
    print(f"üí± –¢–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(symbols_orders)}")
    
    if partially_filled_count > 0:
        print(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {partially_filled_count}")
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ –ø–∞—Ä–∞–º
    print(f"\nüíé –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–∞—Ä–∞–º:")
    for symbol, data in symbols_orders.items():
        orders_count = len(data['orders'])
        total_val = data['total_value']
        print(f"   {symbol}: {orders_count} –æ—Ä–¥–µ—Ä–æ–≤ (${total_val:,.2f})")

def display_orders_summary(orders):
    """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
    if not orders:
        print("üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return False
    
    print(f"\nüìã –û–†–î–ï–†–ê –ö –û–¢–ú–ï–ù–ï")
    print("=" * 70)
    print(f"üî¢ –ù–∞–π–¥–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(orders)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—Ä–¥–µ—Ä–æ–≤
    display_orders = orders[:10]
    
    print(f"\n{'‚Ññ':<3} {'–ü–∞—Ä–∞':<10} {'üéØ':<2} {'–¶–µ–Ω–∞':<12} {'–†–∞–∑–º–µ—Ä':<15} {'–°—Ç–æ–∏–º–æ—Å—Ç—å':<12}")
    print("-" * 70)
    
    for i, order in enumerate(display_orders, 1):
        symbol = order.get('symbol', 'N/A')[:9]
        side = format_side(order.get('side', ''))
        
        price = float(order.get('price', 0))
        size = float(order.get('size', 0))
        order_value = price * size if price > 0 and size > 0 else 0
        
        price_str = f"${price:.4f}" if price > 0 else "Market"
        size_str = f"{size:.6f}".rstrip('0').rstrip('.')
        value_str = f"${order_value:.2f}" if order_value > 0 else "N/A"
        
        print(f"{i:<3} {symbol:<10} {side:<2} {price_str:<12} {size_str:<15} {value_str:<12}")
    
    if len(orders) > 10:
        print(f"... –∏ –µ—â–µ {len(orders) - 10} –æ—Ä–¥–µ—Ä–æ–≤")
    
    return True

def cancel_all_orders_by_symbol(config, symbol, orders):
    """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
    order_ids = [order.get('orderId') for order in orders if order.get('orderId')]
    
    if not order_ids:
        print(f"‚ùå –ù–µ—Ç ID –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
        return 0, 0
    
    cancelled_count = 0
    failed_count = 0
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 10 –æ—Ä–¥–µ—Ä–æ–≤
    for i in range(0, len(order_ids), 10):
        batch = order_ids[i:i+10]
        
        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ {i//10 + 1} –¥–ª—è {symbol} ({len(batch)} –æ—Ä–¥–µ—Ä–æ–≤)...")
        
        result = cancel_batch_orders(config, symbol, batch)
        
        if result is not None:
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–º–µ–Ω—ã
            success_orders = result.get('successList', [])
            failed_orders = result.get('failureList', [])
            
            cancelled_count += len(success_orders)
            failed_count += len(failed_orders)
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ: {len(success_orders)}")
            if failed_orders:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å: {len(failed_orders)}")
        else:
            # Fallback - –æ—Ç–º–µ–Ω–∞ –ø–æ –æ–¥–Ω–æ–º—É
            print(f"üîÑ –ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –ø–æ –æ–¥–Ω–æ–º—É...")
            
            for order_id in batch:
                if cancel_single_order(config, symbol, order_id):
                    cancelled_count += 1
                    print(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω –æ—Ä–¥–µ—Ä: {order_id}")
                else:
                    failed_count += 1
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å: {order_id}")
                
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    return cancelled_count, failed_count

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üóëÔ∏è –û–¢–ú–ï–ù–ê –í–°–ï–• –û–†–î–ï–†–û–í BITGET SPOT")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase', 'baseURL']
    for key in required_keys:
        if not config.get(key):
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}' –≤ config.json")
            return
    
    print("\nüîß –°–ø–æ—Å–æ–±—ã –æ—Ç–º–µ–Ω—ã:")
    print("1. –û—Ç–º–µ–Ω–∏—Ç—å –í–°–ï –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞")
    print("2. –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã")
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
    
    symbol_filter = None
    if choice == "2":
        symbol_filter = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
        if not symbol_filter:
            print("‚ùå –°–∏–º–≤–æ–ª –ø–∞—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
            return
    elif choice != "1":
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    print(f"\nüîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤...")
    orders = get_open_orders(config, symbol_filter)
    
    if not display_orders_summary(orders):
        return
    
    analyze_orders_for_cancellation(orders)
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    print(f"\n‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø!")
    print("=" * 40)
    print("üö® –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!")
    print("üìä –í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã")
    print("üí∞ –ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ —Ç–æ–∂–µ –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã")
    print("‚è∞ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å –≤—ã–≥–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
    partially_filled = [o for o in orders if float(o.get('baseVolume', 0)) > 0]
    if partially_filled:
        print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ß–ê–°–¢–ò–ß–ù–û –ò–°–ü–û–õ–ù–ï–ù–ù–´–ï –û–†–î–ï–†–ê!")
        print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(partially_filled)}")
        print(f"üí° –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—É—é —á–∞—Å—Ç—å")
    
    # –ü–µ—Ä–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n‚ùì –ü–ï–†–í–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï")
    if symbol_filter:
        confirm1 = input(f"–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol_filter}? (y/N): ").strip().lower()
    else:
        confirm1 = input(f"–û—Ç–º–µ–Ω–∏—Ç—å –í–°–ï {len(orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤? (y/N): ").strip().lower()
    
    if confirm1 != 'y':
        print("‚ùå –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    # –í—Ç–æ—Ä–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    print(f"\n‚ùì –§–ò–ù–ê–õ–¨–ù–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï")
    confirm2 = input("‚ö†Ô∏è –í—ã –£–í–ï–†–ï–ù–´? –ù–∞–ø–∏—à–∏—Ç–µ '–û–¢–ú–ï–ù–ò–¢–¨ –í–°–ï' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()
    
    if confirm2 != '–û–¢–ú–ï–ù–ò–¢–¨ –í–°–ï':
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–º–µ–Ω—ã
    print(f"\nüîÑ –ù–ê–ß–ò–ù–ê–ï–ú –ú–ê–°–°–û–í–£–Æ –û–¢–ú–ï–ù–£ –û–†–î–ï–†–û–í...")
    print("=" * 50)
    
    start_time = time.time()
    total_cancelled = 0
    total_failed = 0
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º –ø–∞—Ä–∞–º
    orders_by_symbol = {}
    for order in orders:
        symbol = order.get('symbol', 'UNKNOWN')
        if symbol not in orders_by_symbol:
            orders_by_symbol[symbol] = []
        orders_by_symbol[symbol].append(order)
    
    # –û—Ç–º–µ–Ω–∞ –ø–æ –ø–∞—Ä–∞–º
    for symbol, symbol_orders in orders_by_symbol.items():
        print(f"\nüí± –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—ã: {symbol} ({len(symbol_orders)} –æ—Ä–¥–µ—Ä–æ–≤)")
        
        cancelled, failed = cancel_all_orders_by_symbol(config, symbol, symbol_orders)
        
        total_cancelled += cancelled
        total_failed += failed
        
        print(f"   ‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled}")
        if failed > 0:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 40)
    print(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ: {total_cancelled} –æ—Ä–¥–µ—Ä–æ–≤")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å: {total_failed} –æ—Ä–¥–µ—Ä–æ–≤")
    print(f"üìä –û–±—â–∏–π —É—Å–ø–µ—Ö: {(total_cancelled/(total_cancelled+total_failed)*100):.1f}%" if (total_cancelled+total_failed) > 0 else "N/A")
    
    if total_cancelled > 0:
        print(f"\nüéâ –ú–ê–°–°–û–í–ê–Ø –û–¢–ú–ï–ù–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"   üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å: python get_account_balance.py")
        print(f"   üìã –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –æ—Ç–º–µ–Ω–µ–Ω–æ: python get_open_orders.py")
    
    if total_failed > 0:
        print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –û–†–î–ï–†–ê –ù–ï –û–¢–ú–ï–ù–ï–ù–´")
        print(f"üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print(f"   ‚Ä¢ –û—Ä–¥–µ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏–ª–∏—Å—å –≤–æ –≤—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã")
        print(f"   ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API")
        print(f"   ‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω rate limit")
        print(f"\nüõ†Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print(f"   üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ä–¥–µ—Ä–∞: python get_open_orders.py")
        print(f"   üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–º–µ–Ω—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Ä–¥–µ—Ä–∞ –º–æ–≥–ª–∏ –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω—ã!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: python get_open_orders.py")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.json –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
