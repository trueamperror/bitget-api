# -*- coding: utf-8 -*-
"""
Bitget Spot REST API - Get Tickers
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ä–∞—Ö (24h —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/spot/market/Get-All-Tickers

–û–ø–∏—Å–∞–Ω–∏–µ:
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–∞—Ö –Ω–∞ —Å–ø–æ—Ç —Ä—ã–Ω–∫–µ Bitget –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.
–í–∫–ª—é—á–∞–µ—Ç —Ü–µ–Ω—ã, –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –¥—Ä—É–≥—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Ç–æ—Ä–≥–æ–≤—ã–º –ø–∞—Ä–∞–º.

–í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:
- symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
- high24h: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ 24—á
- low24h: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ 24—á
- close: –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (–ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞)
- quoteVol: –û–±—ä–µ–º –≤ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç–µ –∑–∞ 24—á
- baseVol: –û–±—ä–µ–º –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ –∑–∞ 24—á
- usdtVol: –û–±—ä–µ–º –≤ USDT –∑–∞ 24—á
- ts: –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- buyOne: –õ—É—á—à–∏–π –±–∏–¥
- sellOne: –õ—É—á—à–∏–π –∞—Å–∫
- change24h: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 24—á (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
- openUtc0: –¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è UTC 0:00
- changeUtc: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å UTC 0:00
"""

import requests
import json
import os
from datetime import datetime

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config_path = os.path.join(os.path.dirname(__file__), '../../config.json')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    with open(config_path, 'r') as config_file:
        config = json.load(config_file)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
BASE_URL = config.get('baseURL', 'https://api.bitget.com')

def get_tickers():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    endpoint = f"{BASE_URL}/api/v2/spot/market/tickers"
    
    try:
        print(f"üìä –ó–∞–ø—Ä–æ—Å —Ç–∏–∫–µ—Ä–æ–≤...")
        print(f"üåê –≠–Ω–¥–ø–æ–∏–Ω—Ç: {endpoint}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å (–ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        response = requests.get(endpoint, timeout=10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code == 200:
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ Bitget
            if data.get('code') == '00000':
                tickers_data = data.get('data', [])
                if tickers_data:
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tickers_data)} —Ç–∏–∫–µ—Ä–æ–≤")
                    return tickers_data
                else:
                    print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return []
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API Bitget: {data.get('msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def format_tickers_response(tickers_data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —Ç–∏–∫–µ—Ä–∞–º–∏
    
    Args:
        tickers_data (list): –î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤
    """
    
    if not tickers_data:
        print("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    print(f"\\nüìä –¢–ò–ö–ï–†–´ BITGET SPOT")
    print("=" * 120)
    print(f"üî¢ –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers_data)}")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    print(f"\\n{'–°–∏–º–≤–æ–ª':^15} {'–¶–µ–Ω–∞':>12} {'–ò–∑–º.24—á':>10} {'–ú–∞–∫—Å.24—á':>12} {'–ú–∏–Ω.24—á':>12} {'–û–±—ä–µ–º(USDT)':>15} {'–ë–∏–¥':>12} {'–ê—Å–∫':>12}")
    print("-" * 120)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
    valid_tickers = []
    total_volume_usdt = 0
    
    for ticker in tickers_data:
        try:
            symbol = ticker.get('symbol', 'N/A')
            close = float(ticker.get('close', 0))
            high24h = float(ticker.get('high24h', 0))
            low24h = float(ticker.get('low24h', 0))
            usdtVol = float(ticker.get('usdtVol', 0))
            change24h = ticker.get('change24h', '0')
            buyOne = float(ticker.get('buyOne', 0))
            sellOne = float(ticker.get('sellOne', 0))
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ
            try:
                change_percent = float(change24h)
            except (ValueError, TypeError):
                change_percent = 0
            
            total_volume_usdt += usdtVol
            
            valid_tickers.append({
                'symbol': symbol,
                'close': close,
                'high24h': high24h,
                'low24h': low24h,
                'usdtVol': usdtVol,
                'change24h': change_percent,
                'buyOne': buyOne,
                'sellOne': sellOne
            })
            
        except (ValueError, KeyError) as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–∞: {e}")
            continue
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É (—Ç–æ–ø 20)
    sorted_tickers = sorted(valid_tickers, key=lambda x: x['usdtVol'], reverse=True)[:20]
    
    for ticker in sorted_tickers:
        symbol = ticker['symbol']
        close = ticker['close']
        change24h = ticker['change24h']
        high24h = ticker['high24h']
        low24h = ticker['low24h']
        usdtVol = ticker['usdtVol']
        buyOne = ticker['buyOne']
        sellOne = ticker['sellOne']
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        change_emoji = "üü¢" if change24h >= 0 else "üî¥"
        change_display = f"{change_emoji}{change24h:+.2f}%"
        
        print(f"{symbol:^15} {close:>12.6f} {change_display:^12} {high24h:>12.6f} {low24h:>12.6f} {usdtVol:>15,.0f} {buyOne:>12.6f} {sellOne:>12.6f}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("-" * 50)
    print(f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á): ${total_volume_usdt:,.0f} USDT")
    
    # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    positive_changes = [t for t in valid_tickers if t['change24h'] > 0]
    negative_changes = [t for t in valid_tickers if t['change24h'] < 0]
    neutral_changes = [t for t in valid_tickers if t['change24h'] == 0]
    
    print(f"üü¢ –†–∞—Å—Ç—É—â–∏–µ –ø–∞—Ä—ã: {len(positive_changes)} ({len(positive_changes)/len(valid_tickers)*100:.1f}%)")
    print(f"üî¥ –ü–∞–¥–∞—é—â–∏–µ –ø–∞—Ä—ã: {len(negative_changes)} ({len(negative_changes)/len(valid_tickers)*100:.1f}%)")
    print(f"‚ö™ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(neutral_changes)} ({len(neutral_changes)/len(valid_tickers)*100:.1f}%)")
    
    # –¢–æ–ø —Ä–∞—Å—Ç—É—â–∏–µ
    if positive_changes:
        top_gainers = sorted(positive_changes, key=lambda x: x['change24h'], reverse=True)[:5]
        print(f"\\nüìà –¢–û–ü –†–ê–°–¢–£–©–ò–ï (24—á):")
        print("-" * 40)
        for i, ticker in enumerate(top_gainers, 1):
            print(f"{i}. {ticker['symbol']}: +{ticker['change24h']:.2f}% (${ticker['close']:.6f})")
    
    # –¢–æ–ø –ø–∞–¥–∞—é—â–∏–µ
    if negative_changes:
        top_losers = sorted(negative_changes, key=lambda x: x['change24h'])[:5]
        print(f"\\nüìâ –¢–û–ü –ü–ê–î–ê–Æ–©–ò–ï (24—á):")
        print("-" * 40)
        for i, ticker in enumerate(top_losers, 1):
            print(f"{i}. {ticker['symbol']}: {ticker['change24h']:.2f}% (${ticker['close']:.6f})")
    
    # –¢–æ–ø –ø–æ –æ–±—ä–µ–º—É
    top_volume = sorted(valid_tickers, key=lambda x: x['usdtVol'], reverse=True)[:5]
    print(f"\\nüí∞ –¢–û–ü –ü–û –û–ë–™–ï–ú–£ (24—á):")
    print("-" * 50)
    for i, ticker in enumerate(top_volume, 1):
        print(f"{i}. {ticker['symbol']}: ${ticker['usdtVol']:,.0f} USDT")
    
    # –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–µ–¥–æ–≤
    spreads = []
    for ticker in valid_tickers:
        if ticker['buyOne'] > 0 and ticker['sellOne'] > 0:
            spread = (ticker['sellOne'] - ticker['buyOne']) / ticker['buyOne'] * 100
            spreads.append(spread)
    
    if spreads:
        avg_spread = sum(spreads) / len(spreads)
        min_spread = min(spreads)
        max_spread = max(spreads)
        
        print(f"\\nüìä –ê–ù–ê–õ–ò–ó –°–ü–†–ï–î–û–í:")
        print("-" * 30)
        print(f"üìä –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥: {avg_spread:.4f}%")
        print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {min_spread:.4f}%")
        print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {max_spread:.4f}%")

def get_specific_ticker(symbol):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
    
    Args:
        symbol (str): –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
    
    Returns:
        dict: –î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    
    endpoint = f"{BASE_URL}/api/v2/spot/market/ticker"
    params = {'symbol': symbol}
    
    try:
        response = requests.get(endpoint, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000':
                return data.get('data')
        
        return None
        
    except Exception:
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìä Bitget Spot REST API - Get Tickers")
    print("=" * 55)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ä—ã
    tickers = get_tickers()
    
    if tickers is not None:
        import json
        print("\nüìÑ RAW JSON RESPONSE (first 3 tickers):")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ç–∏–∫–µ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π
        print(json.dumps(tickers[:3], indent=2, ensure_ascii=False))
        
        print(f"\nÔøΩ –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers)}")
        print("ÔøΩ –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 3 –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤")
        
        # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∂–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É  
        format_tickers_response(tickers)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä—ã")
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä—ã")

if __name__ == "__main__":
    main()
