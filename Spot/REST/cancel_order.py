#!/usr/bin/env python3
"""
Bitget API - –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ (Spot)
–û—Ç–º–µ–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –ø–æ ID

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
https://www.bitget.com/api-doc/spot/trade/Cancel-Order

–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –î–∞
–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: 10 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É
"""

import requests
import json
import hmac
import hashlib
import base64
import time
from datetime import datetime

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('../../config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.json —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏")
        return None
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ config.json!")
        return None

def create_signature(timestamp, method, request_path, query_string, body, secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        secret_key.encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')

def get_open_orders_for_selection(config, symbol=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    params = {'limit': '50'}
    if symbol:
        params['symbol'] = symbol.upper()
    
    query_string = '&'.join([f"{k}={v}" for k, v in params.items()])
    timestamp = str(int(time.time() * 1000))
    method = 'GET'
    request_path = '/api/v2/spot/trade/orders-pending'
    body = ''
    
    signature = create_signature(timestamp, method, request_path, query_string, body, config['secretKey'])
    
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    url = f"{config['baseURL']}{request_path}?{query_string}"
    
    try:
        response = requests.get(url, headers=headers, timeout=config.get('timeout', 30))
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000':
                return data.get('data', [])
        return []
    except:
        return []

def cancel_order(config, symbol, order_id):
    """
    –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    - order_id: ID –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
    request_data = {
        'symbol': symbol.upper(),
        'orderId': str(order_id)
    }
    
    body = json.dumps(request_data)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    timestamp = str(int(time.time() * 1000))
    method = 'POST'
    request_path = '/api/v2/spot/trade/cancel-order'
    query_string = ''
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
    signature = create_signature(timestamp, method, request_path, query_string, body, config['secretKey'])
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    # URL –∑–∞–ø—Ä–æ—Å–∞
    url = f"{config['baseURL']}{request_path}"
    
    try:
        print(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –æ—Ä–¥–µ—Ä–∞...")
        print(f"üí± –ü–∞—Ä–∞: {symbol}")
        print(f"üÜî ID –æ—Ä–¥–µ—Ä–∞: {order_id}")
        
        response = requests.post(url, headers=headers, data=body, timeout=config.get('timeout', 30))
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('code') == '00000':
                return data.get('data', {})
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg')}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def format_side(side):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ä–¥–µ—Ä–∞"""
    if side.lower() == 'buy':
        return 'üü¢ –ü–æ–∫—É–ø–∫–∞'
    elif side.lower() == 'sell':
        return 'üî¥ –ü—Ä–æ–¥–∞–∂–∞'
    else:
        return f"‚ùì {side}"

def format_order_type(order_type):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞"""
    type_map = {
        'limit': 'üìä –õ–∏–º–∏—Ç–Ω—ã–π',
        'market': '‚ö° –†—ã–Ω–æ—á–Ω—ã–π',
        'post_only': 'üìå Post Only',
        'fok': 'üéØ FOK',
        'ioc': '‚è±Ô∏è IOC'
    }
    return type_map.get(order_type, f"‚ùì {order_type}")

def display_orders_for_selection(orders):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–º–µ–Ω—ã"""
    if not orders:
        print("üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return False
    
    print(f"\nüìã –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê –î–õ–Ø –û–¢–ú–ï–ù–´")
    print("=" * 80)
    print(f"üî¢ –ù–∞–π–¥–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(orders)}")
    
    print(f"\n{'‚Ññ':<3} {'ID –æ—Ä–¥–µ—Ä–∞':<15} {'–ü–∞—Ä–∞':<10} {'–°—Ç–æ—Ä–æ–Ω–∞':<10} {'–¶–µ–Ω–∞':<12} {'–†–∞–∑–º–µ—Ä':<15} {'–°—Ç–æ–∏–º–æ—Å—Ç—å':<12}")
    print("-" * 80)
    
    for i, order in enumerate(orders, 1):
        order_id = order.get('orderId', 'N/A')[:14]
        symbol = order.get('symbol', 'N/A')[:9]
        side = 'üü¢ BUY' if order.get('side', '').lower() == 'buy' else 'üî¥ SELL'
        
        price = float(order.get('price', 0))
        size = float(order.get('size', 0))
        order_value = price * size if price > 0 and size > 0 else 0
        
        price_str = f"${price:.4f}" if price > 0 else "Market"
        size_str = f"{size:.6f}".rstrip('0').rstrip('.')
        value_str = f"${order_value:.2f}" if order_value > 0 else "N/A"
        
        print(f"{i:<3} {order_id:<15} {symbol:<10} {side:<10} {price_str:<12} {size_str:<15} {value_str:<12}")
    
    return True

def display_order_details(order):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π"""
    print(f"\nüìã –î–ï–¢–ê–õ–ò –û–†–î–ï–†–ê")
    print("=" * 40)
    
    # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    create_time = int(order.get('cTime', 0))
    if create_time:
        dt = datetime.fromtimestamp(create_time / 1000)
        time_str = dt.strftime('%d.%m.%Y %H:%M:%S')
    else:
        time_str = "N/A"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    order_id = order.get('orderId', 'N/A')
    symbol = order.get('symbol', 'N/A')
    side = format_side(order.get('side', ''))
    order_type = format_order_type(order.get('orderType', ''))
    
    price = float(order.get('price', 0))
    size = float(order.get('size', 0))
    filled_size = float(order.get('baseVolume', 0))
    order_value = price * size if price > 0 and size > 0 else 0
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    fill_percentage = (filled_size / size * 100) if size > 0 else 0
    
    print(f"üÜî ID –æ—Ä–¥–µ—Ä–∞: {order_id}")
    print(f"‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {time_str}")
    print(f"üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {symbol}")
    print(f"üìä –¢–∏–ø: {order_type}")
    print(f"üéØ –°—Ç–æ—Ä–æ–Ω–∞: {side}")
    print(f"üí∞ –¶–µ–Ω–∞: ${price:.4f}" if price > 0 else "üí∞ –¶–µ–Ω–∞: –†—ã–Ω–æ—á–Ω–∞—è")
    print(f"üìè –†–∞–∑–º–µ—Ä: {size:.6f}")
    print(f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${order_value:.2f}" if order_value > 0 else "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: N/A")
    print(f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {filled_size:.6f} ({fill_percentage:.1f}%)")

def calculate_potential_loss(order):
    """–†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ—Ç–µ—Ä–∏ –æ—Ç –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞"""
    filled_size = float(order.get('baseVolume', 0))
    
    if filled_size > 0:
        print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!")
        print("=" * 30)
        print(f"üîÑ –û—Ä–¥–µ—Ä —á–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω: {filled_size:.6f}")
        print(f"‚ùó –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—É—é —á–∞—Å—Ç—å")
        print(f"üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º")
        return True
    
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üóëÔ∏è –û–¢–ú–ï–ù–ê –û–†–î–ï–†–ê BITGET SPOT")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase', 'baseURL']
    for key in required_keys:
        if not config.get(key):
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}' –≤ config.json")
            return
    
    print("\nüîß –°–ø–æ—Å–æ–±—ã –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞:")
    print("1. –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
    print("2. –í–≤–µ—Å—Ç–∏ ID –æ—Ä–¥–µ—Ä–∞ –∏ —Å–∏–º–≤–æ–ª –≤—Ä—É—á–Ω—É—é")
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
    
    if choice == "1":
        # –í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        print("\nüîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤...")
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–∞—Ä–µ
        symbol_filter = input("üí± –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ä–µ (Enter –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä): ").strip().upper()
        if not symbol_filter:
            symbol_filter = None
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        orders = get_open_orders_for_selection(config, symbol_filter)
        
        if not display_orders_for_selection(orders):
            return
        
        # –í—ã–±–æ—Ä –æ—Ä–¥–µ—Ä–∞
        try:
            order_index = int(input(f"\nüî¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ (1-{len(orders)}): ")) - 1
            if 0 <= order_index < len(orders):
                selected_order = orders[order_index]
                symbol = selected_order.get('symbol')
                order_id = selected_order.get('orderId')
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞")
                return
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞")
            return
    
    elif choice == "2":
        # –†—É—á–Ω–æ–π –≤–≤–æ–¥
        symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
        if not symbol:
            print("‚ùå –°–∏–º–≤–æ–ª –ø–∞—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
            return
        
        order_id = input("üÜî –í–≤–µ–¥–∏—Ç–µ ID –æ—Ä–¥–µ—Ä–∞: ").strip()
        if not order_id:
            print("‚ùå ID –æ—Ä–¥–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
            return
        
        selected_order = None  # –î–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    if selected_order:
        display_order_details(selected_order)
        has_partial_fill = calculate_potential_loss(selected_order)
    else:
        print(f"\nüéØ –û–¢–ú–ï–ù–ê –û–†–î–ï–†–ê")
        print("=" * 30)
        print(f"üí± –ü–∞—Ä–∞: {symbol}")
        print(f"üÜî ID: {order_id}")
        has_partial_fill = False
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
    print(f"\n‚ùì –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–¢–ú–ï–ù–´")
    if has_partial_fill:
        confirm = input("‚ö†Ô∏è –û—Ä–¥–µ—Ä —á–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω! –í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å? (y/N): ").strip().lower()
    else:
        confirm = input("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–º–µ–Ω—É –æ—Ä–¥–µ—Ä–∞ (y/N): ").strip().lower()
    
    if confirm != 'y':
        print("‚ùå –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
    print(f"\nüîÑ –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞...")
    result = cancel_order(config, symbol, order_id)
    
    if result is not None:
        print(f"\n‚úÖ –û–†–î–ï–† –£–°–ü–ï–®–ù–û –û–¢–ú–ï–ù–ï–ù!")
        print("=" * 40)
        print(f"üÜî ID –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {order_id}")
        print(f"üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {symbol}")
        print(f"‚è∞ –í—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'orderId' in result:
            print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –±–∏—Ä–∂–∏: {result['orderId']}")
        
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"   üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å: python get_account_balance.py")
        print(f"   üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞: python get_open_orders.py")
        
    else:
        print(f"\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –û–¢–ú–ï–ù–ò–¢–¨ –û–†–î–ï–†")
        print("=" * 40)
        print(f"üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print(f"   ‚Ä¢ –û—Ä–¥–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª–Ω–µ–Ω")
        print(f"   ‚Ä¢ –û—Ä–¥–µ—Ä —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω")
        print(f"   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ä–¥–µ—Ä–∞")
        print(f"   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª –ø–∞—Ä—ã")
        print(f"   ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API")
        
        print(f"\nüõ†Ô∏è –ß—Ç–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:")
        print(f"   üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: python get_open_orders.py")
        print(f"   üìö –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤: python get_orders.py")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.json –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
