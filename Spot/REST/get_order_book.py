# -*- coding: utf-8 -*-
"""
Bitget Spot REST API - Get Order Book
–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤ (—Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫)

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/spot/market/Get-Orderbook

–û–ø–∏—Å–∞–Ω–∏–µ:
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–ª—É—á–∞–µ—Ç –∫–Ω–∏–≥—É –æ—Ä–¥–µ—Ä–æ–≤ (—Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
–Ω–∞ —Å–ø–æ—Ç —Ä—ã–Ω–∫–µ Bitget. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏.

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä BTCUSDT)
- type: —Ç–∏–ø —Å—Ç–∞–∫–∞–Ω–∞ (step0, step1, step2, step3, step4, step5)
- limit: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100, –º–∞–∫—Å–∏–º—É–º 500)

–¢–∏–ø—ã —Å—Ç–∞–∫–∞–Ω–∞:
- step0: –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
- step1-step5: —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ü–µ–Ω

–í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:
- asks: –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É [[—Ü–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ], ...]
- bids: –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É [[—Ü–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ], ...]
- ts: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
"""

import requests
import json
import os
from datetime import datetime

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config_path = os.path.join(os.path.dirname(__file__), '../../config.json')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    with open(config_path, 'r') as config_file:
        config = json.load(config_file)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
BASE_URL = config.get('baseURL', 'https://api.bitget.com')

def get_order_book(symbol, type_step="step0", limit=100):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤
    
    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
        type_step (str): –¢–∏–ø –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (step0-step5)
        limit (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π (–º–∞–∫—Å–∏–º—É–º 500)
    
    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    endpoint = f"{BASE_URL}/api/v2/spot/market/orderbook"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        'symbol': symbol,
        'type': type_step,
        'limit': str(limit)
    }
    
    try:
        print(f"üìö –ó–∞–ø—Ä–æ—Å –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤...")
        print(f"üí± –ü–∞—Ä–∞: {symbol}")
        print(f"üìä –¢–∏–ø: {type_step}, –õ–∏–º–∏—Ç: {limit}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å (–ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        response = requests.get(endpoint, params=params, timeout=10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code == 200:
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ Bitget
            if data.get('code') == '00000':
                order_book_data = data.get('data')
                if order_book_data:
                    print(f"‚úÖ –ö–Ω–∏–≥–∞ –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞")
                    return order_book_data
                else:
                    print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API Bitget: {data.get('msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def format_order_book_response(order_book_data, symbol):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∫–Ω–∏–≥–æ–π –æ—Ä–¥–µ—Ä–æ–≤
    
    Args:
        order_book_data (dict): –î–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤
        symbol (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
    """
    
    if not order_book_data:
        print("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    asks = order_book_data.get('asks', [])
    bids = order_book_data.get('bids', [])
    timestamp = order_book_data.get('ts', 0)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    if timestamp:
        time_str = datetime.fromtimestamp(int(timestamp) / 1000).strftime('%Y-%m-%d %H:%M:%S')
    else:
        time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    print(f"\\nüìö –ö–ù–ò–ì–ê –û–†–î–ï–†–û–í - {symbol}")
    print("=" * 80)
    print(f"‚è∞ –í—Ä–µ–º—è: {time_str}")
    print(f"üìä –ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {len(asks)}")
    print(f"üìä –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {len(bids)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø —É—Ä–æ–≤–Ω–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    max_levels = 10
    
    print(f"\\nüìä –¢–û–ü {max_levels} –£–†–û–í–ù–ï–ô –ö–ù–ò–ì–ò –û–†–î–ï–†–û–í")
    print("=" * 80)
    print(f"{'ASKS (–ü—Ä–æ–¥–∞–∂–∞)':^35} | {'BIDS (–ü–æ–∫—É–ø–∫–∞)':^35}")
    print(f"{'–¶–µ–Ω–∞':>15} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':>15} | {'–¶–µ–Ω–∞':>15} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':>15}")
    print("-" * 80)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–∞ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º asks (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã)
        asks_processed = []
        for ask in asks[:max_levels]:
            if len(ask) >= 2:
                price = float(ask[0])
                quantity = float(ask[1])
                asks_processed.append((price, quantity))
        
        asks_processed.sort(key=lambda x: x[0])
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º bids (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã)
        bids_processed = []
        for bid in bids[:max_levels]:
            if len(bid) >= 2:
                price = float(bid[0])
                quantity = float(bid[1])
                bids_processed.append((price, quantity))
        
        bids_processed.sort(key=lambda x: x[0], reverse=True)
        
        # –í—ã–≤–æ–¥–∏–º —É—Ä–æ–≤–Ω–∏
        max_rows = max(len(asks_processed), len(bids_processed))
        
        for i in range(max_rows):
            ask_price = f"{asks_processed[i][0]:,.8f}" if i < len(asks_processed) else ""
            ask_qty = f"{asks_processed[i][1]:,.6f}" if i < len(asks_processed) else ""
            bid_price = f"{bids_processed[i][0]:,.8f}" if i < len(bids_processed) else ""
            bid_qty = f"{bids_processed[i][1]:,.6f}" if i < len(bids_processed) else ""
            
            print(f"{ask_price:>15} {ask_qty:>15} | {bid_price:>15} {bid_qty:>15}")
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if asks_processed and bids_processed:
            best_ask = asks_processed[0][0]  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
            best_bid = bids_processed[0][0]  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
            
            spread = best_ask - best_bid
            spread_percent = (spread / best_ask) * 100
            mid_price = (best_ask + best_bid) / 2
            
            print(f"\\nüí∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ü–†–ï–î–ê:")
            print("-" * 40)
            print(f"üü¢ –õ—É—á—à–∏–π –±–∏–¥ (–ø–æ–∫—É–ø–∫–∞): {best_bid:,.8f}")
            print(f"üî¥ –õ—É—á—à–∏–π –∞—Å–∫ (–ø—Ä–æ–¥–∞–∂–∞): {best_ask:,.8f}")
            print(f"üìä –°–ø—Ä–µ–¥: {spread:,.8f} ({spread_percent:.4f}%)")
            print(f"üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {mid_price:,.8f}")
        
        # –ê–Ω–∞–ª–∏–∑ –≥–ª—É–±–∏–Ω—ã
        if asks_processed and bids_processed:
            # –û–±—ä–µ–º—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö
            ask_volumes = [qty for _, qty in asks_processed]
            bid_volumes = [qty for _, qty in bids_processed]
            
            total_ask_volume = sum(ask_volumes)
            total_bid_volume = sum(bid_volumes)
            
            print(f"\\nüì¶ –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ú–û–í (—Ç–æ–ø {len(asks_processed)} —É—Ä–æ–≤–Ω–µ–π):")
            print("-" * 50)
            print(f"üî¥ –û–±—â–∏–π –æ–±—ä–µ–º asks: {total_ask_volume:,.6f}")
            print(f"üü¢ –û–±—â–∏–π –æ–±—ä–µ–º bids: {total_bid_volume:,.6f}")
            print(f"üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ bid/ask: {total_bid_volume/total_ask_volume:.4f}" if total_ask_volume > 0 else "üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ bid/ask: N/A")
            
            # –°—Ä–µ–¥–Ω–∏–µ –æ–±—ä–µ–º—ã
            avg_ask_volume = total_ask_volume / len(ask_volumes) if ask_volumes else 0
            avg_bid_volume = total_bid_volume / len(bid_volumes) if bid_volumes else 0
            
            print(f"üìä –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º ask: {avg_ask_volume:,.6f}")
            print(f"üìä –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º bid: {avg_bid_volume:,.6f}")
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            if len(asks_processed) >= 3 and len(bids_processed) >= 3:
                top3_ask_volume = sum(ask_volumes[:3])
                top3_bid_volume = sum(bid_volumes[:3])
                
                ask_concentration = (top3_ask_volume / total_ask_volume) * 100 if total_ask_volume > 0 else 0
                bid_concentration = (top3_bid_volume / total_bid_volume) * 100 if total_bid_volume > 0 else 0
                
                print(f"\\nüéØ –ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–Ø –õ–ò–ö–í–ò–î–ù–û–°–¢–ò (—Ç–æ–ø 3 —É—Ä–æ–≤–Ω—è):")
                print("-" * 50)
                print(f"üî¥ –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è asks: {ask_concentration:.1f}%")
                print(f"üü¢ –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è bids: {bid_concentration:.1f}%")
        
    except (ValueError, IndexError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def analyze_market_depth(order_book_data, price_levels=[0.1, 0.5, 1.0, 2.0]):
    """
    –ê–Ω–∞–ª–∏–∑ –≥–ª—É–±–∏–Ω—ã —Ä—ã–Ω–∫–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö –æ—Ç –ª—É—á—à–µ–π —Ü–µ–Ω—ã
    
    Args:
        order_book_data (dict): –î–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤
        price_levels (list): –£—Ä–æ–≤–Ω–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    """
    
    asks = order_book_data.get('asks', [])
    bids = order_book_data.get('bids', [])
    
    if not asks or not bids:
        return
    
    try:
        best_ask = float(asks[0][0])
        best_bid = float(bids[0][0])
        
        print(f"\\nüìä –ê–ù–ê–õ–ò–ó –ì–õ–£–ë–ò–ù–´ –†–´–ù–ö–ê:")
        print("-" * 60)
        print(f"{'–£—Ä–æ–≤–µ–Ω—å %':^10} {'Ask Volume':^15} {'Bid Volume':^15} {'–î–∏—Å–±–∞–ª–∞–Ω—Å':^15}")
        print("-" * 60)
        
        for level_percent in price_levels:
            ask_threshold = best_ask * (1 + level_percent / 100)
            bid_threshold = best_bid * (1 - level_percent / 100)
            
            # –ü–æ–¥—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            ask_volume = sum(float(ask[1]) for ask in asks if float(ask[0]) <= ask_threshold)
            bid_volume = sum(float(bid[1]) for bid in bids if float(bid[0]) >= bid_threshold)
            
            # –î–∏—Å–±–∞–ª–∞–Ω—Å (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π = –±–æ–ª—å—à–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π)
            imbalance = (bid_volume - ask_volume) / (bid_volume + ask_volume) * 100 if (bid_volume + ask_volume) > 0 else 0
            
            print(f"{level_percent:^10.1f}% {ask_volume:^15.2f} {bid_volume:^15.2f} {imbalance:^15.1f}%")
            
    except (ValueError, IndexError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥–ª—É–±–∏–Ω—ã: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìö Bitget Spot REST API - Get Order Book")
    print("=" * 55)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    symbol = "BTCUSDT"
    type_step = "step0"
    limit = 50
    
    print(f"üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {symbol}")
    print(f"üìä –¢–∏–ø –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {type_step}")
    print(f"üî¢ –õ–∏–º–∏—Ç —É—Ä–æ–≤–Ω–µ–π: {limit}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥—É –æ—Ä–¥–µ—Ä–æ–≤
    order_book = get_order_book(symbol, type_step, limit)
    
    # –í—ã–≤–æ–¥–∏–º —Å—ã—Ä–æ–π JSON –æ—Ç–≤–µ—Ç
    if order_book:
        import json
        print("\nüìÑ RAW JSON RESPONSE:")
        print(json.dumps(order_book, indent=2, ensure_ascii=False))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        format_order_book_response(order_book, symbol)
        analyze_market_depth(order_book)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        print(f"\\nüîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í –ì–†–£–ü–ü–ò–†–û–í–ö–ò:")
        print("-" * 50)
        
        for step_type in ["step1", "step2"]:
            print(f"\\nüìä –¢–∏–ø –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {step_type}")
            step_order_book = get_order_book(symbol, step_type, 5)
            if step_order_book:
                asks = step_order_book.get('asks', [])
                bids = step_order_book.get('bids', [])
                print(f"   üî¥ –¢–æ–ø ask: {asks[0][0]} (qty: {asks[0][1]})" if asks else "   üî¥ –ù–µ—Ç asks")
                print(f"   üü¢ –¢–æ–ø bid: {bids[0][0]} (qty: {bids[0][1]})" if bids else "   üü¢ –ù–µ—Ç bids")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É –æ—Ä–¥–µ—Ä–æ–≤")

if __name__ == "__main__":
    main()
