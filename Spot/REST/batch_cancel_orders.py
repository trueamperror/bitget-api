#!/usr/bin/env python3
"""
Bitget Spot REST API - Batch Cancel Orders

–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –∏–ª–∏ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–æ —Å–∏–º–≤–æ–ª—É –∏ —Ç–∏–ø—É –æ—Ä–¥–µ—Ä–∞.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/spot/trade/Batch-Cancel-Order

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –æ—Ç–º–µ–Ω—è—é—Ç—Å—è –≤—Å–µ –æ—Ä–¥–µ—Ä–∞)
"""

import requests
import json
import hmac
import hashlib
import base64
import time
from datetime import datetime


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('/Users/timurbogatyrev/Documents/VS Code/Algo/ExchangeAPI/Bitget/config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None


def generate_signature(timestamp, method, request_path, query_string='', body=''):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    config = load_config()
    if not config:
        return None
    
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        config['secretKey'].encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')


def batch_cancel_orders(symbol=None):
    """
    –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤
    
    Args:
        symbol (str, optional): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–º–µ–Ω—è—é—Ç—Å—è –≤—Å–µ –æ—Ä–¥–µ—Ä–∞)
    
    Returns:
        dict: –û—Ç–≤–µ—Ç API —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–º–µ–Ω—ã
    """
    config = load_config()
    if not config:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return None
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    timestamp = str(int(time.time() * 1000))
    method = 'POST'
    request_path = '/api/v2/spot/trade/cancel-batch-orders'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    body_data = {}
    if symbol:
        body_data['symbol'] = symbol
    
    body = json.dumps(body_data) if body_data else ''
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
    signature = generate_signature(timestamp, method, request_path, '', body)
    if not signature:
        return None
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    try:
        url = f"{config['baseURL']}{request_path}"
        
        if symbol:
            print(f"üóëÔ∏è –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}...")
        else:
            print("üóëÔ∏è –û—Ç–º–µ–Ω–∞ –í–°–ï–• –æ—Ä–¥–µ—Ä–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞...")
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã –í–°–ï –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞!")
        
        response = requests.post(url, headers=headers, data=body)
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('code') == '00000':
                result_data = data.get('data', {})
                
                print("‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                print("=" * 50)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                success_list = result_data.get('successList', [])
                failure_list = result_data.get('failureList', [])
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ: {len(success_list)} –æ—Ä–¥–µ—Ä–æ–≤")
                print(f"‚ùå –û—à–∏–±–∫–∏ –æ—Ç–º–µ–Ω—ã: {len(failure_list)} –æ—Ä–¥–µ—Ä–æ–≤")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
                if success_list:
                    print(f"\\n‚úÖ –£–°–ü–ï–®–ù–û –û–¢–ú–ï–ù–ï–ù–ù–´–ï –û–†–î–ï–†–ê:")
                    print(f"{'Order ID':^20} {'Client OID':^15} {'–°–∏–º–≤–æ–ª':^12}")
                    print("-" * 50)
                    
                    for order in success_list:
                        order_id = order.get('orderId', 'N/A')
                        client_oid = order.get('clientOid', 'N/A')
                        order_symbol = order.get('symbol', 'N/A')
                        
                        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ ID
                        short_order_id = order_id[-8:] if len(order_id) > 8 else order_id
                        short_client_oid = client_oid[-8:] if len(client_oid) > 8 else client_oid
                        
                        print(f"{short_order_id:^20} {short_client_oid:^15} {order_symbol:^12}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–¥–µ—Ä–∞ —Å –æ—à–∏–±–∫–∞–º–∏
                if failure_list:
                    print(f"\\n‚ùå –û–†–î–ï–†–ê –° –û–®–ò–ë–ö–ê–ú–ò:")
                    print(f"{'Order ID':^15} {'Client OID':^15} {'–û—à–∏–±–∫–∞':^25}")
                    print("-" * 60)
                    
                    for error in failure_list:
                        order_id = error.get('orderId', 'N/A')
                        client_oid = error.get('clientOid', 'N/A')
                        error_msg = error.get('errorMsg', 'Unknown error')
                        
                        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        short_order_id = order_id[-8:] if len(order_id) > 8 else order_id
                        short_client_oid = client_oid[-8:] if len(client_oid) > 8 else client_oid
                        short_error = error_msg[:23] + "..." if len(error_msg) > 25 else error_msg
                        
                        print(f"{short_order_id:^15} {short_client_oid:^15} {short_error:^25}")
                
                if not success_list and not failure_list:
                    print("‚ÑπÔ∏è –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg', 'Unknown error')}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None


def cancel_all_orders_interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    print("üóëÔ∏è –ü–ê–ö–ï–¢–ù–ê–Ø –û–¢–ú–ï–ù–ê –û–†–î–ï–†–û–í")
    print("=" * 40)
    
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–∏—Ç –æ—Ä–¥–µ—Ä–∞!")
    print("\\nüìù –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–º–µ–Ω—ã:")
    print("1. üí± –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã")
    print("2. üåê –û—Ç–º–µ–Ω–∏—Ç—å –í–°–ï –æ—Ä–¥–µ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞")
    
    try:
        choice = input("\\n–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
        
        if choice == "1":
            symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
            if not symbol:
                print("‚ùå –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                return None
            
            print(f"\\n‚ö†Ô∏è –ë—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã –í–°–ï –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –ø–∞—Ä—ã {symbol}")
            confirm = input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (yes/no): ").strip().lower()
            
            if confirm in ['yes', 'y', '–¥–∞']:
                return batch_cancel_orders(symbol)
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return None
                
        elif choice == "2":
            print("\\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï!")
            print("üö® –ë—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã –í–°–ï –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –≤–æ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö!")
            print("üö® –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!")
            
            confirm1 = input("\\n–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()
            if confirm1 != 'YES':
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return None
            
            confirm2 = input("–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ 'CANCEL ALL': ").strip()
            if confirm2 != 'CANCEL ALL':
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return None
            
            return batch_cancel_orders()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return None
            
    except KeyboardInterrupt:
        print("\\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return None


def get_open_orders_count():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π"""
    config = load_config()
    if not config:
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    timestamp = str(int(time.time() * 1000))
    method = 'GET'
    request_path = '/api/v2/spot/trade/unfilled-orders'
    
    signature = generate_signature(timestamp, method, request_path)
    if not signature:
        return None
    
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    try:
        url = f"{config['baseURL']}{request_path}"
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000':
                orders = data.get('data', [])
                return len(orders)
        
        return 0
    except:
        return 0


def cancel_with_verification():
    """–û—Ç–º–µ–Ω–∞ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –û–¢–ö–†–´–¢–´–• –û–†–î–ï–†–û–í")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    orders_count = get_open_orders_count()
    
    if orders_count is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–∞—Ö")
        return None
    elif orders_count == 0:
        print("‚ÑπÔ∏è –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None
    else:
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {orders_count}")
        
        if orders_count > 10:
            print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤ ({orders_count})!")
        
        confirm = input(f"\\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–º–µ–Ω—É {orders_count} –æ—Ä–¥–µ—Ä–æ–≤? (yes/no): ").strip().lower()
        
        if confirm in ['yes', 'y', '–¥–∞']:
            return batch_cancel_orders()
        else:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üóëÔ∏è BITGET SPOT - –ü–ê–ö–ï–¢–ù–ê–Ø –û–¢–ú–ï–ù–ê –û–†–î–ï–†–û–í")
    print("=" * 50)
    
    print("\\nüîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. üóëÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞")
    print("2. üí± –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä–∞ –ø–∞—Ä—ã")
    print("3. üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ—Ç–º–µ–Ω–∞")
    print("4. ‚úÖ –û—Ç–º–µ–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π")
    
    try:
        choice = input("\\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
        
        if choice == "1":
            print("\\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã –í–°–ï –æ—Ä–¥–µ—Ä–∞!")
            confirm = input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ (yes/no): ").strip().lower()
            if confirm in ['yes', 'y']:
                batch_cancel_orders()
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
        elif choice == "2":
            symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É: ").strip().upper()
            if symbol:
                batch_cancel_orders(symbol)
            else:
                print("‚ùå –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                
        elif choice == "3":
            cancel_all_orders_interactive()
            
        elif choice == "4":
            cancel_with_verification()
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
