#!/usr/bin/env python3
"""
Bitget API - –†–∞–∑–º–µ—â–µ–Ω–∏–µ Limit –æ—Ä–¥–µ—Ä–∞ (Spot)
–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –≤ —Å—Ç–∞–∫–∞–Ω–µ –∏ –æ–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
https://www.bitget.com/api-doc/spot/trade/Place-Order

–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –î–∞
–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: 10 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É
"""

import requests
import json
import hmac
import hashlib
import base64
import time
from datetime import datetime

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('../../config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª ../../config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ ../../config.json!")
        return None

def create_signature(timestamp, method, request_path, query_string, body, secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        secret_key.encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')

def get_current_price(config, symbol):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        url = f"{config['baseURL']}/api/v2/spot/market/tickers?symbol={symbol}"
        response = requests.get(url, timeout=config.get('timeout', 30))
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000' and data.get('data'):
                ticker_data = data['data'][0] if isinstance(data['data'], list) else data['data']
                return float(ticker_data.get('lastPr', 0))
        return None
    except:
        return None

def get_order_book(config, symbol, limit=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω"""
    try:
        url = f"{config['baseURL']}/api/v2/spot/market/orderbook?symbol={symbol}&limit={limit}"
        response = requests.get(url, timeout=config.get('timeout', 30))
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000' and data.get('data'):
                return data['data']
        return None
    except:
        return None

def get_symbol_info(config, symbol):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ"""
    try:
        url = f"{config['baseURL']}/api/v2/spot/public/symbols"
        response = requests.get(url, timeout=config.get('timeout', 30))
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000' and data.get('data'):
                for symbol_info in data['data']:
                    if symbol_info.get('symbol') == symbol:
                        return {
                            'minTradeAmount': float(symbol_info.get('minTradeAmount', 0)),
                            'priceScale': int(symbol_info.get('priceScale', 4)),
                            'quantityScale': int(symbol_info.get('quantityScale', 6)),
                            'baseCoin': symbol_info.get('baseCoin'),
                            'quoteCoin': symbol_info.get('quoteCoin')
                        }
        return None
    except:
        return None

def place_limit_order(config, symbol, side, quantity, price):
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ limit –æ—Ä–¥–µ—Ä–∞
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT')
    - side: 'buy' –∏–ª–∏ 'sell'
    - quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
    - price: –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
    """
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞
    order_data = {
        'symbol': symbol.upper(),
        'side': side.lower(),
        'orderType': 'limit',
        'force': 'gtc',  # Good Till Cancel
        'size': str(quantity),
        'price': str(price)
    }
    
    body = json.dumps(order_data)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    timestamp = str(int(time.time() * 1000))
    method = 'POST'
    request_path = '/api/v2/spot/trade/place-order'
    query_string = ''
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
    signature = create_signature(timestamp, method, request_path, query_string, body, config['secretKey'])
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    # URL –∑–∞–ø—Ä–æ—Å–∞
    url = f"{config['baseURL']}{request_path}"
    
    try:
        print(f"üîÑ –†–∞–∑–º–µ—â–µ–Ω–∏–µ LIMIT –æ—Ä–¥–µ—Ä–∞...")
        print(f"üí± –ü–∞—Ä–∞: {symbol}")
        print(f"üéØ –°—Ç–æ—Ä–æ–Ω–∞: {'üü¢ –ü–û–ö–£–ü–ö–ê' if side.lower() == 'buy' else 'üî¥ –ü–†–û–î–ê–ñ–ê'}")
        print(f"üí∞ –¶–µ–Ω–∞: ${price}")
        print(f"üìè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
        print(f"üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${float(quantity) * float(price):.2f}")
        
        response = requests.post(url, headers=headers, data=body, timeout=config.get('timeout', 30))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        response_data = response.json() if response.status_code == 200 else {"error": response.text}
        save_response_example('place_limit_order', {
            'request': order_data,
            'response': response_data,
            'status_code': response.status_code,
            'timestamp': datetime.now().isoformat()
        })
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('code') == '00000':
                return data.get('data', {})
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg')}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def save_response_example(endpoint_name, data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –≤ JSON —Ñ–∞–π–ª"""
    try:
        filename = f"../../docs/response_examples/{endpoint_name}_{int(time.time())}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"üíæ –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {e}")

def display_order_book_info(order_book, side):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã"""
    if not order_book:
        return
    
    bids = order_book.get('bids', [])
    asks = order_book.get('asks', [])
    
    print(f"\nüìö –°–¢–ê–ö–ê–ù –ó–ê–Ø–í–û–ö (—Ç–æ–ø-5)")
    print("=" * 40)
    
    if side.lower() == 'buy' and asks:
        print("üî¥ –ü–†–û–î–ê–ñ–ò (ASK) - —Ü–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏:")
        for i, ask in enumerate(asks[:5], 1):
            price, volume = ask[0], ask[1]
            print(f"   {i}. ${float(price):.4f} ({float(volume):.4f})")
        
        best_ask = float(asks[0][0])
        suggested_price = best_ask * 0.99  # –ù–∞ 1% –Ω–∏–∂–µ –ª—É—á—à–µ–≥–æ ask
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${suggested_price:.4f} (–Ω–∞ 1% –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞)")
        return suggested_price
        
    elif side.lower() == 'sell' and bids:
        print("üü¢ –ü–û–ö–£–ü–ö–ò (BID) - —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:")
        for i, bid in enumerate(bids[:5], 1):
            price, volume = bid[0], bid[1]
            print(f"   {i}. ${float(price):.4f} ({float(volume):.4f})")
        
        best_bid = float(bids[0][0])
        suggested_price = best_bid * 1.01  # –ù–∞ 1% –≤—ã—à–µ –ª—É—á—à–µ–≥–æ bid
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${suggested_price:.4f} (–Ω–∞ 1% –≤—ã—à–µ —Ä—ã–Ω–∫–∞)")
        return suggested_price
    
    return None

def display_order_result(order_result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
    if not order_result:
        return
    
    print(f"\n‚úÖ LIMIT –û–†–î–ï–† –†–ê–ó–ú–ï–©–ï–ù!")
    print("=" * 40)
    
    order_id = order_result.get('orderId', 'N/A')
    client_order_id = order_result.get('clientOid', 'N/A')
    
    print(f"üÜî ID –æ—Ä–¥–µ—Ä–∞: {order_id}")
    print(f"üë§ Client ID: {client_order_id}")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    
    print(f"\nüìã Limit –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω –≤ —Å—Ç–∞–∫–∞–Ω–µ –∏ –æ–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å:")
    print(f"   python Spot/REST/get_open_orders.py")
    print(f"   python Spot/REST/get_orders.py")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìä –†–ê–ó–ú–ï–©–ï–ù–ò–ï LIMIT –û–†–î–ï–†–ê BITGET SPOT")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase', 'baseURL']
    for key in required_keys:
        if not config.get(key):
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}' –≤ config.json")
            return
    
    # –í—ã–±–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
    symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –ø–∞—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é BTCUSDT): ").strip().upper()
    if not symbol:
        symbol = "BTCUSDT"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–µ
    print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {symbol}...")
    symbol_info = get_symbol_info(config, symbol)
    current_price = get_current_price(config, symbol)
    
    if current_price and current_price > 0:
        print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}")
    
    if symbol_info:
        print(f"üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {symbol_info['minTradeAmount']}")
        print(f"ü™ô –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {symbol_info['baseCoin']}")
        print(f"üíµ –ö–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞: {symbol_info['quoteCoin']}")
        print(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã: {symbol_info['priceScale']} –∑–Ω–∞–∫–æ–≤")
        print(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {symbol_info['quantityScale']} –∑–Ω–∞–∫–æ–≤")
    
    # –í—ã–±–æ—Ä —Å—Ç–æ—Ä–æ–Ω—ã
    print(f"\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É:")
    print("1. üü¢ –ü–æ–∫—É–ø–∫–∞ (BUY)")
    print("2. üî¥ –ü—Ä–æ–¥–∞–∂–∞ (SELL)")
    
    side_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
    
    if side_choice == "1":
        side = "buy"
    elif side_choice == "2":
        side = "sell"
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫...")
    order_book = get_order_book(config, symbol)
    suggested_price = display_order_book_info(order_book, side)
    
    # –í–≤–æ–¥ —Ü–µ–Ω—ã
    if suggested_price:
        price_input = input(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è ${suggested_price:.4f}): ").strip()
        if not price_input:
            price = suggested_price
        else:
            try:
                price = float(price_input)
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã")
                return
    else:
        price_input = input("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É: ").strip()
        try:
            price = float(price_input)
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã")
            return
    
    # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if symbol_info:
        min_qty = symbol_info['minTradeAmount']
        quantity_input = input(f"üìè –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–∏–Ω–∏–º—É–º {min_qty}): ").strip()
    else:
        quantity_input = input("üìè –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ").strip()
    
    try:
        quantity = float(quantity_input)
        if symbol_info and quantity < symbol_info['minTradeAmount']:
            print(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {symbol_info['minTradeAmount']}")
            return
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
        return
    
    # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä—ã–Ω–∫–∞
    if current_price and current_price > 0:
        price_diff_pct = ((price - current_price) / current_price) * 100
        if side == 'buy':
            if price_diff_pct > 5:
                print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ {price_diff_pct:.2f}% –≤—ã—à–µ —Ä—ã–Ω–∫–∞")
            elif price_diff_pct < -10:
                print(f"üí° –•–æ—Ä–æ—à–æ: —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ {abs(price_diff_pct):.2f}% –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞")
        else:
            if price_diff_pct < -5:
                print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ {abs(price_diff_pct):.2f}% –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞")
            elif price_diff_pct > 10:
                print(f"üí° –•–æ—Ä–æ—à–æ: —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ {price_diff_pct:.2f}% –≤—ã—à–µ —Ä—ã–Ω–∫–∞")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    total_value = quantity * price
    print(f"\n‚ùì –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï LIMIT –û–†–î–ï–†–ê")
    print("=" * 35)
    print(f"üí± –ü–∞—Ä–∞: {symbol}")
    print(f"üéØ –°—Ç–æ—Ä–æ–Ω–∞: {'üü¢ –ü–û–ö–£–ü–ö–ê' if side == 'buy' else 'üî¥ –ü–†–û–î–ê–ñ–ê'}")
    print(f"üí∞ –¶–µ–Ω–∞: ${price:.4f}")
    print(f"üìè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
    print(f"üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_value:.2f}")
    
    if current_price and current_price > 0:
        print(f"üìä –¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}")
    
    print(f"\nüí° Limit –æ—Ä–¥–µ—Ä –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞–∫–∞–Ω–µ")
    confirm = input("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (y/N): ").strip().lower()
    
    if confirm != 'y':
        print("‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
    result = place_limit_order(config, symbol, side, quantity, price)
    
    if result:
        display_order_result(result)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å limit –æ—Ä–¥–µ—Ä")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
