#!/usr/bin/env python3
"""
Bitget Spot WebSocket - Account Channel (Private)

–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/spot/websocket/private/Account-Channel

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
- coin: –≤–∞–ª—é—Ç–∞
- available: –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
- frozen: –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
- locked: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
"""

import asyncio
import json
import ssl
import websockets
import hmac
import hashlib
import base64
import time
from datetime import datetime


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('/Users/timurbogatyrev/Documents/VS Code/Algo/ExchangeAPI/Bitget/config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None


class SpotAccountChannel:
    def __init__(self, config):
        self.config = config
        self.ws = None
        self.balance_data = {}
        self.update_count = 0
        
    def generate_signature(self, timestamp, method, request_path, body=''):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        message = str(timestamp) + method + request_path + body
        signature = hmac.new(
            self.config['secretKey'].encode('utf-8'),
            message.encode('utf-8'),
            hashlib.sha256
        ).digest()
        return base64.b64encode(signature).decode('utf-8')
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π WebSocket URL
            private_ws_url = self.config.get('privateWsURL', 'wss://ws.bitget.com/v2/ws/private')
            
            self.ws = await websockets.connect(
                private_ws_url,
                ssl=ssl_context,
                ping_interval=30,
                ping_timeout=10
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Private Spot WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        timestamp = str(int(time.time()))
        method = 'GET'
        request_path = '/user/verify'
        
        signature = self.generate_signature(timestamp, method, request_path)
        
        auth_message = {
            "op": "login",
            "args": [
                {
                    "apiKey": self.config['apiKey'],
                    "passphrase": self.config['passphrase'],
                    "timestamp": timestamp,
                    "sign": signature
                }
            ]
        }
        
        if self.ws:
            await self.ws.send(json.dumps(auth_message))
            print("üîê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                response = await asyncio.wait_for(self.ws.recv(), timeout=10)
                data = json.loads(response)
                if data.get('event') == 'login':
                    if str(data.get('code')) == '0':  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {data.get('msg', 'Unknown error')}")
                        return False
                else:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
                    return False
            except asyncio.TimeoutError:
                print("‚ùå –¢–∞–π–º–∞—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
                return False
        
        return False
    
    async def subscribe_account(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        subscribe_message = {
            "op": "subscribe",
            "args": [
                {
                    "instType": "SPOT",
                    "channel": "account",
                    "instId": "default"
                }
            ]
        }
        
        if self.ws:
            await self.ws.send(json.dumps(subscribe_message))
            print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞")
    
    def format_balance_data(self, data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞"""
        if not data or 'data' not in data:
            return
        
        self.update_count += 1
        
        for balance_update in data['data']:
            coin = balance_update.get('coin', 'N/A')
            available = float(balance_update.get('available', 0))
            frozen = float(balance_update.get('frozen', 0))
            locked = float(balance_update.get('locked', 0))
            
            total = available + frozen + locked
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞
            self.balance_data[coin] = {
                'available': available,
                'frozen': frozen,
                'locked': locked,
                'total': total,
                'last_update': datetime.now()
            }
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –±–∞–ª–∞–Ω—Å—ã (–±–æ–ª—å—à–µ 0.001)
            if total > 0.001:
                time_str = datetime.now().strftime("%H:%M:%S.%f")[:-3]
                
                print(f"\\nüí∞ [{time_str}] –ë–ê–õ–ê–ù–° #{self.update_count}")
                print(f"ü™ô –í–∞–ª—é—Ç–∞: {coin}")
                print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {available:,.6f}")
                if frozen > 0:
                    print(f"‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: {frozen:,.6f}")
                if locked > 0:
                    print(f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {locked:,.6f}")
                print(f"üìä –í—Å–µ–≥–æ: {total:,.6f}")
                print("‚îÄ" * 40)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∫–∞–∂–¥—ã–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                if self.update_count % 10 == 0:
                    self.show_portfolio_summary()
    
    def show_portfolio_summary(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        if not self.balance_data:
            return
        
        print(f"\\nüìä –°–í–û–î–ö–ê –ü–û–†–¢–§–ï–õ–Ø (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')})")
        print("=" * 60)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–Ω–∞—á–∏–º—ã–µ –±–∞–ª–∞–Ω—Å—ã
        significant_balances = {
            coin: data for coin, data in self.balance_data.items() 
            if data['total'] > 0.001
        }
        
        if not significant_balances:
            print("üì≠ –ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤")
            return
        
        print(f"üíº –í–∞–ª—é—Ç –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {len(significant_balances)}")
        print(f"üîÑ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.update_count}")
        
        print(f"\\n{'–í–∞–ª—é—Ç–∞':^10} {'–î–æ—Å—Ç—É–ø–Ω–æ':>15} {'–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ':>15} {'–í—Å–µ–≥–æ':>15}")
        print("‚îÄ" * 65)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –±–∞–ª–∞–Ω—Å—É
        sorted_balances = sorted(
            significant_balances.items(),
            key=lambda x: x[1]['total'],
            reverse=True
        )
        
        for coin, data in sorted_balances:
            available = data['available']
            frozen = data['frozen']
            total = data['total']
            
            print(f"{coin:^10} {available:>15.6f} {frozen:>15.6f} {total:>15.6f}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª—é—Ç
        usdt_balance = significant_balances.get('USDT', {}).get('total', 0)
        btc_balance = significant_balances.get('BTC', {}).get('total', 0)
        eth_balance = significant_balances.get('ETH', {}).get('total', 0)
        
        print(f"\\nüíµ –û—Å–Ω–æ–≤–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:")
        if usdt_balance > 0:
            print(f"üí≤ USDT: {usdt_balance:,.2f}")
        if btc_balance > 0:
            print(f"‚Çø BTC: {btc_balance:.6f}")
        if eth_balance > 0:
            print(f"Œû ETH: {eth_balance:.6f}")
    
    async def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            data = json.loads(message)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if data.get('event') == 'login':
                if data.get('code') == '0':
                    print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                    await self.subscribe_account()
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {data.get('msg', 'Unknown error')}")
                    return False
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
            elif data.get('event') == 'subscribe':
                if data.get('code') == '0':
                    channel = data.get('arg', {}).get('channel', 'unknown')
                    print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞: {channel}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {data.get('msg', 'Unknown error')}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞
            elif data.get('action') in ['snapshot', 'update']:
                channel = data.get('arg', {}).get('channel', '')
                if channel == 'account':
                    self.format_balance_data(data)
            
            # –ü–∏–Ω–≥-–ø–æ–Ω–≥
            elif 'ping' in data:
                pong_message = {'pong': data['ping']}
                if self.ws:
                    await self.ws.send(json.dumps(pong_message))
        
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {message}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def listen(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.ws:
                async for message in self.ws:
                    await self.handle_message(message)
        except websockets.exceptions.ConnectionClosed:
            print("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if self.ws:
            await self.ws.close()
            print(f"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket. –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.update_count}")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
            self.show_portfolio_summary()


async def monitor_account_balance():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
    
    print("üí∞ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ë–ê–õ–ê–ù–°–ê –ê–ö–ö–ê–£–ù–¢–ê")
    print("=" * 40)
    print("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    account_client = SpotAccountChannel(config)
    
    try:
        if not await account_client.connect():
            return
        
        await account_client.authenticate()
        
        print("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await account_client.listen()
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await account_client.disconnect()


async def balance_tracker_with_timer():
    """–¢—Ä–µ–∫–µ—Ä –±–∞–ª–∞–Ω—Å–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º"""
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
    
    print("‚è∞ –¢–†–ï–ö–ï–† –ë–ê–õ–ê–ù–°–ê –° –¢–ê–ô–ú–ï–†–û–ú")
    print("=" * 40)
    
    duration = input("‚è∞ –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300): ").strip()
    try:
        duration = int(duration) if duration else 300
    except ValueError:
        duration = 300
    
    account_client = SpotAccountChannel(config)
    
    try:
        if not await account_client.connect():
            return
        
        await account_client.authenticate()
        
        print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            await asyncio.wait_for(account_client.listen(), timeout=duration)
        except asyncio.TimeoutError:
            print(f"\\n‚è∞ –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ({duration} —Å–µ–∫) –∏—Å—Ç–µ–∫–ª–æ")
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await account_client.disconnect()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üí∞ BITGET SPOT ACCOUNT CHANNEL")
    print("=" * 40)
    
    print("üîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print("1. üí∞ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞")
    print("2. ‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —Ç–∞–π–º–µ—Ä–æ–º")
    
    try:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
        
        if choice == "1":
            await monitor_account_balance()
        elif choice == "2":
            await balance_tracker_with_timer()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


if __name__ == "__main__":
    asyncio.run(main())
