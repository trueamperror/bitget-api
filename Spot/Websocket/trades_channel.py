#!/usr/bin/env python3
"""
Bitget Spot WebSocket - Trades Channel

–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∂–¥—É—é —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–¥–µ–ª–∫—É —Å –¥–µ—Ç–∞–ª—è–º–∏.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/spot/websocket/public/Trades-Channel

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
- tradeId: ID —Å–¥–µ–ª–∫–∏
- side: —Å—Ç–æ—Ä–æ–Ω–∞ (buy/sell)
- fillPrice: —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
- fillQuantity: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
- fillTime: –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
"""

import asyncio
import json
import ssl
import websockets
from datetime import datetime


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('/Users/timurbogatyrev/Documents/VS Code/Algo/ExchangeAPI/Bitget/config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None


class SpotTradesChannel:
    def __init__(self, config):
        self.config = config
        self.ws = None
        self.symbols = []
        self.trade_count = 0
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            self.ws = await websockets.connect(
                self.config['wsURL'],
                ssl=ssl_context,
                ping_interval=30,
                ping_timeout=10
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Spot WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def subscribe_trades(self, symbol):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        subscribe_message = {
            "op": "subscribe",
            "args": [
                {
                    "instType": "SPOT",
                    "channel": "trade",
                    "instId": symbol.upper()
                }
            ]
        }
        
        await self.ws.send(json.dumps(subscribe_message))
        self.symbols.append(symbol.upper())
        print(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫–∏ {symbol}")
    
    def format_trade_data(self, data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        if not data or 'data' not in data:
            return
        
        for trade in data['data']:
            self.trade_count += 1
            
            symbol = data.get('arg', {}).get('instId', 'N/A')
            trade_id = trade.get('tradeId', 'N/A')
            side = trade.get('side', 'N/A')
            price = float(trade.get('fillPrice', 0))
            quantity = float(trade.get('fillQuantity', 0))
            fill_time = trade.get('fillTime', 0)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            if fill_time:
                dt = datetime.fromtimestamp(int(fill_time) / 1000)
                time_str = dt.strftime("%H:%M:%S.%f")[:-3]
            else:
                time_str = datetime.now().strftime("%H:%M:%S.%f")[:-3]
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω—ã —Å–¥–µ–ª–∫–∏
            side_emoji = "üü¢" if side == "buy" else "üî¥"
            side_arrow = "‚ÜóÔ∏è" if side == "buy" else "‚ÜòÔ∏è"
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏
            total_value = price * quantity
            
            print(f"\nüí• [{time_str}] SPOT TRADE #{self.trade_count}")
            print(f"üí± {symbol}")
            print(f"{side_arrow} –°—Ç–æ—Ä–æ–Ω–∞: {side_emoji} {side.upper()}")
            print(f"üí∞ –¶–µ–Ω–∞: ${price:,.4f}")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:,.4f}")
            print(f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${total_value:,.2f}")
            print(f"üÜî Trade ID: {trade_id}")
    
    async def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            data = json.loads(message)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
            if data.get('event') == 'subscribe':
                if data.get('code') == '0':
                    print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞: {data.get('arg', {}).get('instId', 'unknown')}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {data.get('msg', 'Unknown error')}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            elif data.get('action') == 'snapshot' or data.get('action') == 'update':
                if data.get('arg', {}).get('channel') == 'trade':
                    self.format_trade_data(data)
            
            # –ü–∏–Ω–≥-–ø–æ–Ω–≥
            elif 'ping' in data:
                pong_message = {'pong': data['ping']}
                await self.ws.send(json.dumps(pong_message))
        
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {message}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def listen(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            async for message in self.ws:
                await self.handle_message(message)
        except websockets.exceptions.ConnectionClosed:
            print("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if self.ws:
            await self.ws.close()
            print(f"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket. –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {self.trade_count}")


async def monitor_single_symbol():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–¥–µ–ª–æ–∫ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    config = load_config()
    if not config:
        return
    
    print("üí• –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–î–ï–õ–û–ö –û–î–ù–û–ì–û –°–ò–ú–í–û–õ–ê")
    print("=" * 40)
    
    trades_client = SpotTradesChannel(config)
    
    try:
        if not await trades_client.connect():
            return
        
        symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
        if not symbol:
            symbol = "BTCUSDT"
        
        await trades_client.subscribe_trades(symbol)
        
        print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–¥–µ–ª–æ–∫ {symbol} –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await trades_client.listen()
        
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await trades_client.disconnect()


async def monitor_multiple_symbols():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–¥–µ–ª–æ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    config = load_config()
    if not config:
        return
    
    print("üí• –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–î–ï–õ–û–ö –ù–ï–°–ö–û–õ–¨–ö–ò–• –°–ò–ú–í–û–õ–û–í")
    print("=" * 40)
    
    trades_client = SpotTradesChannel(config)
    
    try:
        if not await trades_client.connect():
            return
        
        symbols_input = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT,ETHUSDT): ").strip()
        if not symbols_input:
            symbols_input = "BTCUSDT,ETHUSDT"
        
        symbols = [s.strip().upper() for s in symbols_input.split(',')]
        
        for symbol in symbols:
            await trades_client.subscribe_trades(symbol)
            await asyncio.sleep(0.5)
        
        print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–¥–µ–ª–æ–∫: {', '.join(symbols)}")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await trades_client.listen()
        
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await trades_client.disconnect()


async def trading_activity_monitor():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    config = load_config()
    if not config:
        return
    
    print("üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –¢–û–†–ì–û–í–û–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò")
    print("=" * 40)
    
    trades_client = SpotTradesChannel(config)
    
    try:
        if not await trades_client.connect():
            return
        
        symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
        if not symbol:
            symbol = "BTCUSDT"
        
        duration = input("‚è∞ –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60): ").strip()
        try:
            duration = int(duration) if duration else 60
        except ValueError:
            duration = 60
        
        await trades_client.subscribe_trades(symbol)
        
        print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {symbol} –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            await asyncio.wait_for(trades_client.listen(), timeout=duration)
        except asyncio.TimeoutError:
            print(f"\n‚è∞ –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ({duration} —Å–µ–∫) –∏—Å—Ç–µ–∫–ª–æ")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {trades_client.trade_count} —Å–¥–µ–ª–æ–∫")
        
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {trades_client.trade_count} —Å–¥–µ–ª–æ–∫")
    finally:
        await trades_client.disconnect()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üí• BITGET SPOT TRADES CHANNEL")
    print("=" * 40)
    
    print("üîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print("1. üí• –û–¥–∏–Ω —Å–∏–º–≤–æ–ª")
    print("2. üìà –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤")
    print("3. üìä –¢–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å —Ç–∞–π–º–µ—Ä–æ–º)")
    
    try:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == "1":
            await monitor_single_symbol()
        elif choice == "2":
            await monitor_multiple_symbols()
        elif choice == "3":
            await trading_activity_monitor()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


if __name__ == "__main__":
    asyncio.run(main())
