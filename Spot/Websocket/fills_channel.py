#!/usr/bin/env python3
"""
Bitget Spot WebSocket - Fills Channel (Private)

–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –í—ã–≤–æ–¥–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–∏—Ä–∂–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏.
–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –±–∏—Ä–∂–∏.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/spot/websocket/private/Fills-Channel

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
- tradeId: ID —Å–¥–µ–ª–∫–∏
- orderId: ID –æ—Ä–¥–µ—Ä–∞
- instId: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
- side: —Å—Ç–æ—Ä–æ–Ω–∞ (buy/sell)
- fillSize: —Ä–∞–∑–º–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
- fillPrice: —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
- orderType: —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞
- feeAmount: —Ä–∞–∑–º–µ—Ä –∫–æ–º–∏—Å—Å–∏–∏
- feeCoin: –≤–∞–ª—é—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏
- fillTime: –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
"""

import asyncio
import json
import ssl
import websockets
import hmac
import hashlib
import base64
import time
from datetime import datetime

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('/Users/timurbogatyrev/Documents/VS Code/Algo/ExchangeAPI/Bitget/config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

class SpotFillsChannel:
    def __init__(self, config):
        self.config = config
        self.ws = None
        self.fills_data = {}
        self.update_count = 0
        self.trading_stats = {
            'total_fills': 0,
            'buy_fills': 0,
            'sell_fills': 0,
            'total_volume': 0,
            'total_fees': 0,
            'pairs_traded': set()
        }
        
    def generate_signature(self, timestamp, method, request_path, body=''):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        message = str(timestamp) + method + request_path + body
        signature = hmac.new(
            self.config['secretKey'].encode('utf-8'),
            message.encode('utf-8'),
            hashlib.sha256
        ).digest()
        return base64.b64encode(signature).decode('utf-8')
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π WebSocket URL
            private_ws_url = self.config.get('privateWsURL', 'wss://ws.bitget.com/v2/ws/private')
            
            self.ws = await websockets.connect(
                private_ws_url,
                ssl=ssl_context,
                ping_interval=30,
                ping_timeout=10
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Private Spot WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        timestamp = str(int(time.time()))
        method = 'GET'
        request_path = '/user/verify'
        
        signature = self.generate_signature(timestamp, method, request_path)
        
        auth_message = {
            "op": "login",
            "args": [
                {
                    "apiKey": self.config['apiKey'],
                    "passphrase": self.config['passphrase'],
                    "timestamp": timestamp,
                    "sign": signature
                }
            ]
        }
        
        if self.ws:
            await self.ws.send(json.dumps(auth_message))
            print("üîê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                response = await asyncio.wait_for(self.ws.recv(), timeout=10)
                data = json.loads(response)
                if data.get('event') == 'login':
                    if str(data.get('code')) == '0':  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {data.get('msg', 'Unknown error')}")
                        return False
                else:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
                    return False
            except asyncio.TimeoutError:
                print("‚ùå –¢–∞–π–º–∞—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
                return False
        
        return False
    
    async def subscribe_fills(self, symbol=None):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
        subscribe_message = {
            "op": "subscribe",
            "args": [
                {
                    "instType": "SPOT",
                    "channel": "fills",
                    "instId": symbol if symbol else "default"
                }
            ]
        }
        
        if self.ws:
            await self.ws.send(json.dumps(subscribe_message))
            if symbol:
                print(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è {symbol}")
            else:
                print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    def format_fill_data(self, data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π"""
        if not data or 'data' not in data:
            return
        
        for fill in data['data']:
            self.update_count += 1
            
            trade_id = fill.get('tradeId', 'N/A')
            order_id = fill.get('orderId', 'N/A')
            inst_id = fill.get('instId', 'N/A')
            side = fill.get('side', 'N/A')
            fill_size = float(fill.get('fillSize', 0))
            fill_price = float(fill.get('fillPrice', 0))
            order_type = fill.get('orderType', 'N/A')
            fee_amount = float(fill.get('feeAmount', 0))
            fee_coin = fill.get('feeCoin', 'N/A')
            fill_time = fill.get('fillTime', 0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_trading_stats(inst_id, side, fill_size, fill_price, fee_amount)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            self.fills_data[trade_id] = {
                'orderId': order_id,
                'instId': inst_id,
                'side': side,
                'fillSize': fill_size,
                'fillPrice': fill_price,
                'orderType': order_type,
                'feeAmount': fee_amount,
                'feeCoin': fee_coin,
                'fillTime': fill_time,
                'timestamp': datetime.now()
            }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            if fill_time:
                dt = datetime.fromtimestamp(int(fill_time) / 1000)
                time_str = dt.strftime("%H:%M:%S.%f")[:-3]
            else:
                time_str = datetime.now().strftime("%H:%M:%S.%f")[:-3]
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω—ã —Å–¥–µ–ª–∫–∏
            side_emoji = "üü¢" if side == "buy" else "üî¥"
            side_arrow = "‚¨ÜÔ∏è" if side == "buy" else "‚¨áÔ∏è"
            
            # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            fill_value = fill_price * fill_size
            
            print(f"\\nüéØ [{time_str}] –ò–°–ü–û–õ–ù–ï–ù–ò–ï #{self.update_count}")
            print(f"üí± {inst_id}")
            print(f"üÜî Trade ID: {trade_id}")
            print(f"üìã Order ID: {order_id[-12:] if len(order_id) > 12 else order_id}")
            print(f"{side_arrow} –°—Ç–æ—Ä–æ–Ω–∞: {side_emoji} {side.upper()} ‚îÇ –¢–∏–ø: {order_type.upper()}")
            print(f"üí∞ –¶–µ–Ω–∞: ${fill_price:,.6f}")
            print(f"üìä –†–∞–∑–º–µ—Ä: {fill_size:,.6f}")
            print(f"üíµ –°—É–º–º–∞: ${fill_value:,.2f}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∏—Å—Å–∏–∏
            if fee_amount > 0:
                print(f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {fee_amount:,.6f} {fee_coin}")
                if fee_coin == 'USDT':
                    fee_percent = (fee_amount / fill_value) * 100 if fill_value > 0 else 0
                    print(f"üìà –ö–æ–º–∏—Å—Å–∏—è: {fee_percent:.4f}%")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π
            if self.update_count % 5 == 0:
                print("‚îÄ" * 50)
    
    def update_trading_stats(self, inst_id, side, fill_size, fill_price, fee_amount):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.trading_stats['total_fills'] += 1
        self.trading_stats['pairs_traded'].add(inst_id)
        
        if side == 'buy':
            self.trading_stats['buy_fills'] += 1
        else:
            self.trading_stats['sell_fills'] += 1
        
        fill_value = fill_price * fill_size
        self.trading_stats['total_volume'] += fill_value
        self.trading_stats['total_fees'] += fee_amount
    
    def show_trading_summary(self, *args, **kwargs):
        """–ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
        pass
    def show_recent_fills(self, *args, **kwargs):
        """–ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
        pass
    async def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –≤—ã–≤–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö JSON"""
        try:
            data = json.loads(message)
            print(json.dumps(data, indent=4, ensure_ascii=False))
            
            # –ü–∏–Ω–≥-–ø–æ–Ω–≥
            if 'ping' in data:
                pong_message = {'pong': data['ping']}
                if self.ws:
                    await self.ws.send(json.dumps(pong_message))
        
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {message}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    async def listen(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.ws:
                async for message in self.ws:
                    await self.handle_message(message)
        except websockets.exceptions.ConnectionClosed:
            print("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if self.ws:
            await self.ws.close()
            print("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket")

async def monitor_all_fills():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
    
    print("üéØ –ú–û–ù–ò–¢–û–†–ò–ù–ì –í–°–ï–• –ò–°–ü–û–õ–ù–ï–ù–ò–ô")
    print("=" * 40)
    print("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    fills_client = SpotFillsChannel(config)
    
    try:
        if not await fills_client.connect():
            return
        
        # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if not await fills_client.authenticate():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await asyncio.sleep(1)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        await fills_client.subscribe_fills()
        
        print("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await fills_client.listen()
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await fills_client.disconnect()

async def monitor_pair_fills():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
    
    print("üéØ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò–°–ü–û–õ–ù–ï–ù–ò–ô –ö–û–ù–ö–†–ï–¢–ù–û–ô –ü–ê–†–´")
    print("=" * 40)
    
    symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT) –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö: ").strip().upper()
    
    fills_client = SpotFillsChannel(config)
    
    try:
        if not await fills_client.connect():
            return
        
        # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if not await fills_client.authenticate():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await asyncio.sleep(1)
        
        if symbol:
            await fills_client.subscribe_fills(symbol)
            print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è {symbol}...")
        else:
            await fills_client.subscribe_fills()
            print("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π...")
        
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await fills_client.listen()
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await fills_client.disconnect()

async def trading_session_analysis():
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ JSON"""
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
    
    print("üìä –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–û–ô –°–ï–°–°–ò–ò")
    print("=" * 40)
    
    duration = input("‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 600): ").strip()
    try:
        duration = int(duration) if duration else 600
    except ValueError:
        duration = 600
    
    fills_client = SpotFillsChannel(config)
    
    try:
        if not await fills_client.connect():
            return
        
        # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if not await fills_client.authenticate():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return
            
        await asyncio.sleep(1)
        await fills_client.subscribe_fills()
        
        print(f"üîÑ –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        start_time = time.time()
        
        try:
            await asyncio.wait_for(fills_client.listen(), timeout=duration)
        except asyncio.TimeoutError:
            end_time = time.time()
            session_duration = end_time - start_time
            
            print(f"\\n‚è∞ –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({session_duration:.0f} —Å–µ–∫)")
            print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = fills_client.trading_stats
            if stats['total_fills'] > 0:
                avg_fills_per_minute = (stats['total_fills'] / session_duration) * 60
                print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏: {avg_fills_per_minute:.2f} –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π/–º–∏–Ω")
                
                if stats['total_volume'] > 0:
                    avg_volume_per_minute = (stats['total_volume'] / session_duration) * 60
                    print(f"üí∞ –û–±—ä–µ–º –≤ –º–∏–Ω—É—Ç—É: ${avg_volume_per_minute:,.2f}")
            else:
                print("üì≠ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ")
        
    except KeyboardInterrupt:
        print("\\nüëã –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await fills_client.disconnect()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø–æ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π")
    print("=" * 40)
    
    print("üîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print("1. üéØ –í—Å–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
    print("2. üí± –ò—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã")
    print("3. üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")
    
    try:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == "1":
            await monitor_all_fills()
        elif choice == "2":
            await monitor_pair_fills()
        elif choice == "3":
            await trading_session_analysis()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())
