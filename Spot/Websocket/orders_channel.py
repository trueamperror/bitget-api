#!/usr/bin/env python3
"""
Bitget Spot WebSocket - Orders Channel (Private)

–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ –æ—Ä–¥–µ—Ä–∞–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/spot/websocket/private/Orders-Channel

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
- orderId: ID –æ—Ä–¥–µ—Ä–∞
- clientOid: –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID –æ—Ä–¥–µ—Ä–∞  
- instId: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
- side: —Å—Ç–æ—Ä–æ–Ω–∞ (buy/sell)
- orderType: —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ (limit/market)
- size: —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
- price: —Ü–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
- status: —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
- fillPrice: —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
- fillSize: —Ä–∞–∑–º–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
- fillTime: –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
"""

import asyncio
import json
import ssl
import websockets
import hmac
import hashlib
import base64
import time
from datetime import datetime


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('/Users/timurbogatyrev/Documents/VS Code/Algo/ExchangeAPI/Bitget/config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None


class SpotOrdersChannel:
    def __init__(self, config):
        self.config = config
        self.ws = None
        self.orders_data = {}
        self.update_count = 0
        self.order_stats = {
            'new': 0,
            'filled': 0,
            'cancelled': 0,
            'partially_filled': 0
        }
        
    def generate_signature(self, timestamp, method, request_path, body=''):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        message = str(timestamp) + method + request_path + body
        signature = hmac.new(
            self.config['secretKey'].encode('utf-8'),
            message.encode('utf-8'),
            hashlib.sha256
        ).digest()
        return base64.b64encode(signature).decode('utf-8')
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π WebSocket URL
            private_ws_url = self.config.get('privateWsURL', 'wss://ws.bitget.com/v2/ws/private')
            
            self.ws = await websockets.connect(
                private_ws_url,
                ssl=ssl_context,
                ping_interval=30,
                ping_timeout=10
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Private Spot WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        timestamp = str(int(time.time()))
        method = 'GET'
        request_path = '/user/verify'
        
        signature = self.generate_signature(timestamp, method, request_path)
        
        auth_message = {
            "op": "login",
            "args": [
                {
                    "apiKey": self.config['apiKey'],
                    "passphrase": self.config['passphrase'],
                    "timestamp": timestamp,
                    "sign": signature
                }
            ]
        }
        
        if self.ws:
            await self.ws.send(json.dumps(auth_message))
            print("üîê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                response = await asyncio.wait_for(self.ws.recv(), timeout=10)
                data = json.loads(response)
                if data.get('event') == 'login':
                    if str(data.get('code')) == '0':  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {data.get('msg', 'Unknown error')}")
                        return False
                else:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
                    return False
            except asyncio.TimeoutError:
                print("‚ùå –¢–∞–π–º–∞—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
                return False
        
        return False
    
    async def subscribe_orders(self, symbol=None):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
        subscribe_message = {
            "op": "subscribe",
            "args": [
                {
                    "instType": "SPOT",
                    "channel": "orders",
                    "instId": symbol if symbol else "default"
                }
            ]
        }
        
        if self.ws:
            await self.ws.send(json.dumps(subscribe_message))
            if symbol:
                print(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}")
            else:
                print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –æ—Ä–¥–µ—Ä–∞")
    
    def get_status_emoji(self, status):
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞"""
        status_emojis = {
            'new': 'üÜï',
            'partial_fill': 'üîÑ',
            'full_fill': '‚úÖ',
            'cancelled': '‚ùå',
            'live': 'üü¢',
            'partially_filled': 'üîÑ',
            'filled': '‚úÖ',
            'canceled': '‚ùå'
        }
        return status_emojis.get(status.lower(), '‚ùì')
    
    def get_side_emoji(self, side):
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ä–¥–µ—Ä–∞"""
        return "üü¢" if side == "buy" else "üî¥"
    
    def format_order_data(self, data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        if not data or 'data' not in data:
            return
        
        for order_update in data['data']:
            self.update_count += 1
            
            order_id = order_update.get('orderId', 'N/A')
            client_oid = order_update.get('clientOid', 'N/A')
            inst_id = order_update.get('instId', 'N/A')
            side = order_update.get('side', 'N/A')
            order_type = order_update.get('orderType', 'N/A')
            size = float(order_update.get('size', 0))
            price = float(order_update.get('price', 0))
            status = order_update.get('status', 'N/A')
            fill_price = float(order_update.get('fillPrice', 0))
            fill_size = float(order_update.get('fillSize', 0))
            fill_time = order_update.get('fillTime', 0)
            create_time = order_update.get('cTime', 0)
            update_time = order_update.get('uTime', 0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            self.orders_data[order_id] = {
                'clientOid': client_oid,
                'instId': inst_id,
                'side': side,
                'orderType': order_type,
                'size': size,
                'price': price,
                'status': status,
                'fillPrice': fill_price,
                'fillSize': fill_size,
                'fillTime': fill_time,
                'createTime': create_time,
                'updateTime': update_time,
                'last_update': datetime.now()
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_order_stats(status)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            if update_time:
                dt = datetime.fromtimestamp(int(update_time) / 1000)
                time_str = dt.strftime("%H:%M:%S.%f")[:-3]
            else:
                time_str = datetime.now().strftime("%H:%M:%S.%f")[:-3]
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏
            status_emoji = self.get_status_emoji(status)
            side_emoji = self.get_side_emoji(side)
            
            print(f"\\nüìã [{time_str}] –û–†–î–ï–† #{self.update_count}")
            print(f"üí± {inst_id}")
            print(f"üÜî Order ID: {order_id}")
            if client_oid != 'N/A':
                print(f"üë§ Client ID: {client_oid}")
            print(f"{side_emoji} –°—Ç–æ—Ä–æ–Ω–∞: {side.upper()} ‚îÇ –¢–∏–ø: {order_type.upper()}")
            print(f"{status_emoji} –°—Ç–∞—Ç—É—Å: {status.upper()}")
            print(f"üìä –†–∞–∑–º–µ—Ä: {size:,.6f}")
            if price > 0:
                print(f"üí∞ –¶–µ–Ω–∞: ${price:,.6f}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏
            if fill_size > 0:
                fill_percent = (fill_size / size) * 100 if size > 0 else 0
                print(f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {fill_size:,.6f} ({fill_percent:.2f}%)")
                if fill_price > 0:
                    print(f"üíµ –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: ${fill_price:,.6f}")
                    print(f"üí∏ –°—É–º–º–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: ${fill_price * fill_size:,.2f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if self.update_count % 10 == 0:
                self.show_orders_summary()
            
            print("‚îÄ" * 50)
    
    def update_order_stats(self, status):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ä–¥–µ—Ä–æ–≤"""
        status_lower = status.lower()
        if status_lower in ['new', 'live']:
            self.order_stats['new'] += 1
        elif status_lower in ['filled', 'full_fill']:
            self.order_stats['filled'] += 1
        elif status_lower in ['cancelled', 'canceled']:
            self.order_stats['cancelled'] += 1
        elif status_lower in ['partial_fill', 'partially_filled']:
            self.order_stats['partially_filled'] += 1
    
    def show_orders_summary(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –æ—Ä–¥–µ—Ä–∞–º"""
        if not self.orders_data:
            return
        
        print(f"\\nüìä –°–í–û–î–ö–ê –û–†–î–ï–†–û–í (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')})")
        print("=" * 60)
        
        print(f"üìã –í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(self.orders_data)}")
        print(f"üîÑ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.update_count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        print(f"\\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        print(f"üÜï –ù–æ–≤—ã–µ: {self.order_stats['new']}")
        print(f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ: {self.order_stats['filled']}")
        print(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ: {self.order_stats['cancelled']}")
        print(f"üîÑ –ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ: {self.order_stats['partially_filled']}")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–∞—Ä–∞–º
        pairs_count = {}
        for order_data in self.orders_data.values():
            pair = order_data['instId']
            pairs_count[pair] = pairs_count.get(pair, 0) + 1
        
        if pairs_count:
            print(f"\\nüí± –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã:")
            for pair, count in sorted(pairs_count.items(), key=lambda x: x[1], reverse=True):
                print(f"  {pair}: {count} –æ—Ä–¥–µ—Ä–æ–≤")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        recent_orders = sorted(
            self.orders_data.items(),
            key=lambda x: x[1]['last_update'],
            reverse=True
        )[:5]
        
        if recent_orders:
            print(f"\\nüïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ä–¥–µ—Ä–æ–≤:")
            print(f"{'ID':^15} {'–ü–∞—Ä–∞':^12} {'–°—Ç–æ—Ä–æ–Ω–∞':^8} {'–°—Ç–∞—Ç—É—Å':^15} {'–†–∞–∑–º–µ—Ä':>12}")
            print("‚îÄ" * 70)
            
            for order_id, data in recent_orders:
                short_id = order_id[-8:] if len(order_id) > 8 else order_id
                status_emoji = self.get_status_emoji(data['status'])
                side_emoji = self.get_side_emoji(data['side'])
                
                print(f"{short_id:^15} {data['instId']:^12} {side_emoji}{data['side'][:3]:^7} {status_emoji}{data['status'][:12]:^14} {data['size']:>12.4f}")
    
    async def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            data = json.loads(message)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
            if data.get('event') == 'subscribe':
                if str(data.get('code')) == '0':
                    channel = data.get('arg', {}).get('channel', 'unknown')
                    print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞: {channel}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {data.get('msg', 'Unknown error')}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            elif data.get('action') in ['snapshot', 'update']:
                channel = data.get('arg', {}).get('channel', '')
                if channel == 'orders':
                    self.format_order_data(data)
            
            # –ü–∏–Ω–≥-–ø–æ–Ω–≥
            elif 'ping' in data:
                pong_message = {'pong': data['ping']}
                if self.ws:
                    await self.ws.send(json.dumps(pong_message))
        
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {message}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def listen(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.ws:
                async for message in self.ws:
                    await self.handle_message(message)
        except websockets.exceptions.ConnectionClosed:
            print("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if self.ws:
            await self.ws.close()
            print(f"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket. –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.update_count}")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
            self.show_orders_summary()


async def monitor_all_orders():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
    
    print("üìã –ú–û–ù–ò–¢–û–†–ò–ù–ì –í–°–ï–• –û–†–î–ï–†–û–í")
    print("=" * 40)
    print("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    orders_client = SpotOrdersChannel(config)
    
    try:
        if not await orders_client.connect():
            return
        
        # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if not await orders_client.authenticate():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await asyncio.sleep(1)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Ä–¥–µ—Ä–∞
        await orders_client.subscribe_orders()
        
        print("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–æ–≤...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await orders_client.listen()
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await orders_client.disconnect()


async def monitor_pair_orders():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã"""
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
    
    print("üìã –ú–û–ù–ò–¢–û–†–ò–ù–ì –û–†–î–ï–†–û–í –ö–û–ù–ö–†–ï–¢–ù–û–ô –ü–ê–†–´")
    print("=" * 40)
    
    symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT) –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö: ").strip().upper()
    
    orders_client = SpotOrdersChannel(config)
    
    try:
        if not await orders_client.connect():
            return
        
        # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if not await orders_client.authenticate():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await asyncio.sleep(1)
        
        if symbol:
            await orders_client.subscribe_orders(symbol)
            print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}...")
        else:
            await orders_client.subscribe_orders()
            print("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤...")
        
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await orders_client.listen()
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await orders_client.disconnect()


async def orders_tracker_with_timer():
    """–¢—Ä–µ–∫–µ—Ä –æ—Ä–¥–µ—Ä–æ–≤ —Å —Ç–∞–π–º–µ—Ä–æ–º"""
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
    
    print("‚è∞ –¢–†–ï–ö–ï–† –û–†–î–ï–†–û–í –° –¢–ê–ô–ú–ï–†–û–ú")
    print("=" * 40)
    
    duration = input("‚è∞ –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300): ").strip()
    try:
        duration = int(duration) if duration else 300
    except ValueError:
        duration = 300
    
    orders_client = SpotOrdersChannel(config)
    
    try:
        if not await orders_client.connect():
            return
        
        # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if not await orders_client.authenticate():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return
            
        await asyncio.sleep(1)
        await orders_client.subscribe_orders()
        
        print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            await asyncio.wait_for(orders_client.listen(), timeout=duration)
        except asyncio.TimeoutError:
            print(f"\\n‚è∞ –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ({duration} —Å–µ–∫) –∏—Å—Ç–µ–∫–ª–æ")
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await orders_client.disconnect()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìã BITGET SPOT ORDERS CHANNEL")
    print("=" * 40)
    
    print("üîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print("1. üìã –í—Å–µ –æ—Ä–¥–µ—Ä–∞")
    print("2. üí± –û—Ä–¥–µ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã")
    print("3. ‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —Ç–∞–π–º–µ—Ä–æ–º")
    
    try:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == "1":
            await monitor_all_orders()
        elif choice == "2":
            await monitor_pair_orders()
        elif choice == "3":
            await orders_tracker_with_timer()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


if __name__ == "__main__":
    asyncio.run(main())
