#!/usr/bin/env python3
"""
Bitget Spot WebSocket - Depth Channel (Order Book)

–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ bid/ask —Ü–µ–Ω—ã –∏ –æ–±—ä–µ–º—ã.

–ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –í—ã–≤–æ–¥–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–∏—Ä–∂–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏.
–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –±–∏—Ä–∂–∏.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/spot/websocket/public/Depth-Channel

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
- asks: –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É [—Ü–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
- bids: –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É [—Ü–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
- checksum: –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
- ts: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
"""

import asyncio
import json
import ssl
import websockets
from datetime import datetime

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('/Users/timurbogatyrev/Documents/VS Code/Algo/ExchangeAPI/Bitget/config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

class SpotDepthChannel:
    def __init__(self, config):
        self.config = config
        self.ws = None        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            self.ws = await websockets.connect(
                self.config['wsURL'],
                ssl=ssl_context,
                ping_interval=30,
                ping_timeout=10
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Spot WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def subscribe_depth(self, symbol, depth_level="books5"):
        """
        –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫
        depth_level: books5, books15, books
        """
        subscribe_message = {
            "op": "subscribe",
            "args": [
                {
                    "instType": "SPOT",
                    "channel": depth_level,
                    "instId": symbol.upper()
                }
            ]
        }
        
        if self.ws:
            await self.ws.send(json.dumps(subscribe_message))
            self.symbols.append(symbol.upper())
            print(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞–∫–∞–Ω {symbol} ({depth_level})")
    
    def format_depth_data(self, data):
        """–í—ã–≤–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö JSON –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–∏—Ä–∂–∏"""
        print(json.dumps(data, indent=4, ensure_ascii=False))
    async def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –≤—ã–≤–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö JSON"""
        try:
            data = json.loads(message)
            print(json.dumps(data, indent=4, ensure_ascii=False))
            
            # –ü–∏–Ω–≥-–ø–æ–Ω–≥
            if 'ping' in data:
                pong_message = {'pong': data['ping']}
                if self.ws:
                    await self.ws.send(json.dumps(pong_message))
        
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {message}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    async def listen(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.ws:
                async for message in self.ws:
                    await self.handle_message(message)
        except websockets.exceptions.ConnectionClosed:
            print("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if self.ws:
            await self.ws.close()
            print("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket")

async def monitor_top5_depth():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
    config = load_config()
    if not config:
        return
    
    print("üìö –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–¢–ê–ö–ê–ù–ê (–¢–û–ü-5)")
    print("=" * 40)
    
    depth_client = SpotDepthChannel(config)
    
    try:
        if not await depth_client.connect():
            return
        
        symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
        if not symbol:
            symbol = "BTCUSDT"
        
        await depth_client.subscribe_depth(symbol, "books5")
        
        print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞–∫–∞–Ω–∞ {symbol} (—Ç–æ–ø-5 —É—Ä–æ–≤–Ω–µ–π)...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await depth_client.listen()
        
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await depth_client.disconnect()

async def monitor_full_depth():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
    config = load_config()
    if not config:
        return
    
    print("üìö –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–õ–ù–û–ì–û –°–¢–ê–ö–ê–ù–ê")
    print("=" * 40)
    print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü–æ–ª–Ω—ã–π —Å—Ç–∞–∫–∞–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö!")
    
    confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
    if confirm != 'y':
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    depth_client = SpotDepthChannel(config)
    
    try:
        if not await depth_client.connect():
            return
        
        symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
        if not symbol:
            symbol = "BTCUSDT"
        
        await depth_client.subscribe_depth(symbol, "books")
        
        print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞–∫–∞–Ω–∞ {symbol}...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await depth_client.listen()
        
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await depth_client.disconnect()

async def spread_monitoring():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
    config = load_config()
    if not config:
        return
    
    print("üí∞ –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ü–†–ï–î–ê")
    print("=" * 40)
    
    depth_client = SpotDepthChannel(config)
    
    try:
        if not await depth_client.connect():
            return
        
        symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
        if not symbol:
            symbol = "BTCUSDT"
        
        duration = input("‚è∞ –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60): ").strip()
        try:
            duration = int(duration) if duration else 60
        except ValueError:
            duration = 60
        
        await depth_client.subscribe_depth(symbol, "books5")
        
        print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–∞ {symbol} –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            await asyncio.wait_for(depth_client.listen(), timeout=duration)
        except asyncio.TimeoutError:
            print(f"\n‚è∞ –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ({duration} —Å–µ–∫) –∏—Å—Ç–µ–∫–ª–æ")
        
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await depth_client.disconnect()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("CHANNEL") (JSON)
    print("=" * 40)
    
    print("üîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print("1. üìö –°—Ç–∞–∫–∞–Ω —Ç–æ–ø-5 —É—Ä–æ–≤–Ω–µ–π")
    print("2. üìñ –ü–æ–ª–Ω—ã–π —Å—Ç–∞–∫–∞–Ω")
    print("3. üí∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–∞")
    
    try:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == "1":
            await monitor_top5_depth()
        elif choice == "2":
            await monitor_full_depth()
        elif choice == "3":
            await spread_monitoring()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())
