#!/usr/bin/env python3
"""
Bitget Spot WebSocket - Ticker Channel (Public)

–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Å–ø–æ—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/spot/websocket/public/Tickers-Channel

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
- instId: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
- last: –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞
- open24h: —Ü–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è 24—á –Ω–∞–∑–∞–¥  
- high24h: –º–∞–∫—Å–∏–º—É–º –∑–∞ 24—á
- low24h: –º–∏–Ω–∏–º—É–º –∑–∞ 24—á
- bestBid: –ª—É—á—à–∏–π –±–∏–¥
- bestAsk: –ª—É—á—à–∏–π –∞—Å–∫
- baseVolume: –æ–±—ä–µ–º –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ –∑–∞ 24—á
- quoteVolume: –æ–±—ä–µ–º –≤ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç–µ –∑–∞ 24—á
- ts: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
- change24h: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
"""

import asyncio
import json
import ssl
import websockets
from datetime import datetime


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('/Users/timurbogatyrev/Documents/VS Code/Algo/ExchangeAPI/Bitget/config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None


class SpotTickerChannel:
    def __init__(self, config):
        self.config = config
        self.ws = None
        self.ticker_data = {}
        self.update_count = 0
        self.price_changes = {}
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π WebSocket URL
            public_ws_url = self.config.get('wsURL', 'wss://ws.bitget.com/v2/ws/public')
            
            self.ws = await websockets.connect(
                public_ws_url,
                ssl=ssl_context,
                ping_interval=30,
                ping_timeout=10
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Public WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def subscribe_ticker(self, symbol=None):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã"""
        if symbol:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞—Ä—É
            subscribe_message = {
                "op": "subscribe",
                "args": [
                    {
                        "instType": "SPOT",
                        "channel": "ticker",
                        "instId": symbol
                    }
                ]
            }
            print(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä {symbol}")
        else:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —Ç–∏–∫–µ—Ä—ã
            subscribe_message = {
                "op": "subscribe", 
                "args": [
                    {
                        "instType": "SPOT",
                        "channel": "ticker",
                        "instId": "default"
                    }
                ]
            }
            print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —Ç–∏–∫–µ—Ä—ã")
        
        if self.ws:
            await self.ws.send(json.dumps(subscribe_message))
    
    def format_ticker_data(self, data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤"""
        if not data or 'data' not in data:
            return
        
        for ticker in data['data']:
            self.update_count += 1
            
            inst_id = ticker.get('instId', 'N/A')
            last = float(ticker.get('last', 0))
            open_24h = float(ticker.get('open24h', 0))
            high_24h = float(ticker.get('high24h', 0))
            low_24h = float(ticker.get('low24h', 0))
            best_bid = float(ticker.get('bestBid', 0))
            best_ask = float(ticker.get('bestAsk', 0))
            base_volume = float(ticker.get('baseVolume', 0))
            quote_volume = float(ticker.get('quoteVolume', 0))
            change_24h = float(ticker.get('change24h', 0))
            ts = ticker.get('ts', 0)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            prev_price = self.ticker_data.get(inst_id, {}).get('last', last)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞
            self.ticker_data[inst_id] = {
                'last': last,
                'open24h': open_24h,
                'high24h': high_24h,
                'low24h': low_24h,
                'bestBid': best_bid,
                'bestAsk': best_ask,
                'baseVolume': base_volume,
                'quoteVolume': quote_volume,
                'change24h': change_24h,
                'ts': ts,
                'prev_price': prev_price,
                'last_update': datetime.now()
            }
            
            # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            if last > prev_price:
                price_direction = "üìà"
                price_color = "üü¢"
            elif last < prev_price:
                price_direction = "üìâ" 
                price_color = "üî¥"
            else:
                price_direction = "‚û°Ô∏è"
                price_color = "‚ö™"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            if ts:
                dt = datetime.fromtimestamp(int(ts) / 1000)
                time_str = dt.strftime("%H:%M:%S.%f")[:-3]
            else:
                time_str = datetime.now().strftime("%H:%M:%S.%f")[:-3]
            
            # –†–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞
            spread = best_ask - best_bid if best_ask > 0 and best_bid > 0 else 0
            spread_percent = (spread / last) * 100 if last > 0 else 0
            
            print(f"\\n{price_color} [{time_str}] SPOT TICKER #{self.update_count}")
            print(f"üí± {inst_id}")
            print(f"{price_direction} –¶–µ–Ω–∞: ${last:,.6f}")
            print(f"üìä 24—á: ${change_24h:+.2f}% (${open_24h:,.6f} ‚Üí ${last:,.6f})")
            print(f"üìà –ú–∞–∫—Å: ${high_24h:,.6f} ‚îÇ üìâ –ú–∏–Ω: ${low_24h:,.6f}")
            print(f"üí∞ –ë–∏–¥: ${best_bid:,.6f} ‚îÇ üí∏ –ê—Å–∫: ${best_ask:,.6f}")
            print(f"üìè –°–ø—Ä–µ–¥: ${spread:,.6f} ({spread_percent:.4f}%)")
            print(f"ÔøΩ –û–±—ä–µ–º: {base_volume:,.2f} {inst_id.split('USDT')[0]} (${quote_volume:,.2f})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∫–∞–∂–¥—ã–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if self.update_count % 10 == 0:
                self.show_market_summary()
            
            print("‚îÄ" * 60)
    
    def show_market_summary(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É —Ä—ã–Ω–∫–∞"""
        if not self.ticker_data:
            return
        
        print(f"\\nüìä –°–í–û–î–ö–ê –†–´–ù–ö–ê SPOT (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')})")
        print("=" * 70)
        
        # –¢–æ–ø 5 –ø–æ –æ–±—ä–µ–º—É
        top_volume = sorted(
            self.ticker_data.items(),
            key=lambda x: x[1]['quoteVolume'],
            reverse=True
        )[:5]
        
        print("üí∞ –¢–û–ü 5 –ü–û –û–ë–™–ï–ú–£:")
        for symbol, data in top_volume:
            print(f"   {symbol}: ${data['quoteVolume']:,.0f} (${data['last']:,.6f})")
        
        # –¢–æ–ø 5 —Ä–∞—Å—Ç—É—â–∏—Ö
        top_gainers = sorted(
            self.ticker_data.items(),
            key=lambda x: x[1]['change24h'],
            reverse=True
        )[:5]
        
        print("\\nüöÄ –¢–û–ü 5 –†–ê–°–¢–£–©–ò–•:")
        for symbol, data in top_gainers:
            print(f"   {symbol}: +{data['change24h']:.2f}% (${data['last']:,.6f})")
        
        # –¢–æ–ø 5 –ø–∞–¥–∞—é—â–∏—Ö
        top_losers = sorted(
            self.ticker_data.items(),
            key=lambda x: x[1]['change24h']
        )[:5]
        
        print("\\nüìâ –¢–û–ü 5 –ü–ê–î–ê–Æ–©–ò–•:")
        for symbol, data in top_losers:
            print(f"   {symbol}: {data['change24h']:.2f}% (${data['last']:,.6f})")
        
        print(f"\\nüìà –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(self.ticker_data)}")
        print(f"üîÑ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.update_count}")
    
    async def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            data = json.loads(message)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
            if data.get('event') == 'subscribe':
                if str(data.get('code')) == '0':
                    channel = data.get('arg', {}).get('channel', 'unknown')
                    print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞: {channel}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {data.get('msg', 'Unknown error')}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
            elif data.get('action') in ['snapshot', 'update']:
                channel = data.get('arg', {}).get('channel', '')
                if channel == 'ticker':
                    self.format_ticker_data(data)
            
            # –ü–∏–Ω–≥-–ø–æ–Ω–≥
            elif 'ping' in data:
                pong_message = {'pong': data['ping']}
                if self.ws:
                    await self.ws.send(json.dumps(pong_message))
        
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {message}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def listen(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.ws:
                async for message in self.ws:
                    await self.handle_message(message)
        except websockets.exceptions.ConnectionClosed:
            print("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if self.ws:
            await self.ws.close()
            print(f"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket. –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.update_count}")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
            self.show_market_summary()


async def monitor_specific_ticker():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞"""
    config = load_config()
    if not config:
        return
    
    symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä BTCUSDT) –∏–ª–∏ Enter –¥–ª—è –≤—Å–µ—Ö: ").strip().upper()
    if not symbol:
        symbol = None
    
    print("üìà –ú–û–ù–ò–¢–û–†–ò–ù–ì SPOT –¢–ò–ö–ï–†–û–í")
    print("=" * 40)
    
    ticker_client = SpotTickerChannel(config)
    
    try:
        if not await ticker_client.connect():
            return
        
        await ticker_client.subscribe_ticker(symbol)
        
        print("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∏–∫–µ—Ä–æ–≤...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await ticker_client.listen()
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await ticker_client.disconnect()


async def market_scanner():
    """–°–∫–∞–Ω–µ—Ä —Ä—ã–Ω–∫–∞"""
    config = load_config()
    if not config:
        return
    
    print("üîç –°–ö–ê–ù–ï–† –†–´–ù–ö–ê SPOT")
    print("=" * 40)
    
    duration = input("‚è∞ –í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300): ").strip()
    try:
        duration = int(duration) if duration else 300
    except ValueError:
        duration = 300
    
    ticker_client = SpotTickerChannel(config)
    
    try:
        if not await ticker_client.connect():
            return
        
        await ticker_client.subscribe_ticker()  # –í—Å–µ —Ç–∏–∫–µ—Ä—ã
        
        print(f"üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            await asyncio.wait_for(ticker_client.listen(), timeout=duration)
        except asyncio.TimeoutError:
            print(f"\\n‚è∞ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({duration} —Å–µ–∫)")
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if ticker_client.ticker_data:
                print(f"\\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø:")
                print(f"üí± –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: {len(ticker_client.ticker_data)}")
                print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {ticker_client.update_count}")
                
                # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                high_volatility = [
                    (symbol, data) for symbol, data in ticker_client.ticker_data.items()
                    if abs(data['change24h']) > 10
                ]
                
                if high_volatility:
                    print(f"\\n‚ö° –í–´–°–û–ö–ê–Ø –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨ (>10%):")
                    for symbol, data in high_volatility[:10]:
                        print(f"   {symbol}: {data['change24h']:+.2f}%")
                
                ticker_client.show_market_summary()
            else:
                print("ÔøΩ –î–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
        
    except KeyboardInterrupt:
        print("\\nüëã –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    finally:
        await ticker_client.disconnect()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìà BITGET SPOT TICKER CHANNEL")
    print("=" * 40)
    
    print("üîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print("1. üìà –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä")
    print("2. üîç –°–∫–∞–Ω–µ—Ä —Ä—ã–Ω–∫–∞")
    
    try:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
        
        if choice == "1":
            await monitor_specific_ticker()
        elif choice == "2":
            await market_scanner()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


if __name__ == "__main__":
    asyncio.run(main())

