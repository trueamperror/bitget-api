#!/usr/bin/env python3
"""
Bitget Spot WebSocket - Ticker Channel (Public)

–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Å–ø–æ—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

–ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –í—ã–≤–æ–¥–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–∏—Ä–∂–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏.
–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –±–∏—Ä–∂–∏.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/spot/websocket/public/Tickers-Channel

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
- instId: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
- last: –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞
- open24h: —Ü–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è 24—á –Ω–∞–∑–∞–¥  
- high24h: –º–∞–∫—Å–∏–º—É–º –∑–∞ 24—á
- low24h: –º–∏–Ω–∏–º—É–º –∑–∞ 24—á
- bestBid: –ª—É—á—à–∏–π –±–∏–¥
- bestAsk: –ª—É—á—à–∏–π –∞—Å–∫
- baseVolume: –æ–±—ä–µ–º –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ –∑–∞ 24—á
- quoteVolume: –æ–±—ä–µ–º –≤ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç–µ –∑–∞ 24—á
- ts: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
- change24h: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
"""

import asyncio
import json
import ssl
import websockets
from datetime import datetime

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('/Users/timurbogatyrev/Documents/VS Code/Algo/ExchangeAPI/Bitget/config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

class SpotTickerChannel:
    def __init__(self, config):
        self.config = config
        self.ws = None        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π WebSocket URL
            public_ws_url = self.config.get('wsURL', 'wss://ws.bitget.com/v2/ws/public')
            
            self.ws = await websockets.connect(
                public_ws_url,
                ssl=ssl_context,
                ping_interval=30,
                ping_timeout=10
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Public WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def subscribe_ticker(self, symbol=None):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã"""
        if symbol:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞—Ä—É
            subscribe_message = {
                "op": "subscribe",
                "args": [
                    {
                        "instType": "SPOT",
                        "channel": "ticker",
                        "instId": symbol
                    }
                ]
            }
            print(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä {symbol}")
        else:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —Ç–∏–∫–µ—Ä—ã
            subscribe_message = {
                "op": "subscribe", 
                "args": [
                    {
                        "instType": "SPOT",
                        "channel": "ticker",
                        "instId": "default"
                    }
                ]
            }
            print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —Ç–∏–∫–µ—Ä—ã")
        
        if self.ws:
            await self.ws.send(json.dumps(subscribe_message))
    
    def format_ticker_data(self, data):
        """–í—ã–≤–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö JSON –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–∏—Ä–∂–∏"""
        print(json.dumps(data, indent=4, ensure_ascii=False))
    def show_market_summary(self, *args, **kwargs):
        """–ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
        pass
    async def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –≤—ã–≤–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö JSON"""
        try:
            data = json.loads(message)
            print(json.dumps(data, indent=4, ensure_ascii=False))
            
            # –ü–∏–Ω–≥-–ø–æ–Ω–≥
            if 'ping' in data:
                pong_message = {'pong': data['ping']}
                if self.ws:
                    await self.ws.send(json.dumps(pong_message))
        
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {message}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    async def listen(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.ws:
                async for message in self.ws:
                    await self.handle_message(message)
        except websockets.exceptions.ConnectionClosed:
            print("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if self.ws:
            await self.ws.close()
            print("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket")

async def monitor_specific_ticker():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
    config = load_config()
    if not config:
        return
    
    symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä BTCUSDT) –∏–ª–∏ Enter –¥–ª—è –≤—Å–µ—Ö: ").strip().upper()
    if not symbol:
        symbol = None
    
    print("üìà –ú–û–ù–ò–¢–û–†–ò–ù–ì SPOT –¢–ò–ö–ï–†–û–í")
    print("=" * 40)
    
    ticker_client = SpotTickerChannel(config)
    
    try:
        if not await ticker_client.connect():
            return
        
        await ticker_client.subscribe_ticker(symbol)
        
        print("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∏–∫–µ—Ä–æ–≤...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await ticker_client.listen()
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await ticker_client.disconnect()

async def market_scanner():
    """–°–∫–∞–Ω–µ—Ä —Ä—ã–Ω–∫–∞"""
    config = load_config()
    if not config:
        return
    
    print("üîç –°–ö–ê–ù–ï–† –†–´–ù–ö–ê SPOT")
    print("=" * 40)
    
    duration = input("‚è∞ –í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300): ").strip()
    try:
        duration = int(duration) if duration else 300
    except ValueError:
        duration = 300
    
    ticker_client = SpotTickerChannel(config)
    
    try:
        if not await ticker_client.connect():
            return
        
        await ticker_client.subscribe_ticker()  # –í—Å–µ —Ç–∏–∫–µ—Ä—ã
        
        print(f"üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            await asyncio.wait_for(ticker_client.listen(), timeout=duration)
        except asyncio.TimeoutError:
            print(f"\\n‚è∞ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({duration} —Å–µ–∫)")
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if ticker_client.ticker_data:
                print(f"\\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø:")
                print(f"üí± –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: {len(ticker_client.ticker_data)}")
                print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {ticker_client.update_count}")
                
                # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                high_volatility = [
                    (symbol, data) for symbol, data in ticker_client.ticker_data.items()
                    if abs(data['change24h']) > 10
                ]
                
                if high_volatility:
                    print(f"\\n‚ö° –í–´–°–û–ö–ê–Ø –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨ (>10%):")
                    for symbol, data in high_volatility[:10]:
                        print(f"   {symbol}: {data['change24h']:+.2f}%")
                
                ticker_client.show_market_summary()
            else:
                print("ÔøΩ –î–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
        
    except KeyboardInterrupt:
        print("\\nüëã –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    finally:
        await ticker_client.disconnect()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("CHANNEL") (JSON)
    print("=" * 40)
    
    print("üîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print("1. üìà –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä")
    print("2. üîç –°–∫–∞–Ω–µ—Ä —Ä—ã–Ω–∫–∞")
    
    try:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
        
        if choice == "1":
            await monitor_specific_ticker()
        elif choice == "2":
            await market_scanner()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())

