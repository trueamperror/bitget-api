#!/usr/bin/env python3
"""
Bitget USDT Perpetual Futures WebSocket - Trades Channel

–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—Ä–≥–∞—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Å —Ü–µ–Ω–∞–º–∏ –∏ –æ–±—ä–µ–º–∞–º–∏.

–ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –í—ã–≤–æ–¥–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–∏—Ä–∂–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏.
–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –±–∏—Ä–∂–∏.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/contract/websocket/public/Trades-Channel

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
- tradeId: ID —Å–¥–µ–ª–∫–∏
- price: —Ü–µ–Ω–∞ —Å–¥–µ–ª–∫–∏
- size: —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
- side: —Å—Ç–æ—Ä–æ–Ω–∞ (buy/sell)
- ts: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
"""

import asyncio
import json
import ssl
import websockets
from datetime import datetime

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('/Users/timurbogatyrev/Documents/VS Code/Algo/ExchangeAPI/Bitget/config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

class FuturesTradesChannel:
    def __init__(self, config):
        self.config = config
        self.ws = None
        self.symbols = []
        self.trade_stats = {}
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π WebSocket URL
            futures_ws_url = self.config.get('futuresWsURL', 'wss://ws.bitget.com/v2/ws/public')
            
            self.ws = await websockets.connect(
                futures_ws_url,
                ssl=ssl_context,
                ping_interval=30,
                ping_timeout=10
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Futures WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def subscribe_trades(self, symbol):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ—Ä–≥–∏ —Ñ—å—é—á–µ—Ä—Å–∞"""
        subscribe_message = {
            "op": "subscribe",
            "args": [
                {
                    "instType": "USDT-FUTURES",
                    "channel": "trade",
                    "instId": symbol.upper()
                }
            ]
        }
        
        if self.ws:
            await self.ws.send(json.dumps(subscribe_message))
            self.symbols.append(symbol.upper())
            self.trade_stats[symbol.upper()] = {
                'buy_count': 0,
                'sell_count': 0,
                'buy_volume': 0,
                'sell_volume': 0,
                'buy_value': 0,
                'sell_value': 0,
                'last_price': 0,
                'price_high': 0,
                'price_low': float('inf'),
                'large_trades': 0,  # –°–¥–µ–ª–∫–∏ > 10000 USDT
                'avg_trade_size': 0
            }
            print(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ—Ä–≥–∏ —Ñ—å—é—á–µ—Ä—Å–∞ {symbol}")
    
    def format_trade_data(self, data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤"""
        if not data or 'data' not in data:
            return
        
        for trade in data['data']:
            self.trade_count += 1
            
            symbol = data.get('arg', {}).get('instId', 'N/A')
            trade_id = trade.get('tradeId', 'N/A')
            price = float(trade.get('price', 0))
            size = float(trade.get('size', 0))  # –†–∞–∑–º–µ—Ä –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
            side = trade.get('side', 'unknown')
            ts = trade.get('ts', 0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if symbol in self.trade_stats:
                stats = self.trade_stats[symbol]
                stats['last_price'] = price
                stats['price_high'] = max(stats['price_high'], price)
                stats['price_low'] = min(stats['price_low'], price)
                
                # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ USDT (–¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ = —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD)
                trade_value = price * size
                
                if side == 'buy':
                    stats['buy_count'] += 1
                    stats['buy_volume'] += size
                    stats['buy_value'] += trade_value
                else:
                    stats['sell_count'] += 1
                    stats['sell_volume'] += size
                    stats['sell_value'] += trade_value
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä—É–ø–Ω–æ–π —Å–¥–µ–ª–∫–∏
                if trade_value > 10000:
                    stats['large_trades'] += 1
                
                # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏
                total_trades = stats['buy_count'] + stats['sell_count']
                total_value = stats['buy_value'] + stats['sell_value']
                stats['avg_trade_size'] = total_value / total_trades if total_trades > 0 else 0
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            if ts:
                dt = datetime.fromtimestamp(int(ts) / 1000)
                time_str = dt.strftime("%H:%M:%S.%f")[:-3]
            else:
                time_str = datetime.now().strftime("%H:%M:%S.%f")[:-3]
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω—ã —Å–¥–µ–ª–∫–∏
            side_emoji = "üü¢" if side == "buy" else "üî¥"
            side_text = "LONG" if side == "buy" else "SHORT"
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            trade_value = price * size
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–¥–µ–ª–∫–∏
            size_indicator = ""
            if trade_value > 50000:
                size_indicator = "üêã"  # –ö–∏—Ç
            elif trade_value > 10000:
                size_indicator = "ü¶à"  # –ê–∫—É–ª–∞
            elif trade_value > 1000:
                size_indicator = "üêü"  # –†—ã–±–∞
            else:
                size_indicator = "ü¶ê"  # –ö—Ä–µ–≤–µ—Ç–∫–∞
            
            print(f"‚ö° [{time_str}] FUTURES TRADE #{self.trade_count}")
            print(f"üí± {symbol} ‚îÇ ID: {trade_id}")
            print(f"{side_emoji} {side_text} ‚îÇ ${price:,.4f} √ó {size:,.0f} = ${trade_value:,.2f} {size_indicator}")
            
    def show_trade_statistics(self):
        """–ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
        pass
    
    async def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –≤—ã–≤–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö JSON"""
        try:
            data = json.loads(message)
            print(json.dumps(data, indent=4, ensure_ascii=False))
            
            # –ü–∏–Ω–≥-–ø–æ–Ω–≥
            if 'ping' in data:
                pong_message = {'pong': data['ping']}
                if self.ws:
                    await self.ws.send(json.dumps(pong_message))
        
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {message}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    async def listen(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.ws:
                async for message in self.ws:
                    await self.handle_message(message)
        except websockets.exceptions.ConnectionClosed:
            print("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if self.ws:
            await self.ws.close()
            print("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket")

async def monitor_single_futures_trades():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
    config = load_config()
    if not config:
        return
    
    print("‚ö° –ú–û–ù–ò–¢–û–†–ò–ù–ì FUTURES –¢–û–†–ì–û–í")
    print("=" * 40)
    
    trades_client = FuturesTradesChannel(config)
    
    try:
        if not await trades_client.connect():
            return
        
        symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª —Ñ—å—é—á–µ—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
        if not symbol:
            symbol = "BTCUSDT"
        
        await trades_client.subscribe_trades(symbol)
        
        print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤ {symbol}...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await trades_client.listen()
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await trades_client.disconnect()

async def monitor_multiple_futures_trades():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
    config = load_config()
    if not config:
        return
    
    print("‚ö° –ú–û–ù–ò–¢–û–†–ò–ù–ì FUTURES –¢–û–†–ì–û–í (–ù–ï–°–ö–û–õ–¨–ö–û)")
    print("=" * 40)
    
    trades_client = FuturesTradesChannel(config)
    
    try:
        if not await trades_client.connect():
            return
        
        symbols_input = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT,ETHUSDT): ").strip()
        if not symbols_input:
            symbols = ["BTCUSDT", "ETHUSDT"]
        else:
            symbols = [s.strip().upper() for s in symbols_input.split(',')]
        
        for symbol in symbols:
            await trades_client.subscribe_trades(symbol)
            await asyncio.sleep(0.1)
        
        print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤ –¥–ª—è {len(symbols)} —Ñ—å—é—á–µ—Ä—Å–æ–≤...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await trades_client.listen()
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await trades_client.disconnect()

async def whale_trades_monitor():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
    config = load_config()
    if not config:
        return
    
    print("üêã –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–†–£–ü–ù–´–• –°–î–ï–õ–û–ö")
    print("=" * 40)
    
    trades_client = FuturesTradesChannel(config)
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    original_format = trades_client.format_trade_data
    
    def whale_format_trade_data(data):
        """–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏"""
        if not data or 'data' not in data:
            return
        
        for trade in data['data']:
            price = float(trade.get('price', 0))
            size = float(trade.get('size', 0))
            trade_value = price * size
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–¥–µ–ª–∫–∏ –±–æ–ª—å—à–µ 10000 USDT
            if trade_value >= 10000:
                original_format(data)
                break
    
    trades_client.format_trade_data = whale_format_trade_data
    
    try:
        if not await trades_client.connect():
            return
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å—ã
        symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT"]
        
        for symbol in symbols:
            await trades_client.subscribe_trades(symbol)
            await asyncio.sleep(0.1)
        
        min_amount = input("üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –≤ USDT (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000): ").strip()
        try:
            min_amount = float(min_amount) if min_amount else 10000
        except ValueError:
            min_amount = 10000
        
        print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (>= ${min_amount:,.0f})...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await trades_client.listen()
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await trades_client.disconnect()

async def market_pressure_analysis():
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ JSON"""
    config = load_config()
    if not config:
        return
    
    print("üìà –ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–û–ì–û –î–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 40)
    
    trades_client = FuturesTradesChannel(config)
    
    try:
        if not await trades_client.connect():
            return
        
        symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
        if not symbol:
            symbol = "BTCUSDT"
        
        duration = input("‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300): ").strip()
        try:
            duration = int(duration) if duration else 300
        except ValueError:
            duration = 300
        
        await trades_client.subscribe_trades(symbol)
        
        print(f"üîÑ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è {symbol} –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            await asyncio.wait_for(trades_client.listen(), timeout=duration)
        except asyncio.TimeoutError:
            print(f"\\n‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω ({duration} —Å–µ–∫)")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if symbol in trades_client.trade_stats:
                stats = trades_client.trade_stats[symbol]
                total_value = stats['buy_value'] + stats['sell_value']
                
                if total_value > 0:
                    buy_dominance = (stats['buy_value'] / total_value) * 100
                    sell_dominance = (stats['sell_value'] / total_value) * 100
                    
                    print(f"\\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
                    print(f"üü¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {buy_dominance:.2f}%")
                    print(f"üî¥ –ü—Ä–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {sell_dominance:.2f}%")
                    
                    if buy_dominance > 65:
                        print("üöÄ –°–ò–õ–¨–ù–û–ï –í–û–°–•–û–î–Ø–©–ï–ï –î–ê–í–õ–ï–ù–ò–ï")
                    elif sell_dominance > 65:
                        print("üìâ –°–ò–õ–¨–ù–û–ï –ù–ò–°–•–û–î–Ø–©–ï–ï –î–ê–í–õ–ï–ù–ò–ï")
                    else:
                        print("‚öñÔ∏è –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ô –†–´–ù–û–ö")
                else:
                    print("üì≠ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
    except KeyboardInterrupt:
        print("\\nüëã –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await trades_client.disconnect()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üí• BITGET FUTURES TRADES CHANNEL (JSON)")
    print("=" * 40)
    
    print("üîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print("1. ‚ö° –û–¥–∏–Ω —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç")
    print("2. üìä –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
    print("3. üêã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
    print("4. üìà –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è")
    
    try:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
        
        if choice == "1":
            await monitor_single_futures_trades()
        elif choice == "2":
            await monitor_multiple_futures_trades()
        elif choice == "3":
            await whale_trades_monitor()
        elif choice == "4":
            await market_pressure_analysis()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())
