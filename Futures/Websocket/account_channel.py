#!/usr/bin/env python3
"""
Bitget USDT Perpetual Futures WebSocket - Account Channel (Private)

–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/contract/websocket/private/Account-Channel

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
- marginCoin: –≤–∞–ª—é—Ç–∞ –º–∞—Ä–∂–∏ (–æ–±—ã—á–Ω–æ USDT)
- locked: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
- available: –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
- crossMargin: –∫—Ä–æ—Å—Å-–º–∞—Ä–∂–∞
- isolatedMargin: –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞
- maxOpenPosAvailable: –º–∞–∫—Å. –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
- equity: —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
- upl: –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
"""

import asyncio
import json
import ssl
import websockets
import hmac
import hashlib
import base64
import time
from datetime import datetime


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('/Users/timurbogatyrev/Documents/VS Code/Algo/ExchangeAPI/Bitget/config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None


class FuturesAccountChannel:
    def __init__(self, config):
        self.config = config
        self.ws = None
        self.account_data = {}
        self.update_count = 0
        self.balance_history = []
        
    def generate_signature(self, timestamp, method, request_path, body=''):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Bitget"""
        # –î–ª—è WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        message = f"{timestamp}{method}{request_path}{body}"
        
        signature = hmac.new(
            self.config['secretKey'].encode('utf-8'),
            message.encode('utf-8'),
            hashlib.sha256
        ).digest()
        return base64.b64encode(signature).decode('utf-8')
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π URL –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            private_futures_ws_url = 'wss://ws.bitget.com/v2/ws/private'
            
            self.ws = await websockets.connect(
                private_futures_ws_url,
                ssl=ssl_context,
                ping_interval=30,
                ping_timeout=10
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Private Futures WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        timestamp = str(int(time.time()))
        method = 'GET'
        request_path = '/user/verify'
        
        signature = self.generate_signature(timestamp, method, request_path)
        
        auth_message = {
            "op": "login",
            "args": [
                {
                    "apiKey": self.config['apiKey'],
                    "passphrase": self.config['passphrase'],
                    "timestamp": timestamp,
                    "sign": signature
                }
            ]
        }
        
        if self.ws:
            await self.ws.send(json.dumps(auth_message))
            print("üîê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                response = await asyncio.wait_for(self.ws.recv(), timeout=10)
                data = json.loads(response)
                if data.get('event') == 'login':
                    if str(data.get('code')) == '0':  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {data.get('msg', 'Unknown error')}")
                        return False
                else:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
                    return False
            except asyncio.TimeoutError:
                print("‚ùå –¢–∞–π–º–∞—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
                return False
        
        return False
    
    async def subscribe_account(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        subscribe_message = {
            "op": "subscribe",
            "args": [
                {
                    "instType": "USDT-FUTURES",
                    "channel": "account",
                    "coin": "default"  # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "coin" –∞ –Ω–µ "instId"
                }
            ]
        }
        
        if self.ws:
            print(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {subscribe_message}")
            await self.ws.send(json.dumps(subscribe_message))
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            try:
                response = await asyncio.wait_for(self.ws.recv(), timeout=5)
                data = json.loads(response)
                
                if data.get('event') == 'subscribe':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
                    if 'code' in data:
                        if str(data.get('code')) == '0':
                            print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                            return True
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {data.get('msg', 'Unknown error')}")
                            print(f"‚ùå Debug: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
                            return False
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è code, –Ω–æ –µ—Å—Ç—å arg - –∑–Ω–∞—á–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞
                        if 'arg' in data:
                            print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (–±–µ–∑ code)")
                            return True
                        else:
                            print(f"ü§î –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {data}")
                            return False
                elif data.get('action') == 'snapshot':
                    # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ä–∞–∑—É –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                    print("üìä –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞")
                    await self.handle_message(json.dumps(data))
                    return True
                else:
                    print(f"ü§î –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
                    return False
                    
            except asyncio.TimeoutError:
                print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
                return False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                return False
        
        return False
    
    def format_account_data(self, data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if not data or 'data' not in data:
            return
        
        self.update_count += 1
        
        for account_update in data['data']:
            margin_coin = account_update.get('marginCoin', 'N/A')
            # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Bitget, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —ç—Ç–∏ –ø–æ–ª—è
            frozen = float(account_update.get('frozen', 0))  # –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
            available = float(account_update.get('available', 0))  # –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
            max_open_pos = float(account_update.get('maxOpenPosAvailable', 0))
            max_transfer_out = float(account_update.get('maxTransferOut', 0))
            equity = float(account_update.get('equity', 0))  # —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
            usdt_equity = float(account_update.get('usdtEquity', 0))  # –∫–∞–ø–∏—Ç–∞–ª –≤ USDT
            crossed_risk_rate = float(account_update.get('crossedRiskRate', 0))  # —Ä–∏—Å–∫ –≤ –∫—Ä–æ—Å—Å-—Ä–µ–∂–∏–º–µ
            unrealized_pl = float(account_update.get('unrealizedPL', 0))  # –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
            update_time = account_update.get('ts', 0)  # –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            self.account_data[margin_coin] = {
                'frozen': frozen,
                'available': available,
                'maxOpenPosAvailable': max_open_pos,
                'maxTransferOut': max_transfer_out,
                'equity': equity,
                'usdtEquity': usdt_equity,
                'crossedRiskRate': crossed_risk_rate,
                'unrealizedPL': unrealized_pl,
                'updateTime': update_time,
                'last_update': datetime.now()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞
            self.balance_history.append({
                'equity': equity,
                'unrealizedPL': unrealized_pl,
                'available': available,
                'timestamp': datetime.now()
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(self.balance_history) > 100:
                self.balance_history = self.balance_history[-50:]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            if update_time:
                dt = datetime.fromtimestamp(int(update_time) / 1000)
                time_str = dt.strftime("%H:%M:%S.%f")[:-3]
            else:
                time_str = datetime.now().strftime("%H:%M:%S.%f")[:-3]
            
            # –û–±—â–∏–π –±–∞–ª–∞–Ω—Å
            total_balance = available + frozen
            
            print(f"\\nüí∞ [{time_str}] FUTURES –ê–ö–ö–ê–£–ù–¢ #{self.update_count}")
            print(f"ü™ô –í–∞–ª—é—Ç–∞: {margin_coin}")
            print(f"üíµ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${equity:,.2f}")
            print(f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: ${available:,.2f}")
            print(f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${frozen:,.2f}")
            print(f"üìä –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_balance:,.2f}")
            
            # PnL –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            upl_emoji = "üü¢" if unrealized_pl >= 0 else "üî¥"
            print(f"{upl_emoji} –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: ${unrealized_pl:+,.2f}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if max_open_pos > 0:
                print(f"üéØ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π: ${max_open_pos:,.2f}")
                pos_percentage = (max_open_pos / equity) * 100 if equity > 0 else 0
                print(f"ÔøΩ % –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞: {pos_percentage:.2f}%")
            
            if max_transfer_out > 0:
                print(f"ÔøΩ –ú–∞–∫—Å. –≤—ã–≤–æ–¥: ${max_transfer_out:,.2f}")
            
            if crossed_risk_rate > 0:
                print(f"‚ö†Ô∏è –†–∏—Å–∫ –∫—Ä–æ—Å—Å-–º–∞—Ä–∂–∏: {crossed_risk_rate:.4f}")
            
            if usdt_equity != equity:
                print(f"ÔøΩ –ö–∞–ø–∏—Ç–∞–ª –≤ USDT: ${usdt_equity:,.2f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if self.update_count % 10 == 0:
                self.show_account_analytics()
            
            print("‚îÄ" * 50)
    
    def show_account_analytics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if len(self.balance_history) < 5:
            return
        
        print(f"\\nüìà –ê–ù–ê–õ–ò–¢–ò–ö–ê –ê–ö–ö–ê–£–ù–¢–ê (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')})")
        print("=" * 60)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 10 –∑–∞–ø–∏—Å—è–º
        recent_history = self.balance_history[-10:]
        
        equity_values = [entry['equity'] for entry in recent_history]
        upl_values = [entry['unrealizedPL'] for entry in recent_history]
        
        if len(equity_values) > 1:
            equity_change = equity_values[-1] - equity_values[0]
            equity_change_percent = (equity_change / equity_values[0]) * 100 if equity_values[0] > 0 else 0
            
            avg_equity = sum(equity_values) / len(equity_values)
            max_equity = max(equity_values)
            min_equity = min(equity_values)
            
            print(f"üí∞ –î–∏–Ω–∞–º–∏–∫–∞ –∫–∞–ø–∏—Ç–∞–ª–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(equity_values)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π):")
            print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${equity_change:+,.2f} ({equity_change_percent:+.2f}%)")
            print(f"   –°—Ä–µ–¥–Ω–∏–π: ${avg_equity:,.2f}")
            print(f"   –ú–∞–∫—Å–∏–º—É–º: ${max_equity:,.2f}")
            print(f"   –ú–∏–Ω–∏–º—É–º: ${min_equity:,.2f}")
        
        # –ê–Ω–∞–ª–∏–∑ PnL
        if upl_values:
            current_upl = upl_values[-1]
            max_upl = max(upl_values)
            min_upl = min(upl_values)
            
            print(f"\\nüìä –ê–Ω–∞–ª–∏–∑ PnL:")
            print(f"   –¢–µ–∫—É—â–∏–π: ${current_upl:+,.2f}")
            print(f"   –õ—É—á—à–∏–π: ${max_upl:+,.2f}")
            print(f"   –•—É–¥—à–∏–π: ${min_upl:+,.2f}")
            print(f"   –†–∞–∑–º–∞—Ö: ${max_upl - min_upl:,.2f}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        if len(equity_values) >= 3:
            recent_trend = equity_values[-3:]
            if all(recent_trend[i] <= recent_trend[i+1] for i in range(len(recent_trend)-1)):
                trend = "üìà –í–û–°–•–û–î–Ø–©–ò–ô"
            elif all(recent_trend[i] >= recent_trend[i+1] for i in range(len(recent_trend)-1)):
                trend = "üìâ –ù–ò–°–•–û–î–Ø–©–ò–ô"
            else:
                trend = "üìä –ë–û–ö–û–í–û–ô"
            
            print(f"\\nüìà –¢—Ä–µ–Ω–¥ –∫–∞–ø–∏—Ç–∞–ª–∞: {trend}")
        
        # –†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏
        current_account = list(self.account_data.values())[0] if self.account_data else None
        if current_account:
            equity = current_account['equity']
            crossed_risk_rate = current_account['crossedRiskRate']
            
            if equity > 0 and crossed_risk_rate > 0:
                risk_level = ""
                
                if crossed_risk_rate < 0.1:
                    risk_level = "üü¢ –ù–ò–ó–ö–ò–ô"
                elif crossed_risk_rate < 0.3:
                    risk_level = "üü° –£–ú–ï–†–ï–ù–ù–´–ô"
                elif crossed_risk_rate < 0.5:
                    risk_level = "üü† –ü–û–í–´–®–ï–ù–ù–´–ô"
                else:
                    risk_level = "üî¥ –í–´–°–û–ö–ò–ô"
                
                print(f"\\n‚ö†Ô∏è –†–∏—Å–∫-–∞–Ω–∞–ª–∏–∑:")
                print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∏—Å–∫–∞: {crossed_risk_rate:.4f}")
                print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level}")
    
    async def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            data = json.loads(message)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
            if data.get('event') == 'subscribe':
                if str(data.get('code')) == '0':
                    channel = data.get('arg', {}).get('channel', 'unknown')
                    print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞: {channel}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {data.get('msg', 'Unknown error')}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            elif data.get('event') == 'error':
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {data.get('msg', 'Unknown error')}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
            elif data.get('action') in ['snapshot', 'update']:
                channel = data.get('arg', {}).get('channel', '')
                if channel == 'account':
                    self.format_account_data(data)
                else:
                    print(f"ü§î –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª: {channel}")
            
            # –ü–∏–Ω–≥-–ø–æ–Ω–≥
            elif 'ping' in data:
                pong_message = {'pong': data['ping']}
                if self.ws:
                    await self.ws.send(json.dumps(pong_message))
            
            # –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            else:
                print(f"‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
        
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {message}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
    
    async def listen(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.ws:
                print("üëÇ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
                async for message in self.ws:
                    await self.handle_message(message)
        except websockets.exceptions.ConnectionClosed as e:
            print(f"üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if self.ws:
            await self.ws.close()
            print(f"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket. –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.update_count}")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            self.show_account_analytics()


async def monitor_futures_account():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
    
    print("üí∞ –ú–û–ù–ò–¢–û–†–ò–ù–ì FUTURES –ê–ö–ö–ê–£–ù–¢–ê")
    print("=" * 40)
    print("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    account_client = FuturesAccountChannel(config)
    
    try:
        if not await account_client.connect():
            return
        
        # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if not await account_client.authenticate():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await asyncio.sleep(1)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
        if not await account_client.subscribe_account():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç")
            return
        
        print("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("üìä –û—Ç–∫—Ä–æ–π—Ç–µ/–∑–∞–∫—Ä–æ–π—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        await account_client.listen()
        
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await account_client.disconnect()


async def equity_growth_tracker():
    """–¢—Ä–µ–∫–µ—Ä —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞"""
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
    
    print("üìà –¢–†–ï–ö–ï–† –†–û–°–¢–ê –ö–ê–ü–ò–¢–ê–õ–ê")
    print("=" * 40)
    
    duration = input("‚è∞ –í—Ä–µ–º—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 600): ").strip()
    try:
        duration = int(duration) if duration else 600
    except ValueError:
        duration = 600
    
    account_client = FuturesAccountChannel(config)
    
    try:
        if not await account_client.connect():
            return
        
        # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if not await account_client.authenticate():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
        await account_client.subscribe_account()
        
        print(f"üîÑ –¢—Ä–µ–∫–∏–Ω–≥ —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        start_time = time.time()
        initial_equity = None
        
        try:
            await asyncio.wait_for(account_client.listen(), timeout=duration)
        except asyncio.TimeoutError:
            end_time = time.time()
            session_duration = end_time - start_time
            
            print(f"\\n‚è∞ –¢—Ä–µ–∫–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω ({session_duration:.0f} —Å–µ–∫)")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞
            if account_client.balance_history:
                initial_equity = account_client.balance_history[0]['equity']
                final_equity = account_client.balance_history[-1]['equity']
                
                growth = final_equity - initial_equity
                growth_percent = (growth / initial_equity) * 100 if initial_equity > 0 else 0
                
                print(f"\\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–†–ï–ö–ò–ù–ì–ê:")
                print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initial_equity:,.2f}")
                print(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${final_equity:,.2f}")
                print(f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${growth:+,.2f} ({growth_percent:+.2f}%)")
                
                # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if growth_percent > 5:
                    performance = "üöÄ –û–¢–õ–ò–ß–ù–´–ô –†–û–°–¢"
                elif growth_percent > 1:
                    performance = "üü¢ –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô –†–û–°–¢"
                elif growth_percent > -1:
                    performance = "‚ö™ –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨"
                elif growth_percent > -5:
                    performance = "üü† –ù–ï–ë–û–õ–¨–®–û–ô –£–ë–´–¢–û–ö"
                else:
                    performance = "üî¥ –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–´–ô –£–ë–´–¢–û–ö"
                
                print(f"üìä –û—Ü–µ–Ω–∫–∞: {performance}")
                
                # –°—Ä–µ–¥–Ω–µ—á–∞—Å–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                hours = session_duration / 3600
                if hours > 0:
                    hourly_return = growth_percent / hours
                    print(f"‚è∞ –°—Ä–µ–¥–Ω–µ—á–∞—Å–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {hourly_return:+.2f}%")
            else:
                print("üì≠ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
    except KeyboardInterrupt:
        print("\\nüëã –¢—Ä–µ–∫–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await account_client.disconnect()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üí∞ BITGET FUTURES ACCOUNT CHANNEL")
    print("=" * 40)
    
    print("üîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print("1. üí∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞")
    print("2. üìà –¢—Ä–µ–∫–µ—Ä —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞")
    
    try:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
        
        if choice == "1":
            await monitor_futures_account()
        elif choice == "2":
            await equity_growth_tracker()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


if __name__ == "__main__":
    asyncio.run(main())
