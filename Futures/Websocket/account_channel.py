#!/usr/bin/env python3
"""
Bitget USDT Perpetual Futures WebSocket - Account Channel (Private)

–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É —Ñ—å—é—á–µ—Ä—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –í—ã–≤–æ–¥–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–∏—Ä–∂–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏.
–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –±–∏—Ä–∂–∏.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/contract/websocket/private/Account-Channel

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
- marginCoin: –≤–∞–ª—é—Ç–∞ –º–∞—Ä–∂–∏
- available: –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
- locked: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
- total: –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
- unrealizedPL: –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
- crossMarginLeverage: –ø–ª–µ—á–æ –∫—Ä–æ—Å—Å-–º–∞—Ä–∂–∏
- isolatedMarginLeverage: –ø–ª–µ—á–æ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä–∂–∏
"""

import asyncio
import json
import ssl
import websockets
import hmac
import hashlib
import base64
import time
from datetime import datetime

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('/Users/timurbogatyrev/Documents/VS Code/Algo/ExchangeAPI/Bitget/config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

class FuturesAccountChannel:
    def __init__(self, config):
        self.config = config
        self.ws = None
        self.account_data = {}
        self.update_count = 0
        
    def generate_signature(self, timestamp, method, request_path, body=''):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        message = str(timestamp) + method + request_path + body
        signature = hmac.new(
            self.config['secretKey'].encode('utf-8'),
            message.encode('utf-8'),
            hashlib.sha256
        ).digest()
        return base64.b64encode(signature).decode('utf-8')
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π WebSocket URL
            private_futures_ws_url = self.config.get('privateFuturesWsURL', 'wss://ws.bitget.com/v2/ws/private')
            
            self.ws = await websockets.connect(
                private_futures_ws_url,
                ssl=ssl_context,
                ping_interval=30,
                ping_timeout=10
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Private Futures WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        timestamp = str(int(time.time()))
        method = 'GET'
        request_path = '/user/verify'
        
        signature = self.generate_signature(timestamp, method, request_path)
        
        auth_message = {
            "op": "login",
            "args": [
                {
                    "apiKey": self.config['apiKey'],
                    "passphrase": self.config['passphrase'],
                    "timestamp": timestamp,
                    "sign": signature
                }
            ]
        }
        
        if self.ws:
            await self.ws.send(json.dumps(auth_message))
            print("üîê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                response = await asyncio.wait_for(self.ws.recv(), timeout=10)
                data = json.loads(response)
                print(f"üîê –û—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {json.dumps(data, indent=2)}")
                
                if data.get('event') == 'login':
                    if str(data.get('code')) == '0':  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {data.get('msg', 'Unknown error')}")
                        return False
                else:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
                    return False
            except asyncio.TimeoutError:
                print("‚ùå –¢–∞–π–º–∞—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
                return False
        
        return False
    
    async def subscribe_account(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        subscribe_message = {
            "op": "subscribe",
            "args": [
                {
                    "instType": "USDT-FUTURES",
                    "channel": "balance"
                }
            ]
        }
        
        if self.ws:
            await self.ws.send(json.dumps(subscribe_message))
            print(f"üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {json.dumps(subscribe_message, indent=2)}")
            print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ñ—å—é—á–µ—Ä—Å–æ–≤")
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            try:
                response = await asyncio.wait_for(self.ws.recv(), timeout=5)
                data = json.loads(response)
                print(f"üì° –û—Ç–≤–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏: {json.dumps(data, indent=2)}")
            except asyncio.TimeoutError:
                print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
    
    async def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –≤—ã–≤–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö JSON"""
        try:
            data = json.loads(message)
            print(json.dumps(data, indent=4, ensure_ascii=False))
            
            # –ü–∏–Ω–≥-–ø–æ–Ω–≥
            if 'ping' in data:
                pong_message = {'pong': data['ping']}
                if self.ws:
                    await self.ws.send(json.dumps(pong_message))
        
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {message}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def listen(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.ws:
                async for message in self.ws:
                    await self.handle_message(message)
        except websockets.exceptions.ConnectionClosed:
            print("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if self.ws:
            await self.ws.close()
            print("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket")

async def monitor_all_futures_account():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
    
    print("üìã –ú–û–ù–ò–¢–û–†–ò–ù–ì –ê–ö–ö–ê–£–ù–¢–ê FUTURES")
    print("=" * 40)
    print("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    account_client = FuturesAccountChannel(config)
    
    try:
        if not await account_client.connect():
            return
        
        if not await account_client.authenticate():
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏.")
            return
        
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ –ø–æ–¥–ø–∏—Å–∫–æ–π
        await account_client.subscribe_account()  # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
        
        print("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ñ—å—é—á–µ—Ä—Å–æ–≤...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await account_client.listen()
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await account_client.disconnect()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ñ—å—é—á–µ—Ä—Å–æ–≤")
    print("=" * 40)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞
    await monitor_all_futures_account()

if __name__ == "__main__":
    asyncio.run(main())
