#!/usr/bin/env python3
"""
Bitget USDT Perpetual Futures WebSocket - Positions Channel (Private)

–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –í—ã–≤–æ–¥–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–∏—Ä–∂–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏.
–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –±–∏—Ä–∂–∏.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/contract/websocket/private/Positions-Channel

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
- size: —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
- side: —Å—Ç–æ—Ä–æ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ (long/short)
- markPrice: –º–∞—Ä–∫–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞
- avgPrice: —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
- leverage: –ø–ª–µ—á–æ
- marginMode: —Ä–µ–∂–∏–º –º–∞—Ä–∂–∏ (crossed/isolated)
- unrealizedPL: –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
- percentage: –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
- margin: —Ä–∞–∑–º–µ—Ä –º–∞—Ä–∂–∏
- available: –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
- locked: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
"""

import asyncio
import json
import ssl
import websockets
import hmac
import hashlib
import base64
import time
from datetime import datetime

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('/Users/timurbogatyrev/Documents/VS Code/Algo/ExchangeAPI/Bitget/config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

class FuturesPositionsChannel:
    def __init__(self, config):
        self.config = config
        self.ws = None        
    def generate_signature(self, timestamp, method, request_path, body=''):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        message = str(timestamp) + method + request_path + body
        signature = hmac.new(
            self.config['secretKey'].encode('utf-8'),
            message.encode('utf-8'),
            hashlib.sha256
        ).digest()
        return base64.b64encode(signature).decode('utf-8')
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π WebSocket URL
            private_futures_ws_url = self.config.get('privateFuturesWsURL', 'wss://ws.bitget.com/v2/ws/private')
            
            self.ws = await websockets.connect(
                private_futures_ws_url,
                ssl=ssl_context,
                ping_interval=30,
                ping_timeout=10
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Private Futures WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        timestamp = str(int(time.time()))
        method = 'GET'
        request_path = '/user/verify'
        
        signature = self.generate_signature(timestamp, method, request_path)
        
        auth_message = {
            "op": "login",
            "args": [
                {
                    "apiKey": self.config['apiKey'],
                    "passphrase": self.config['passphrase'],
                    "timestamp": timestamp,
                    "sign": signature
                }
            ]
        }
        
        if self.ws:
            await self.ws.send(json.dumps(auth_message))
            print("üîê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                response = await asyncio.wait_for(self.ws.recv(), timeout=10)
                data = json.loads(response)
                if data.get('event') == 'login':
                    if str(data.get('code')) == '0':  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {data.get('msg', 'Unknown error')}")
                        return False
                else:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
                    return False
            except asyncio.TimeoutError:
                print("‚ùå –¢–∞–π–º–∞—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
                return False
        
        return False
    
    async def subscribe_positions(self, symbol=None):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        subscribe_message = {
            "op": "subscribe",
            "args": [
                {
                    "instType": "USDT-FUTURES",
                    "channel": "positions",
                    "instId": "default"  # –î–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "default"
                }
            ]
        }
        
        if self.ws:
            await self.ws.send(json.dumps(subscribe_message))
            print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ USDT-FUTURES")
    
    def get_position_emoji(self, *args, **kwargs):
        """–ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
        pass
    def format_position_data(self, data):
        """–í—ã–≤–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö JSON –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–∏—Ä–∂–∏"""
        print(json.dumps(data, indent=4, ensure_ascii=False))
    
    def show_portfolio_summary(self, *args, **kwargs):
        """–ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
        pass
    def show_pnl_history(self, *args, **kwargs):
        """–ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
        pass
    async def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –≤—ã–≤–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö JSON"""
        try:
            data = json.loads(message)
            print(json.dumps(data, indent=4, ensure_ascii=False))
            
            # –ü–∏–Ω–≥-–ø–æ–Ω–≥
            if 'ping' in data:
                pong_message = {'pong': data['ping']}
                if self.ws:
                    await self.ws.send(json.dumps(pong_message))
        
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {message}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    async def listen(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.ws:
                async for message in self.ws:
                    await self.handle_message(message)
        except websockets.exceptions.ConnectionClosed:
            print("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if self.ws:
            await self.ws.close()
            print("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket")

async def monitor_all_positions():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
    
    print("üéØ –ú–û–ù–ò–¢–û–†–ò–ù–ì –í–°–ï–• –ü–û–ó–ò–¶–ò–ô")
    print("=" * 40)
    print("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    positions_client = FuturesPositionsChannel(config)
    
    try:
        if not await positions_client.connect():
            return
        
        await positions_client.authenticate()
        await positions_client.subscribe_positions()  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏!
        
        print("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await positions_client.listen()
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await positions_client.disconnect()

async def pnl_tracker():
    """JSON —Ç—Ä–µ–∫–µ—Ä"""
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
    
    print("üìà –¢–†–ï–ö–ï–† PNL")
    print("=" * 40)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    profit_threshold = input("üü¢ –ü–æ—Ä–æ–≥ –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ % (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5): ").strip()
    loss_threshold = input("üî¥ –ü–æ—Ä–æ–≥ —É–±—ã—Ç–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ % (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é -5): ").strip()
    
    try:
        profit_threshold = float(profit_threshold) if profit_threshold else 5.0
        loss_threshold = float(loss_threshold) if loss_threshold else -5.0
    except ValueError:
        profit_threshold = 5.0
        loss_threshold = -5.0
    
    positions_client = FuturesPositionsChannel(config)
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ PnL
    original_format = positions_client.format_position_data
    
    def pnl_focused_format(data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ PnL –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        original_format(data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
        for position in data.get('data', []):
            symbol = position.get('symbol', 'N/A')
            percentage = float(position.get('percentage', 0))
            unrealized_pl = float(position.get('unrealizedPL', 0))
            
            if percentage >= profit_threshold:
                print(f"üö® –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {symbol} –¥–æ—Å—Ç–∏–≥ –ø–æ—Ä–æ–≥–∞ –ø—Ä–∏–±—ã–ª–∏ {percentage:+.2f}% (${unrealized_pl:+.2f})")
            elif percentage <= loss_threshold:
                print(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {symbol} –¥–æ—Å—Ç–∏–≥ –ø–æ—Ä–æ–≥–∞ —É–±—ã—Ç–∫–∞ {percentage:+.2f}% (${unrealized_pl:+.2f})")
    
    positions_client.format_position_data = pnl_focused_format
    
    try:
        if not await positions_client.connect():
            return
        
        await positions_client.authenticate()
        await positions_client.subscribe_positions()  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏!
        
        print(f"üîÑ –¢—Ä–µ–∫–µ—Ä PnL –∞–∫—Ç–∏–≤–µ–Ω...")
        print(f"üü¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±—ã–ª–∏: >= {profit_threshold}%")
        print(f"üî¥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–±—ã—Ç–∫–µ: <= {loss_threshold}%")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await positions_client.listen()
        
    except KeyboardInterrupt:
        print("\\nüëã –¢—Ä–µ–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await positions_client.disconnect()

async def position_risk_monitor():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JSON"""
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
    
    print("‚ö†Ô∏è –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ò–°–ö–û–í –ü–û–ó–ò–¶–ò–ô")
    print("=" * 40)
    
    duration = input("‚è∞ –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 600): ").strip()
    try:
        duration = int(duration) if duration else 600
    except ValueError:
        duration = 600
    
    positions_client = FuturesPositionsChannel(config)
    
    try:
        if not await positions_client.connect():
            return
        
        await positions_client.authenticate()
        await positions_client.subscribe_positions()  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏!
        
        print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            await asyncio.wait_for(positions_client.listen(), timeout=duration)
        except asyncio.TimeoutError:
            print(f"\n‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω ({duration} —Å–µ–∫)")
        
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await positions_client.disconnect()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ BITGET FUTURES POSITIONS CHANNEL (JSON)")
    print("=" * 40)
    
    print("üîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print("1. üéØ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏")
    print("2. üìà –¢—Ä–µ–∫–µ—Ä PnL —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
    print("3. ‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤")
    
    try:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == "1":
            await monitor_all_positions()
        elif choice == "2":
            await pnl_tracker()
        elif choice == "3":
            await position_risk_monitor()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())
