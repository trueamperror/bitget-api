#!/usr/bin/env python3
"""
–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ USDT Perpetual Futures –Ω–∞ Bitget

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ:
- –°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
- –†–∞–∑–º–µ—Ä –∏ —Ü–µ–Ω—É
- –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
- –ö–æ–º–∏—Å—Å–∏–∏
"""

import json
import hmac
import hashlib
import base64
import time
import requests
from datetime import datetime


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('../../config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None


def create_signature(timestamp, method, request_path, query_string, body, secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        secret_key.encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')


def make_authenticated_request(config, method, endpoint, params=None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    timestamp = str(int(time.time() * 1000))
    query_string = ''
    body = ''
    
    if method.upper() == 'GET' and params:
        query_string = '&'.join([f"{k}={v}" for k, v in params.items()])
    elif method.upper() == 'POST' and params:
        body = json.dumps(params)
    
    signature = create_signature(timestamp, method, endpoint, query_string, body, config['secretKey'])
    
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    url = f"{config['baseURL']}{endpoint}"
    if query_string:
        url += f"?{query_string}"
    
    try:
        if method.upper() == 'GET':
            response = requests.get(url, headers=headers, timeout=30)
        else:
            response = requests.post(url, headers=headers, data=body, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            
            print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print("üìã RAW JSON Response –æ—Ç –±–∏—Ä–∂–∏:")
            print("=" * 50)
            print(json.dumps(data, indent=2, ensure_ascii=False))
            print("=" * 50)
            
            return data
        else:
            print(f"‚ùå HTTP {response.status_code}: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


def get_order_status(config, symbol, order_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ –ø–æ ID"""
    params = {
        'symbol': symbol,
        'productType': 'USDT-FUTURES',
        'orderId': order_id
    }
    
    response = make_authenticated_request(config, 'GET', '/api/v2/mix/order/detail', params)
    
    if response and response.get('code') == '00000':
        return response.get('data', {})
    return None


def get_open_orders(config, symbol=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    params = {'productType': 'USDT-FUTURES'}
    if symbol:
        params['symbol'] = symbol
    
    response = make_authenticated_request(config, 'GET', '/api/v2/mix/order/orders-pending', params)
    
    if response and response.get('code') == '00000':
        return response.get('data', [])
    return []


def get_order_history(config, symbol=None, limit=10):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤"""
    params = {
        'productType': 'USDT-FUTURES',
        'pageSize': str(limit)
    }
    if symbol:
        params['symbol'] = symbol
    
    response = make_authenticated_request(config, 'GET', '/api/v2/mix/order/orders-history', params)
    
    if response and response.get('code') == '00000':
        return response.get('data', {}).get('orderList', [])
    return []


def display_order_info(order_info):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–¥–µ—Ä–µ"""
    if not order_info:
        print("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –û–†–î–ï–†–ï")
    print("=" * 50)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üÜî ID –æ—Ä–¥–µ—Ä–∞: {order_info.get('orderId', 'N/A')}")
    print(f"üë§ Client ID: {order_info.get('clientOid', 'N/A')}")
    print(f"üí± –°–∏–º–≤–æ–ª: {order_info.get('symbol', 'N/A')}")
    print(f"üéØ –°—Ç–æ—Ä–æ–Ω–∞: {order_info.get('side', 'N/A')}")
    print(f"üìä –¢–∏–ø –æ—Ä–¥–µ—Ä–∞: {order_info.get('orderType', 'N/A')}")
    
    # –°—Ç–∞—Ç—É—Å
    status = order_info.get('status', 'N/A')
    status_emoji = {
        'new': 'üü°',
        'partial_filled': 'üü†', 
        'filled': '‚úÖ',
        'cancelled': '‚ùå',
        'expired': '‚è∞'
    }
    print(f"üìã –°—Ç–∞—Ç—É—Å: {status_emoji.get(status, '‚ö™')} {status}")
    
    # –†–∞–∑–º–µ—Ä—ã –∏ —Ü–µ–Ω—ã
    print(f"üìè –†–∞–∑–º–µ—Ä: {order_info.get('size', '0')}")
    print(f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {order_info.get('filledQty', '0')}")
    print(f"üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {order_info.get('averagePrice', '0')}")
    print(f"üí∞ –¶–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞: {order_info.get('price', 'Market')}")
    
    # –í—Ä–µ–º—è
    created_time = order_info.get('cTime')
    if created_time:
        dt = datetime.fromtimestamp(int(created_time) / 1000)
        print(f"‚è∞ –°–æ–∑–¥–∞–Ω: {dt.strftime('%d.%m.%Y %H:%M:%S')}")
    
    updated_time = order_info.get('uTime')
    if updated_time:
        dt = datetime.fromtimestamp(int(updated_time) / 1000)
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {dt.strftime('%d.%m.%Y %H:%M:%S')}")
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üíµ –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞: {order_info.get('marginCoin', 'N/A')}")
    print(f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {order_info.get('fee', '0')}")
    print(f"‚öñÔ∏è –†–µ–∂–∏–º –º–∞—Ä–∂–∏: {order_info.get('marginMode', 'N/A')}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if order_info.get('reduceOnly'):
        print(f"üîí –¢–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç–∏–µ: {order_info.get('reduceOnly')}")
    
    if order_info.get('timeInForceValue'):
        print(f"‚è≥ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è: {order_info.get('timeInForceValue')}")


def display_orders_table(orders, title="–û–†–î–ï–†–ê"):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    if not orders or not isinstance(orders, list):
        print(f"üìä {title}: –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤")
        return
    
    print(f"\nüìä {title}")
    print("=" * 100)
    print(f"{'ID':<20} {'–°–∏–º–≤–æ–ª':<10} {'–¢–∏–ø':<8} {'–°—Ç–æ—Ä–æ–Ω–∞':<6} {'–†–∞–∑–º–µ—Ä':<10} {'–¶–µ–Ω–∞':<12} {'–°—Ç–∞—Ç—É—Å':<12}")
    print("-" * 100)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ orders —ç—Ç–æ —Å–ø–∏—Å–æ–∫
    orders_list = list(orders) if not isinstance(orders, list) else orders
    
    for order in orders_list[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        if not isinstance(order, dict):
            continue
        
        order_id_full = order.get('orderId', 'N/A')
        order_id = order_id_full[:18] + '..' if len(str(order_id_full)) > 18 else str(order_id_full)
        symbol = order.get('symbol', 'N/A')
        order_type = order.get('orderType', 'N/A')
        side = order.get('side', 'N/A')
        size = order.get('size', '0')
        price = order.get('price', 'Market')
        status = order.get('status', 'N/A')
        
        print(f"{order_id:<20} {symbol:<10} {order_type:<8} {side:<6} {size:<10} {price:<12} {status:<12}")
    
    if len(orders_list) > 10:
        print(f"\n... –∏ –µ—â–µ {len(orders_list) - 10} –æ—Ä–¥–µ—Ä–æ–≤")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìä –°–¢–ê–¢–£–° –û–†–î–ï–†–û–í BITGET FUTURES")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase', 'baseURL']
    for key in required_keys:
        if not config.get(key):
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}' –≤ config.json")
            return
    
    print("üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞")
    print("2. üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤")
    print("3. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –ø–æ ID")
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
    
    if choice == "1":
        # –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (Enter –¥–ª—è –≤—Å–µ—Ö): ").strip().upper()
        if not symbol:
            symbol = None
        
        print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤...")
        open_orders = get_open_orders(config, symbol)
        display_orders_table(open_orders, "–û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê")
        
    elif choice == "2":
        # –ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤
        symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (Enter –¥–ª—è –≤—Å–µ—Ö): ").strip().upper()
        if not symbol:
            symbol = None
        
        limit = input("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ").strip()
        try:
            limit = int(limit) if limit else 10
        except ValueError:
            limit = 10
        
        print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤...")
        history = get_order_history(config, symbol, limit)
        display_orders_table(history, "–ò–°–¢–û–†–ò–Ø –û–†–î–ï–†–û–í")
        
    elif choice == "3":
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
        symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª: ").strip().upper()
        order_id = input("üÜî –í–≤–µ–¥–∏—Ç–µ ID –æ—Ä–¥–µ—Ä–∞: ").strip()
        
        if not symbol or not order_id:
            print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–∏–º–≤–æ–ª –∏ ID –æ—Ä–¥–µ—Ä–∞")
            return
        
        print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–¥–µ—Ä–µ...")
        order_info = get_order_status(config, symbol, order_id)
        display_order_info(order_info)
        
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
