#!/usr/bin/env python3
"""
Bitget API - –†–∞–∑–º–µ—â–µ–Ω–∏–µ Market –æ—Ä–¥–µ—Ä–∞ (USDT Perpetual Futures)
–†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
https://www.bitget.com/api-doc/contract/trade/Place-Order

–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –î–∞
–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: 10 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É
"""

import requests
import json
import hmac
import hashlib
import base64
import time
from datetime import datetime
from pathlib import Path

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        config_path = Path(__file__).parent.parent.parent / "config.json"
        with open(config_path, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ config.json!")
        return None

def create_signature(timestamp, method, request_path, query_string, body, secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        secret_key.encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')

def get_current_price(config, symbol):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        url = f"{config['baseURL']}/api/v2/mix/market/ticker?symbol={symbol}"
        response = requests.get(url, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000' and data.get('data'):
                ticker_data = data['data'][0] if isinstance(data['data'], list) else data['data']
                return float(ticker_data.get('lastPr', 0))
        return None
    except:
        return None

def get_symbol_info(config, symbol):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ"""
    try:
        url = f"{config['baseURL']}/api/v2/mix/market/contracts"
        params = {'productType': 'USDT-FUTURES'}
        response = requests.get(url, params=params, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000' and data.get('data'):
                for symbol_info in data['data']:
                    if symbol_info.get('symbol') == symbol:
                        return {
                            'minTradeNum': float(symbol_info.get('minTradeNum', 0)),
                            'priceEndStep': float(symbol_info.get('priceEndStep', 0)),
                            'volumePlace': int(symbol_info.get('volumePlace', 0)),
                            'pricePlace': int(symbol_info.get('pricePlace', 0)),
                            'baseCoin': symbol_info.get('baseCoin'),
                            'quoteCoin': symbol_info.get('quoteCoin'),
                            'maxLever': symbol_info.get('maxLever'),
                            'minLever': symbol_info.get('minLever')
                        }
        return None
    except:
        return None

def place_market_order(config, symbol, side, size, margin_mode='crossed'):
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ market –æ—Ä–¥–µ—Ä–∞ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö (One-way mode)
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT')
    - side: 'buy' (–¥–ª–∏–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è) –∏–ª–∏ 'sell' (–∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è)
    - size: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
    - margin_mode: 'crossed' (–∫—Ä–æ—Å—Å-–º–∞—Ä–∂–∞) –∏–ª–∏ 'isolated' (–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞)
    """
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞ (One-way mode)
    order_data = {
        'symbol': symbol.upper(),
        'productType': 'USDT-FUTURES',
        'marginMode': margin_mode,
        'marginCoin': 'USDT',
        'size': str(size),
        'side': side.lower(),
        'orderType': 'market',
        'force': 'ioc'  # Immediate or Cancel –¥–ª—è market –æ—Ä–¥–µ—Ä–æ–≤
    }
    
    body = json.dumps(order_data)
    timestamp = str(int(time.time() * 1000))
    method = 'POST'
    request_path = '/api/v2/mix/order/place-order'
    
    signature = create_signature(timestamp, method, request_path, '', body, config['secretKey'])
    
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    url = f"{config['baseURL']}{request_path}"
    
    try:
        print(f"üîÑ –†–∞–∑–º–µ—â–µ–Ω–∏–µ FUTURES MARKET –æ—Ä–¥–µ—Ä–∞...")
        print(f"üí± –ü–∞—Ä–∞: {symbol}")
        print(f"üéØ –°—Ç–æ—Ä–æ–Ω–∞: {get_side_emoji(side)} {side.upper()}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {size} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
        print(f"‚öñÔ∏è –†–µ–∂–∏–º –º–∞—Ä–∂–∏: {margin_mode}")
        
        response = requests.post(url, headers=headers, data=body, timeout=30)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        response_data = response.json() if response.status_code == 200 else {"error": response.text}
        save_response_example('place_futures_market_order', {
            'request': order_data,
            'response': response_data,
            'status_code': response.status_code,
            'timestamp': datetime.now().isoformat()
        })
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000':
                return data.get('data', {})
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg')}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def get_side_emoji(side):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ä–¥–µ—Ä–∞"""
    side_emojis = {
        'buy': 'üü¢',
        'sell': 'ÔøΩ'
    }
    return side_emojis.get(side.lower(), '‚ö™')

def save_response_example(endpoint_name, data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞"""
    try:
        filename = f"../../docs/response_examples/{endpoint_name}_{int(time.time())}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"üíæ –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {e}")

def display_order_result(order_result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
    if not order_result:
        return
    
    print(f"\n‚úÖ FUTURES MARKET –û–†–î–ï–† –†–ê–ó–ú–ï–©–ï–ù!")
    print("=" * 45)
    
    order_id = order_result.get('orderId', 'N/A')
    client_order_id = order_result.get('clientOid', 'N/A')
    
    print(f"üÜî ID –æ—Ä–¥–µ—Ä–∞: {order_id}")
    print(f"üë§ Client ID: {client_order_id}")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    
    print(f"\nüí° Market –æ—Ä–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!")
    print(f"üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   python get_positions.py")
    print(f"   python get_account_balance.py")

def main():
    config_path = Path(__file__).parent.parent.parent / "config.json"
    with open(config_path, 'r') as file:
        config = json.load(file)

    base_url = "https://api.bitget.com"
    endpoint = "/api/v2/mix/order/place-order"

    timestamp = str(int(time.time() * 1000))

    # –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    body = {
        "symbol": "DOGEUSDT",
        "productType": "USDT-FUTURES",
        "marginMode": "crossed",
        "marginCoin": "USDT",
        "size": "50",
        "side": "buy",
        "orderType": "market"
    }

    body_json = json.dumps(body)

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
    if "":
        message = f"{timestamp}POST{endpoint}?{body_json}"
    else:
        message = f"{timestamp}POST{endpoint}{body_json}"

    signature = hmac.new(
        config['secretKey'].encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()

    signature = base64.b64encode(signature).decode('utf-8')

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }

    print(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞:")
    print(f"–°–∏–º–≤–æ–ª: DOGEUSDT")
    print(f"–°—Ç–æ—Ä–æ–Ω–∞: buy")
    print(f"–†–∞–∑–º–µ—Ä: 50")
    print(f"–¢–∏–ø: market")
    print("-" * 50)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    response = requests.post(
        base_url + endpoint,
        headers=headers,
        data=body_json
    )

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print(json.dumps(response.json(), indent=4, ensure_ascii=False))

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
