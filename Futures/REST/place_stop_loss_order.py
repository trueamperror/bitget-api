#!/usr/bin/env python3
"""
Bitget USDT Perpetual REST API - Place Stop Loss Order

–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –∑–∞—è–≤–∫–∏ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã.
–°—Ç–æ–ø-–ª–æ—Å—Å –ø–æ–º–æ–≥–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ—Ç–µ—Ä–∏ –ø—Ä–∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/contract/trade/Place-Stop-Order

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
- side: —Å—Ç–æ—Ä–æ–Ω–∞ –∑–∞—è–≤–∫–∏ (buy/sell)
- size: —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
- triggerPrice: —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
- executePrice: —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–ª—è limit) –∏–ª–∏ 'market'
"""

import requests
import json
import time
import hmac
import hashlib
import base64
from datetime import datetime


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('../../config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None


def create_signature(secret_key, message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    return base64.b64encode(
        hmac.new(
            secret_key.encode('utf-8'),
            message.encode('utf-8'),
            hashlib.sha256
        ).digest()
    ).decode('utf-8')


def place_stop_loss_order(symbol="BTCUSDT", side="sell", size="0.01", trigger_price=None, 
                         execute_price="market", order_type="market", margin_coin="USDT"):
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –∑–∞—è–≤–∫–∏
    
    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        side (str): –°—Ç–æ—Ä–æ–Ω–∞ –∑–∞—è–≤–∫–∏ (buy/sell)
        size (str): –†–∞–∑–º–µ—Ä –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
        trigger_price (str): –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        execute_price (str): –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ 'market'
        order_type (str): –¢–∏–ø –∑–∞—è–≤–∫–∏ ('market' –∏–ª–∏ 'limit')
        margin_coin (str): –í–∞–ª—é—Ç–∞ –º–∞—Ä–∂–∏
    
    Returns:
        dict: –û—Ç–≤–µ—Ç API —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    """
    config = load_config()
    if not config:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    if not all(k in config for k in ['apiKey', 'secretKey', 'passphrase']):
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API –∫–ª—é—á–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        return None
    
    if not trigger_price:
        print("‚ùå –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞!")
        return None
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    timestamp = str(int(time.time() * 1000))
    
    request_data = {
        'symbol': symbol,
        'productType': 'USDT-FUTURES',
        'marginMode': 'crossed',
        'marginCoin': margin_coin,
        'size': size,
        'side': side,
        'orderType': order_type,
        'triggerPrice': trigger_price,
        'planType': 'normal_plan',  # –û–±—ã—á–Ω—ã–π –ø–ª–∞–Ω-–æ—Ä–¥–µ—Ä
        'clientOid': f"stop_loss_{int(time.time()*1000)}"
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    if order_type == "limit" and execute_price != "market":
        request_data['executePrice'] = execute_price
        request_data['triggerType'] = 'fill_price'  # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –ª–∏–º–∏—Ç–Ω–æ–π —Ü–µ–Ω–µ
    else:
        request_data['triggerType'] = 'mark_price'  # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ
    
    body = json.dumps(request_data, separators=(',', ':'))
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        message = timestamp + 'POST' + '/api/v2/mix/order/place-plan-order' + body
        signature = create_signature(config['secretKey'], message)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        headers = {
            'ACCESS-KEY': config['apiKey'],
            'ACCESS-SIGN': signature,
            'ACCESS-TIMESTAMP': timestamp,
            'ACCESS-PASSPHRASE': config['passphrase'],
            'Content-Type': 'application/json',
            'locale': 'en-US'
        }
        
        print(f"üõ°Ô∏è –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –∑–∞—è–≤–∫–∏ –¥–ª—è {symbol} FUTURES...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        url = f"{config['baseURL']}/api/v2/mix/order/place-plan-order"
        response = requests.post(url, headers=headers, data=body)
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('code') == '00000':
                order_info = data.get('data', {})
                order_id = order_info.get('orderId', 'N/A')
                client_oid = order_info.get('clientOid', 'N/A')
                
                print(f"‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞!")
                print("=" * 70)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ
                print(f"üìã –î–ï–¢–ê–õ–ò –°–¢–û–ü-–õ–û–°–° –ó–ê–Ø–í–ö–ò:")
                print(f"   üÜî Order ID: {order_id}")
                print(f"   üì± Client OID: {client_oid}")
                print(f"   üí± –°–∏–º–≤–æ–ª: {symbol}")
                print(f"   üîÑ –°—Ç–æ—Ä–æ–Ω–∞: {'üü¢ BUY' if side == 'buy' else 'üî¥ SELL'}")
                print(f"   üìä –†–∞–∑–º–µ—Ä: {size} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
                print(f"   üö® –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${trigger_price}")
                
                if order_type == "limit" and execute_price != "market":
                    print(f"   üí∞ –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: ${execute_price} (–ª–∏–º–∏—Ç–Ω–∞—è)")
                else:
                    print(f"   üí∞ –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: –†—ã–Ω–æ—á–Ω–∞—è")
                
                print(f"   üíº –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞: {margin_coin}")
                print(f"   ‚è∞ –í—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                
                # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å
                try:
                    trigger_price_float = float(trigger_price)
                    size_float = float(size)
                    
                    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (–Ω—É–∂–Ω–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞)
                    print(f"\\nüìä –ê–ù–ê–õ–ò–ó –°–¢–û–ü-–õ–û–°–°–ê:")
                    print(f"   üéØ –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ ${trigger_price_float:.4f}")
                    print(f"   üìè –ë—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ {size_float} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
                    
                    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    print(f"\\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                    print(f"   ‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                    print(f"   ‚ö†Ô∏è –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏")
                    print(f"   üìà –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π")
                    
                    if order_type == "market":
                        print(f"   üö® –†—ã–Ω–æ—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
                    else:
                        print(f"   üí∞ –õ–∏–º–∏—Ç–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É ${execute_price}")
                
                except ValueError:
                    pass
                
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg', 'Unknown error')}")
                print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {data.get('code', 'N/A')}")
                
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫
                error_code = data.get('code', '')
                if error_code == '40001':
                    print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—è–≤–∫–∏")
                elif error_code == '40002':
                    print("   üí° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å")
                elif error_code == '40003':
                    print("   üí° –ù–µ–≤–µ—Ä–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞")
                elif error_code == '40004':
                    print("   üí° –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫")
                
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}")
            try:
                error_data = response.json()
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_data.get('msg', response.text)}")
            except:
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None


def place_stop_loss_interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
    print("üõ°Ô∏è –†–ê–ó–ú–ï–©–ï–ù–ò–ï –°–¢–û–ü-–õ–û–°–° –ó–ê–Ø–í–ö–ò")
    print("=" * 45)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
    symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é BTCUSDT): ").strip().upper()
    if not symbol:
        symbol = "BTCUSDT"
    
    # –°—Ç–æ—Ä–æ–Ω–∞ –∑–∞—è–≤–∫–∏
    print("\\nüîÑ –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ü–†–û–¢–ò–í–û–ü–û–õ–û–ñ–ù–£–Æ —Å—Ç–æ—Ä–æ–Ω—É:")
    print("1. üü¢ Buy (–¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è SHORT –ø–æ–∑–∏—Ü–∏–∏)")
    print("2. üî¥ Sell (–¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è LONG –ø–æ–∑–∏—Ü–∏–∏)")
    
    side_input = input("–°—Ç–æ—Ä–æ–Ω–∞ (1-2): ").strip()
    if side_input == "1":
        side = "buy"
        side_display = "üü¢ BUY (–∑–∞–∫—Ä—ã—Ç–∏–µ SHORT)"
        position_type = "SHORT"
    elif side_input == "2":
        side = "sell"
        side_display = "üî¥ SELL (–∑–∞–∫—Ä—ã—Ç–∏–µ LONG)"
        position_type = "LONG"
    else:
        side = "sell"
        side_display = "üî¥ SELL (–∑–∞–∫—Ä—ã—Ç–∏–µ LONG)"
        position_type = "LONG"
    
    # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    size_input = input(f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã): ").strip()
    try:
        size = str(float(size_input))
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 0.01")
        size = "0.01"
    
    # –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
    trigger_price_input = input(f"üö® –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: ").strip()
    try:
        trigger_price = str(float(trigger_price_input))
        trigger_price_float = float(trigger_price)
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
        return None
    
    # –¢–∏–ø –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    print(f"\\nüí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:")
    print("1. Market - —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ (–±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ)")
    print("2. Limit - –ª–∏–º–∏—Ç–Ω–∞—è —Ü–µ–Ω–∞ (–∫–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–Ω—ã)")
    
    exec_type_input = input("–¢–∏–ø –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (1-2): ").strip()
    if exec_type_input == "2":
        order_type = "limit"
        
        # –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
        if position_type == "LONG":
            suggested_price = trigger_price_float * 0.999  # –ß—É—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            print(f"üí° –î–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏ —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
        else:
            suggested_price = trigger_price_float * 1.001  # –ß—É—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            print(f"üí° –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
        
        execute_price_input = input(f"üí∞ –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è ${suggested_price:.4f}): ").strip()
        if execute_price_input:
            try:
                execute_price = str(float(execute_price_input))
            except ValueError:
                execute_price = str(suggested_price)
        else:
            execute_price = str(suggested_price)
    else:
        order_type = "market"
        execute_price = "market"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    print(f"\\nüõ°Ô∏è –°–í–û–î–ö–ê –°–¢–û–ü-–õ–û–°–° –ó–ê–Ø–í–ö–ò:")
    print("=" * 50)
    print(f"üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {symbol}")
    print(f"üîÑ –¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏: {position_type}")
    print(f"üìä –î–µ–π—Å—Ç–≤–∏–µ: {side_display}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {size} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
    print(f"üö® –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${trigger_price}")
    if order_type == "limit":
        print(f"üí∞ –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: ${execute_price} (–ª–∏–º–∏—Ç–Ω–∞—è)")
    else:
        print(f"üí∞ –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: –†—ã–Ω–æ—á–Ω–∞—è")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    print(f"\\n‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
    if position_type == "LONG":
        print(f"   üìâ –°—Ç–æ–ø-–ª–æ—Å—Å —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ —Ü–µ–Ω–∞ –£–ü–ê–î–ï–¢ –¥–æ ${trigger_price}")
        if float(trigger_price) > 50000:  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è BTC
            print(f"   üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ - —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞?")
    else:
        print(f"   üìà –°—Ç–æ–ø-–ª–æ—Å—Å —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ —Ü–µ–Ω–∞ –í–´–†–ê–°–¢–ï–¢ –¥–æ ${trigger_price}")
        if float(trigger_price) < 30000:  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è BTC
            print(f"   üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ - —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞?")
    
    print(f"   üõ°Ô∏è –≠—Ç–æ –∑–∞—è–≤–∫–∞ –¥–ª—è –ó–ê–ö–†–´–¢–ò–Ø –ø–æ–∑–∏—Ü–∏–∏, –∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∏—è")
    print(f"   ‚ö° –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\\nüõ°Ô∏è –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å –∑–∞—è–≤–∫—É? (y/n): ", end="")
    confirm = input().strip().lower()
    
    if confirm in ['y', 'yes', '–¥–∞', '–¥']:
        return place_stop_loss_order(symbol, side, size, trigger_price, execute_price, order_type)
    else:
        print("‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return None


def place_trailing_stop():
    """–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
    print("üìà –†–ê–ó–ú–ï–©–ï–ù–ò–ï –¢–†–ï–ô–õ–ò–ù–ì –°–¢–û–ü-–õ–û–°–°–ê")
    print("=" * 45)
    
    symbol = input("üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é BTCUSDT): ").strip().upper()
    if not symbol:
        symbol = "BTCUSDT"
    
    # –°—Ç–æ—Ä–æ–Ω–∞ –∑–∞—è–≤–∫–∏
    print("\\nüîÑ –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ü–†–û–¢–ò–í–û–ü–û–õ–û–ñ–ù–£–Æ —Å—Ç–æ—Ä–æ–Ω—É:")
    print("1. üü¢ Buy (–¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è SHORT –ø–æ–∑–∏—Ü–∏–∏)")
    print("2. üî¥ Sell (–¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è LONG –ø–æ–∑–∏—Ü–∏–∏)")
    
    side_input = input("–°—Ç–æ—Ä–æ–Ω–∞ (1-2): ").strip()
    if side_input == "1":
        side = "buy"
        side_display = "üü¢ BUY (–∑–∞–∫—Ä—ã—Ç–∏–µ SHORT)"
        position_type = "SHORT"
    elif side_input == "2":
        side = "sell"
        side_display = "üî¥ SELL (–∑–∞–∫—Ä—ã—Ç–∏–µ LONG)"
        position_type = "LONG"
    else:
        side = "sell"
        side_display = "üî¥ SELL (–∑–∞–∫—Ä—ã—Ç–∏–µ LONG)"
        position_type = "LONG"
    
    # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    size_input = input(f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã): ").strip()
    try:
        size = str(float(size_input))
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
        return None
    
    # –¢—Ä–µ–π–ª–∏–Ω–≥ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    trailing_input = input(f"üìè –¢—Ä–µ–π–ª–∏–Ω–≥ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (%): ").strip()
    try:
        trailing_pct = float(trailing_input) / 100
    except ValueError:
        trailing_pct = 0.02  # 2% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
    activation_input = input(f"üéØ –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ").strip()
    if activation_input:
        try:
            activation_price = str(float(activation_input))
        except ValueError:
            activation_price = None
    else:
        activation_price = None
    
    print(f"\\n‚ùå –í–ù–ò–ú–ê–ù–ò–ï: –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API")
    print(f"üìã –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º —Ä—É—á–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º")
    print(f"\\nüí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:")
    print(f"   1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Bitget –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞")
    print(f"   2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    print(f"   3. –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ã—á–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ã—á–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
    current_price_input = input(f"\\nüí∞ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–ø–∞: ").strip()
    try:
        current_price = float(current_price_input)
        
        if position_type == "LONG":
            suggested_stop = current_price * (1 - trailing_pct)
            print(f"üìâ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å: ${suggested_stop:.4f} ({trailing_pct*100:.1f}% –Ω–∏–∂–µ)")
        else:
            suggested_stop = current_price * (1 + trailing_pct)
            print(f"üìà –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å: ${suggested_stop:.4f} ({trailing_pct*100:.1f}% –≤—ã—à–µ)")
        
        confirm = input(f"üõ°Ô∏è –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ã—á–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ ${suggested_stop:.4f}? (y/n): ").strip().lower()
        
        if confirm in ['y', 'yes', '–¥–∞', '–¥']:
            return place_stop_loss_order(symbol, side, size, str(suggested_stop))
    
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞")
    
    return None


def manage_stop_loss_orders():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –∑–∞—è–≤–∫–∞–º–∏"""
    print("üõ°Ô∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–û–ü-–õ–û–°–° –ó–ê–Ø–í–ö–ê–ú–ò")
    print("=" * 50)
    
    print("\\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
    print("1. üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤")
    print("2. ‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞")
    print("3. ‚ùå –û—Ç–º–µ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞")
    print("4. üîÑ –ú–∞—Å—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    choice = input("\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
    
    if choice == "1":
        print("\\nüìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_pending_orders.py")
    elif choice == "2":
        print("\\n‚úèÔ∏è –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ modify_order.py")
    elif choice == "3":
        print("\\n‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ cancel_order.py")
    elif choice == "4":
        print("\\nüîÑ –î–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ batch_cancel_orders.py")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


def calculate_stop_loss_levels():
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —É—Ä–æ–≤–Ω–µ–π —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
    print("üßÆ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –°–¢–û–ü-–õ–û–°–° –£–†–û–í–ù–ï–ô")
    print("=" * 45)
    
    # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
    entry_price_input = input("üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é: ").strip()
    try:
        entry_price = float(entry_price_input)
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞")
        return
    
    # –¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏
    print("\\nüìä –¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏:")
    print("1. üü¢ LONG (–ø–æ–∫—É–ø–∫–∞)")
    print("2. üî¥ SHORT (–ø—Ä–æ–¥–∞–∂–∞)")
    
    position_input = input("–¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏ (1-2): ").strip()
    is_long = position_input == "1"
    
    # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    position_size_input = input("üìè –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã): ").strip()
    try:
        position_size = float(position_size_input)
    except ValueError:
        position_size = 1.0
    
    # –ü—Ä–∏–µ–º–ª–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ—Ç–µ—Ä—å
    max_loss_input = input("üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ (USD): ").strip()
    try:
        max_loss = float(max_loss_input)
    except ValueError:
        max_loss = None
    
    print(f"\\nüßÆ –†–ê–°–ß–ï–¢ –°–¢–û–ü-–õ–û–°–° –£–†–û–í–ù–ï–ô:")
    print("=" * 60)
    
    print(f"{'–†–∏—Å–∫ %':^10} {'–¶–µ–Ω–∞ —Å—Ç–æ–ø–∞':^15} {'–ü–æ—Ç–µ—Ä–∏ USD':^15} {'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ':^15}")
    print("-" * 60)
    
    risk_levels = [1, 2, 3, 5, 10, 15, 20]
    
    for risk_pct in risk_levels:
        if is_long:
            # –î–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–æ–ø –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
            stop_price = entry_price * (1 - risk_pct / 100)
            loss_per_contract = entry_price - stop_price
        else:
            # –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–æ–ø –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
            stop_price = entry_price * (1 + risk_pct / 100)
            loss_per_contract = stop_price - entry_price
        
        total_loss = loss_per_contract * position_size
        price_distance = abs(stop_price - entry_price)
        
        # –û—Ç–º–µ—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        marker = ""
        if max_loss and total_loss <= max_loss:
            marker = " ‚úÖ"
        elif total_loss > max_loss if max_loss else False:
            marker = " ‚ùå"
        
        print(f"{risk_pct:>7}% ${stop_price:>13.2f} ${total_loss:>13.2f} ${price_distance:>13.2f}{marker}")
    
    print("-" * 60)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"   üéØ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry_price:.2f}")
    print(f"   üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
    
    if max_loss:
        print(f"   üí∏ –õ–∏–º–∏—Ç –ø–æ—Ç–µ—Ä—å: ${max_loss:.2f}")
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        for risk_pct in risk_levels:
            if is_long:
                stop_price = entry_price * (1 - risk_pct / 100)
                loss_per_contract = entry_price - stop_price
            else:
                stop_price = entry_price * (1 + risk_pct / 100)
                loss_per_contract = stop_price - entry_price
            
            total_loss = loss_per_contract * position_size
            
            if total_loss <= max_loss:
                print(f"   ‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø: ${stop_price:.2f} (—Ä–∏—Å–∫ {risk_pct}%)")
                break
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É
    print(f"\\nüõ°Ô∏è –ü–†–ê–í–ò–õ–ê –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê:")
    print(f"   üìà –ù–æ–≤–∏—á–∫–∏: 1-2% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É")
    print(f"   üìä –û–ø—ã—Ç–Ω—ã–µ: 2-5% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É")
    print(f"   üî• –ú–∞–∫—Å–∏–º—É–º: –Ω–µ –±–æ–ª–µ–µ 10% –Ω–∞ —Å–¥–µ–ª–∫—É")
    print(f"   üí∞ –û–±—â–∏–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è: –Ω–µ –±–æ–ª–µ–µ 20%")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üõ°Ô∏è BITGET FUTURES - –°–¢–û–ü-–õ–û–°–° –ó–ê–Ø–í–ö–ò")
    print("=" * 50)
    
    print("\\nüîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. üõ°Ô∏è –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å")
    print("2. üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ")
    print("3. üìà –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø-–ª–æ—Å—Å")
    print("4. üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞–º–∏")
    print("5. üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —É—Ä–æ–≤–Ω–µ–π")
    
    try:
        choice = input("\\n–í–∞—à –≤—ã–±–æ—Ä (1-5): ").strip()
        
        if choice == "1":
            # –ü—Ä–∏–º–µ—Ä —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            place_stop_loss_order("BTCUSDT", "sell", "0.01", "35000")
        elif choice == "2":
            place_stop_loss_interactive()
        elif choice == "3":
            place_trailing_stop()
        elif choice == "4":
            manage_stop_loss_orders()
        elif choice == "5":
            calculate_stop_loss_levels()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
