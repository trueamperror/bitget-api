#!/usr/bin/env python3
"""
Bitget USDT Perpetual REST API - Place Take Profit Order

–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–±—ã–ª–∏.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/contract/trade/Place-Order

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
- side: —Å—Ç–æ—Ä–æ–Ω–∞ (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏)
- size: —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
- triggerPrice: —Ü–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
- orderType: take_profit
"""

import requests
import json
import hmac
import hashlib
import base64
import time
from datetime import datetime


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('../../config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None


def generate_signature(timestamp, method, request_path, query_string='', body=''):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    config = load_config()
    if not config:
        return None
    
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        config['secretKey'].encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')


def place_take_profit_order(symbol, side, size, trigger_price, client_oid=None):
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä–∞
    
    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
        side (str): –°—Ç–æ—Ä–æ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (buy –¥–ª—è —à–æ—Ä—Ç–∞, sell –¥–ª—è –ª–æ–Ω–≥–∞)
        size (str): –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        trigger_price (str): –¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        client_oid (str, optional): –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID –æ—Ä–¥–µ—Ä–∞
    
    Returns:
        dict: –û—Ç–≤–µ—Ç API —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞
    """
    config = load_config()
    if not config:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return None
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if side not in ['buy', 'sell']:
        print("‚ùå –°—Ç–æ—Ä–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'buy' –∏–ª–∏ 'sell'")
        return None
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    timestamp = str(int(time.time() * 1000))
    method = 'POST'
    request_path = '/api/v2/mix/order/place-plan-order'
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if not client_oid:
        client_oid = f"take_profit_{int(time.time())}"
    
    body_data = {
        'symbol': symbol,
        'productType': 'USDT-FUTURES',
        'marginMode': 'crossed',
        'marginCoin': 'USDT',
        'side': side,
        'orderType': 'market',
        'size': str(size),
        'triggerPrice': str(trigger_price),
        'triggerType': 'mark_price',
        'planType': 'normal_plan',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º normal_plan 
        'clientOid': client_oid
    }
    
    body = json.dumps(body_data)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
    signature = generate_signature(timestamp, method, request_path, '', body)
    if not signature:
        return None
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    try:
        url = f"{config['baseURL']}{request_path}"
        
        side_emoji = "üü¢" if side == "buy" else "üî¥"
        position_type = "–®–û–†–¢" if side == "buy" else "–õ–û–ù–ì"
        
        print(f"üéØ –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä–∞...")
        print(f"üí± –ü–∞—Ä–∞: {symbol}")
        print(f"{side_emoji} –ó–∞–∫—Ä—ã—Ç–∏–µ {position_type} –ø–æ–∑–∏—Ü–∏–∏")
        print(f"üìä –†–∞–∑–º–µ—Ä: {size}")
        print(f"üéØ –¶–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: ${trigger_price}")
        print(f"üÜî Client OID: {client_oid}")
        
        response = requests.post(url, headers=headers, data=body)
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('code') == '00000':
                order_data = data.get('data', {})
                
                print("\\n‚úÖ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω!")
                print("=" * 50)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ
                order_id = order_data.get('orderId', 'N/A')
                client_order_id = order_data.get('clientOid', client_oid)
                
                print(f"üÜî ID –æ—Ä–¥–µ—Ä–∞: {order_id}")
                print(f"üë§ Client OID: {client_order_id}")
                print(f"üí± –°–∏–º–≤–æ–ª: {symbol}")
                print(f"{side_emoji} –°—Ç–æ—Ä–æ–Ω–∞: {side.upper()}")
                print(f"üìä –†–∞–∑–º–µ—Ä: {size}")
                print(f"üéØ –¢–∏–ø: TAKE PROFIT")
                print(f"üí∞ –¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: ${trigger_price}")
                
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞
                print(f"\\nüí° –ú–ï–•–ê–ù–ò–ó–ú –¢–ï–ô–ö-–ü–†–û–§–ò–¢–ê:")
                if side == "sell":  # –ó–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏
                    print("üìà –ó–∞–∫—Ä—ã—Ç–∏–µ –õ–û–ù–ì –ø–æ–∑–∏—Ü–∏–∏:")
                    print(f"‚Ä¢ –ü—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã –¥–æ ${trigger_price}")
                    print("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ")
                    print("‚Ä¢ –§–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏ –æ—Ç —Ä–æ—Å—Ç–∞")
                else:  # –ó–∞–∫—Ä—ã—Ç–∏–µ —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–∏
                    print("üìâ –ó–∞–∫—Ä—ã—Ç–∏–µ –®–û–†–¢ –ø–æ–∑–∏—Ü–∏–∏:")
                    print(f"‚Ä¢ –ü—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–æ ${trigger_price}")
                    print("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ")
                    print("‚Ä¢ –§–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –ø–∞–¥–µ–Ω–∏—è")
                
                # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π)
                try:
                    size_float = float(size)
                    trigger_float = float(trigger_price)
                    notional = size_float * trigger_float
                    
                    print(f"\\nüìä –†–ê–°–ß–ï–¢–´:")
                    print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç–∏—è: ${notional:,.2f}")
                    
                    if notional > 10000:
                        print(f"üéØ –ö–†–£–ü–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø: ${notional:,.2f}")
                        print("‚úÖ –•–æ—Ä–æ—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏!")
                    
                except:
                    pass
                
                print(f"\\n‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –¢–ï–ô–ö-–ü–†–û–§–ò–¢–ê:")
                print("‚Ä¢ üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏")
                print("‚Ä¢ üò¥ –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                print("‚Ä¢ üí∞ –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞")
                print("‚Ä¢ üìä –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è")
                
                print(f"\\n‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø:")
                print("‚Ä¢ üîÑ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ")
                print("‚Ä¢ üìà –í–æ–∑–º–æ–∂–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ")
                print("‚Ä¢ ‚è∞ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã")
                print("‚Ä¢ üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–º")
                
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg', 'Unknown error')}")
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                error_msg = data.get('msg', '').lower()
                if 'insufficient' in error_msg:
                    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏")
                elif 'price' in error_msg:
                    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞")
                elif 'size' in error_msg:
                    print("üí° –†–∞–∑–º–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
                
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None


def get_current_positions(symbol=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    config = load_config()
    if not config:
        return None
    
    timestamp = str(int(time.time() * 1000))
    method = 'GET'
    request_path = '/api/v2/mix/position/all-position'
    query_string = 'productType=USDT-FUTURES'
    
    if symbol:
        query_string += f'&symbol={symbol}'
    
    signature = generate_signature(timestamp, method, request_path, query_string)
    if not signature:
        return None
    
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    try:
        url = f"{config['baseURL']}{request_path}?{query_string}"
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000':
                return data.get('data', [])
        
        return []
    except:
        return []


def place_take_profit_interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä–∞"""
    print("üéØ –†–ê–ó–ú–ï–©–ï–ù–ò–ï –¢–ï–ô–ö-–ü–†–û–§–ò–¢ –û–†–î–ï–†–ê")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª
    symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
    if not symbol:
        print("‚ùå –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    print(f"\\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {symbol}...")
    positions = get_current_positions(symbol)
    
    current_position = None
    if positions:
        for pos in positions:
            if pos.get('symbol') == symbol:
                size = float(pos.get('size', 0))
                if size != 0:
                    current_position = pos
                    break
    
    if current_position:
        pos_side = current_position.get('side', 'unknown')
        pos_size = current_position.get('size', '0')
        pos_price = current_position.get('averageOpenPrice', '0')
        unrealized_pnl = current_position.get('unrealizedPL', '0')
        
        side_emoji = "üü¢" if pos_side == "long" else "üî¥"
        pnl_emoji = "üìà" if float(unrealized_pnl) > 0 else "üìâ"
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è:")
        print(f"{side_emoji} –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {pos_side.upper()}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {pos_size}")
        print(f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${pos_price}")
        print(f"{pnl_emoji} –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: ${unrealized_pnl}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è
        close_side = "sell" if pos_side == "long" else "buy"
        
        use_current = input(f"\\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é? (yes/no): ").strip().lower()
        if use_current in ['yes', 'y', '–¥–∞']:
            side = close_side
            size = pos_size
            
            print(f"\\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è {pos_side.upper()} –ø–æ–∑–∏—Ü–∏–∏:")
            print(f"üìä –†–∞–∑–º–µ—Ä: {size}")
            print(f"üîÑ –°—Ç–æ—Ä–æ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {side.upper()}")
        else:
            # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            side = None
            size = None
    else:
        print("‚ÑπÔ∏è –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        side = None
        size = None
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if not side:
        print("\\nüìä –ö–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é –∑–∞–∫—Ä—ã–≤–∞–µ—Ç–µ?")
        print("1. üü¢ –ó–∞–∫—Ä—ã—Ç—å –õ–û–ù–ì (–ø—Ä–æ–¥–∞—Ç—å)")
        print("2. üî¥ –ó–∞–∫—Ä—ã—Ç—å –®–û–†–¢ (–∫—É–ø–∏—Ç—å)")
        
        side_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
        
        if side_choice == "1":
            side = "sell"
            print("üü¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–ª—è –õ–û–ù–ì –ø–æ–∑–∏—Ü–∏–∏ (–ø—Ä–æ–¥–∞–∂–∞)")
        elif side_choice == "2":
            side = "buy"
            print("üî¥ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–ª—è –®–û–†–¢ –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ–∫—É–ø–∫–∞)")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return None
    
    if not size:
        try:
            size = input(f"üìä –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è: ").strip()
            size_float = float(size)
            if size_float <= 0:
                print("‚ùå –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return None
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
            return None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
    try:
        print(f"\\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞:")
        if side == "sell":  # –ó–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–Ω–≥–∞
            print("üìà –î–ª—è –õ–û–ù–ì: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –í–´–®–ï —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞")
            print("üéØ –û–±—ã—á–Ω–æ +2-5% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞")
        else:  # –ó–∞–∫—Ä—ã—Ç–∏–µ —à–æ—Ä—Ç–∞
            print("üìâ –î–ª—è –®–û–†–¢: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ù–ò–ñ–ï —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞")
            print("üéØ –û–±—ã—á–Ω–æ -2-5% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞")
        
        trigger_price = input(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ ($): ").strip()
        trigger_float = float(trigger_price)
        if trigger_float <= 0:
            print("‚ùå –¶–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return None
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞")
        return None
    
    # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    client_oid = input("üÜî Client OID (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()
    if not client_oid:
        client_oid = None
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    print(f"\\nüìã –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –¢–ï–ô–ö-–ü–†–û–§–ò–¢ –û–†–î–ï–†–ê:")
    print("=" * 45)
    side_emoji = "üü¢" if side == "sell" else "üî¥"
    position_type = "–õ–û–ù–ì" if side == "sell" else "–®–û–†–¢"
    
    print(f"üí± –ü–∞—Ä–∞: {symbol}")
    print(f"{side_emoji} –ó–∞–∫—Ä—ã—Ç–∏–µ {position_type} –ø–æ–∑–∏—Ü–∏–∏")
    print(f"üìä –†–∞–∑–º–µ—Ä: {size}")
    print(f"üéØ –¶–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: ${trigger_price}")
    
    # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
    if current_position and current_position.get('averageOpenPrice'):
        try:
            entry_price = float(current_position.get('averageOpenPrice', 0))
            size_float = float(size)
            
            if side == "sell":  # –õ–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—è
                profit_per_unit = trigger_float - entry_price
                profit_pct = (profit_per_unit / entry_price) * 100
            else:  # –®–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏—è
                profit_per_unit = entry_price - trigger_float
                profit_pct = (profit_per_unit / entry_price) * 100
            
            total_profit = profit_per_unit * size_float
            
            print(f"\\nüí∞ –†–ê–°–ß–ï–¢ –ü–†–ò–ë–´–õ–ò:")
            print(f"üìà –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry_price:.4f}")
            print(f"üéØ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${trigger_float:.4f}")
            print(f"üíµ –ü—Ä–∏–±—ã–ª—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: ${profit_per_unit:.4f}")
            print(f"üìä –ü—Ä–∏–±—ã–ª—å –≤ %: {profit_pct:.2f}%")
            print(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit:.2f}")
            
            if profit_pct < 1:
                print("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å (< 1%)")
            elif profit_pct > 10:
                print("üéØ –í—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å (> 10%)")
            
        except:
            pass
    
    # –õ–æ–≥–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    print(f"\\nüí° –õ–û–ì–ò–ö–ê –ò–°–ü–û–õ–ù–ï–ù–ò–Ø:")
    if side == "sell":
        print(f"üìà –ü—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã –¥–æ ${trigger_price} ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞")
    else:
        print(f"üìâ –ü—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–æ ${trigger_price} ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞")
    print("üîÑ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ")
    
    confirm = input("\\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞? (yes/no): ").strip().lower()
    
    if confirm in ['yes', 'y', '–¥–∞']:
        return place_take_profit_order(symbol, side, size, trigger_price, client_oid)
    else:
        print("‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return None


def place_profit_ladder():
    """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ª–µ—Å—Ç–Ω–∏—Ü—ã —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤"""
    print("üìà –õ–ï–°–¢–ù–ò–¶–ê –¢–ï–ô–ö-–ü–†–û–§–ò–¢–û–í")
    print("=" * 40)
    print("üí° –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö")
    
    symbol = input("üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: ").strip().upper()
    if not symbol:
        print("‚ùå –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    positions = get_current_positions(symbol)
    current_position = None
    
    if positions:
        for pos in positions:
            if pos.get('symbol') == symbol and float(pos.get('size', 0)) != 0:
                current_position = pos
                break
    
    if not current_position:
        print("‚ùå –û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    pos_side = current_position.get('side', 'unknown')
    pos_size = float(current_position.get('size', 0))
    pos_price = float(current_position.get('averageOpenPrice', 0))
    
    side_emoji = "üü¢" if pos_side == "long" else "üî¥"
    close_side = "sell" if pos_side == "long" else "buy"
    
    print(f"\\n‚úÖ –ü–æ–∑–∏—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞:")
    print(f"{side_emoji} {pos_side.upper()} {pos_size} –ø–æ —Ü–µ–Ω–µ ${pos_price:.4f}")
    
    try:
        levels = int(input("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ (2-5): ").strip())
        if levels < 2 or levels > 5:
            print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 5")
            return None
        
        print(f"\\nüí∞ –í–≤–µ–¥–∏—Ç–µ {levels} —Ü–µ–Ω —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞:")
        prices = []
        sizes = []
        
        remaining_size = pos_size
        
        for i in range(levels):
            price = float(input(f"üéØ –£—Ä–æ–≤–µ–Ω—å {i+1} - —Ü–µ–Ω–∞: ").strip())
            
            if i < levels - 1:
                size_pct = float(input(f"üìä –£—Ä–æ–≤–µ–Ω—å {i+1} - % –ø–æ–∑–∏—Ü–∏–∏ (–æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è): ").strip())
                size = (remaining_size * size_pct) / 100
                remaining_size -= size
            else:
                size = remaining_size  # –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
            
            prices.append(price)
            sizes.append(size)
            
            print(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å {i+1}: ${price:.4f} | –†–∞–∑–º–µ—Ä: {size:.4f}")
        
        print(f"\\nüìã –õ–ï–°–¢–ù–ò–¶–ê –¢–ï–ô–ö-–ü–†–û–§–ò–¢–û–í:")
        print("=" * 50)
        
        total_profit = 0
        for i, (price, size) in enumerate(zip(prices, sizes), 1):
            if pos_side == "long":
                profit = (price - pos_price) * size
            else:
                profit = (pos_price - price) * size
            
            total_profit += profit
            print(f"üéØ –£—Ä–æ–≤–µ–Ω—å {i}: ${price:.4f} | {size:.4f} | –ü—Ä–∏–±—ã–ª—å: ${profit:.2f}")
        
        print(f"üí∞ –û–±—â–∞—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit:.2f}")
        
        confirm = input("\\n–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª–µ—Å—Ç–Ω–∏—Ü—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤? (yes/no): ").strip().lower()
        
        if confirm in ['yes', 'y', '–¥–∞']:
            success_count = 0
            
            for i, (price, size) in enumerate(zip(prices, sizes), 1):
                print(f"\\n[{i}/{levels}] –†–∞–∑–º–µ—â–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è {i}...")
                client_oid = f"tp_ladder_{i}_{int(time.time())}"
                
                result = place_take_profit_order(symbol, close_side, str(size), str(price), client_oid)
                if result:
                    success_count += 1
                    print(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å {i} —Ä–∞–∑–º–µ—â–µ–Ω")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è {i}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(0.5)
            
            print(f"\\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {success_count}/{levels}")
            print(f"‚ùå –û—à–∏–±–æ–∫: {levels - success_count}/{levels}")
            
            return success_count > 0
        else:
            print("‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ BITGET USDT PERP - –¢–ï–ô–ö-–ü–†–û–§–ò–¢ –û–†–î–ï–†–ê")
    print("=" * 50)
    
    print("\\nüîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä")
    print("2. üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ")
    print("3. üìà –õ–µ—Å—Ç–Ω–∏—Ü–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤")
    print("4. üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏")
    
    try:
        choice = input("\\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
        
        if choice == "1":
            symbol = input("üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: ").strip().upper()
            side = input("üìä –°—Ç–æ—Ä–æ–Ω–∞ (buy/sell): ").strip().lower()
            size = input("üìä –†–∞–∑–º–µ—Ä: ").strip()
            trigger_price = input("üéØ –¶–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: ").strip()
            
            if all([symbol, side, size, trigger_price]):
                place_take_profit_order(symbol, side, size, trigger_price)
            else:
                print("‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã")
                
        elif choice == "2":
            place_take_profit_interactive()
            
        elif choice == "3":
            place_profit_ladder()
            
        elif choice == "4":
            symbol = input("üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–∏–ª–∏ Enter –¥–ª—è –≤—Å–µ—Ö): ").strip().upper()
            positions = get_current_positions(symbol if symbol else None)
            
            if positions:
                print(f"\\nüìä –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò:")
                print("=" * 60)
                
                for pos in positions:
                    if float(pos.get('size', 0)) != 0:
                        symbol = pos.get('symbol', 'N/A')
                        side = pos.get('side', 'unknown')
                        size = pos.get('size', '0')
                        price = pos.get('averageOpenPrice', '0')
                        pnl = pos.get('unrealizedPL', '0')
                        
                        side_emoji = "üü¢" if side == "long" else "üî¥"
                        pnl_emoji = "üìà" if float(pnl) > 0 else "üìâ"
                        
                        print(f"{side_emoji} {symbol} | {side.upper()} | {size} | ${price} | {pnl_emoji} ${pnl}")
            else:
                print("‚ÑπÔ∏è –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
