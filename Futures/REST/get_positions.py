#!/usr/bin/env python3
"""
Bitget API - –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π (USDT Perpetual Futures)
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
https://www.bitget.com/api-doc/contract/position/Get-Position-Information

–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –î–∞
–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: 10 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É
"""

import requests
import json
import hmac
import hashlib
import base64
import time
from datetime import datetime
from pathlib import Path

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        config_path = Path(__file__).parent.parent.parent / "config.json"
        with open(config_path, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ config.json!")
        return None

def create_signature(timestamp, method, request_path, query_string, body, secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        secret_key.encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')

def get_positions(config, product_type='USDT-FUTURES'):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    
    params = {
        'productType': product_type
    }
    
    query_string = '&'.join([f"{k}={v}" for k, v in params.items()])
    timestamp = str(int(time.time() * 1000))
    method = 'GET'
    request_path = '/api/v2/mix/position/all-position'
    body = ''
    
    signature = create_signature(timestamp, method, request_path, query_string, body, config['secretKey'])
    
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    url = f"{config['baseURL']}{request_path}?{query_string}"
    
    try:
        print("üöÄ Bitget USDT Perpetual Futures - Open Positions")
        print("=" * 55)
        print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
        
        response = requests.get(url, headers=headers, timeout=30)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        response_data = response.json() if response.status_code == 200 else {"error": response.text}
        save_response_example('futures_positions', {
            'request': {
                'method': method,
                'url': request_path,
                'params': params
            },
            'response': response_data,
            'status_code': response.status_code,
            'timestamp': datetime.now().isoformat()
        })
        
        if response.status_code == 200:
            data = response.json()
            
            print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print("üìã RAW JSON Response –æ—Ç –±–∏—Ä–∂–∏:")
            print("=" * 50)
            print(json.dumps(data, indent=2, ensure_ascii=False))
            print("=" * 50)
            
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def save_response_example(endpoint_name, data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞"""
    try:
        filename = f"../../docs/response_examples/{endpoint_name}_{int(time.time())}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"üíæ –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {e}")

def display_positions(positions):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö"""
    
    if not positions:
        print("üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–∞–∑–º–µ—Ä–æ–º > 0
    active_positions = [pos for pos in positions if float(pos.get('total', 0)) != 0]
    
    if not active_positions:
        print("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        return
    
    print(f"üìä –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò ({len(active_positions)} —à—Ç.)")
    print("=" * 80)
    
    total_unrealized_pnl = 0
    total_notional = 0
    
    for i, position in enumerate(active_positions, 1):
        symbol = position.get('symbol', 'N/A')
        side = position.get('holdSide', 'N/A')
        size = float(position.get('total', 0))
        available = float(position.get('available', 0))
        locked = float(position.get('locked', 0))
        margin = float(position.get('margin', 0))
        unrealized_pnl = float(position.get('unrealizedPL', 0))
        unrealized_pnl_rate = float(position.get('unrealizedPLR', 0))
        leverage = position.get('leverage', 'N/A')
        margin_mode = position.get('marginMode', 'N/A')
        avg_price = float(position.get('averageOpenPrice', 0))
        mark_price = float(position.get('markPrice', 0))
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
        notional_value = size * mark_price
        total_notional += notional_value
        total_unrealized_pnl += unrealized_pnl
        
        print(f"\nüìà –ü–û–ó–ò–¶–ò–Ø #{i}: {symbol}")
        print("-" * 40)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        side_emoji = "üü¢" if side == "long" else "üî¥" if side == "short" else "‚ö™"
        print(f"üéØ –°—Ç–æ—Ä–æ–Ω–∞: {side_emoji} {side.upper()}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {size} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
        print(f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: {available} | üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {locked}")
        
        # –¶–µ–Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: ${avg_price:.4f}")
        print(f"üìä –¢–µ–∫—É—â–∞—è –º–∞—Ä–∫-—Ü–µ–Ω–∞: ${mark_price:.4f}")
        print(f"üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: ${notional_value:.2f}")
        
        # P&L –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        pnl_emoji = "üü¢" if unrealized_pnl >= 0 else "üî¥"
        print(f"üìà –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è P&L: {pnl_emoji} ${unrealized_pnl:.4f} ({unrealized_pnl_rate:.2%})")
        
        # –ú–∞—Ä–∂–∞ –∏ –ø–ª–µ—á–æ
        print(f"‚öñÔ∏è –†–µ–∂–∏–º –º–∞—Ä–∂–∏: {margin_mode}")
        print(f"üî¢ –ü–ª–µ—á–æ: {leverage}x")
        print(f"üí≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞: ${margin:.4f}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        liquidation_price = position.get('liquidationPrice')
        if liquidation_price and float(liquidation_price) > 0:
            print(f"‚ö†Ô∏è –¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: ${float(liquidation_price):.4f}")
        
        auto_close_at = position.get('autoMarginReductionPriority')
        if auto_close_at:
            print(f"üîÑ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏—è: {auto_close_at}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 30)
    print(f"üî¢ –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(active_positions)}")
    print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π: ${total_notional:.2f}")
    
    total_pnl_emoji = "üü¢" if total_unrealized_pnl >= 0 else "üî¥"
    print(f"üìà –û–±—â–∞—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è P&L: {total_pnl_emoji} ${total_unrealized_pnl:.4f}")
    
    if total_notional > 0:
        total_pnl_rate = (total_unrealized_pnl / total_notional) * 100
        print(f"üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç P&L: {total_pnl_emoji} {total_pnl_rate:.2f}%")
    
    print(f"\nüí° –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò:")
    print("-" * 25)
    print("üìù –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: python place_limit_order.py")
    print("üîÑ –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: python place_market_order.py")
    print("‚öôÔ∏è –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–µ—á–∞: python set_leverage.py")

def main():
    config_path = Path(__file__).parent.parent.parent / "config.json"
    with open(config_path, 'r') as file:
        config = json.load(file)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
    positions = get_positions(config)
    
    if positions is not None:
        print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö")

if __name__ == "__main__":
    main()
