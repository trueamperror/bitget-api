#!/usr/bin/env python3
"""
Bitget API - –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (USDT Perpetual Futures)
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Ñ—å—é—á–µ—Ä—Å–∞–º–∏

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
https://www.bitget.com/api-doc/contract/account/Get-Account-Information

–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –î–∞
–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: 10 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É
"""

import requests
import json
import hmac
import hashlib
import base64
import time
from datetime import datetime
from pathlib import Path

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        config_path = Path(__file__).parent.parent.parent / "config.json"
        with open(config_path, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.json —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏")
        return None
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ config.json!")
        return None

def create_signature(timestamp, method, request_path, query_string, body, secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        secret_key.encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')

def get_account_balance(config, product_type='USDT-FUTURES'):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        'productType': product_type
    }
    
    query_string = '&'.join([f"{k}={v}" for k, v in params.items()])
    timestamp = str(int(time.time() * 1000))
    method = 'GET'
    request_path = '/api/v2/mix/account/accounts'
    body = ''
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
    signature = create_signature(timestamp, method, request_path, query_string, body, config['secretKey'])
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    # URL –∑–∞–ø—Ä–æ—Å–∞
    url = f"{config['baseURL']}{request_path}?{query_string}"
    
    try:
        print("üöÄ Bitget USDT Perpetual Futures - Account Balance")
        print("=" * 55)
        print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ...")
        print(f"üåê –≠–Ω–¥–ø–æ–∏–Ω—Ç: {request_path}")
        
        response = requests.get(url, headers=headers, timeout=30)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        response_data = response.json() if response.status_code == 200 else {"error": response.text}
        save_response_example('futures_account_balance', {
            'request': {
                'method': method,
                'url': request_path,
                'params': params
            },
            'response': response_data,
            'status_code': response.status_code,
            'timestamp': datetime.now().isoformat()
        })
        
        if response.status_code == 200:
            data = response.json()
            
            print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print("üìã RAW JSON Response –æ—Ç –±–∏—Ä–∂–∏:")
            print("=" * 50)
            print(json.dumps(data, indent=2, ensure_ascii=False))
            print("=" * 50)
            
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def save_response_example(endpoint_name, data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞"""
    try:
        filename = f"../../docs/response_examples/{endpoint_name}_{int(time.time())}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"üíæ –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {e}")

def display_account_info(account_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ"""
    
    if not account_data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ")
        return
    
    print(f"\nüí∞ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ê–õ–ê–ù–°–ï FUTURES –ê–ö–ö–ê–£–ù–¢–ê")
    print("=" * 60)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç)
    for account in account_data:
        margin_coin = account.get('marginCoin', 'N/A')
        
        print(f"\nü™ô –í–∞–ª—é—Ç–∞ –º–∞—Ä–∂–∏: {margin_coin}")
        print("-" * 40)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
        locked = float(account.get('locked', 0))
        available = float(account.get('available', 0))
        cross_max_available = float(account.get('crossMaxAvailable', 0))
        fixed_max_available = float(account.get('fixedMaxAvailable', 0))
        max_transfer_out = float(account.get('maxTransferOut', 0))
        equity = float(account.get('equity', 0))
        usd_tvalue = float(account.get('usdtTotalAmount', 0))
        
        print(f"üí≥ –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: {equity:.4f} {margin_coin}")
        print(f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: {available:.4f} {margin_coin}")
        print(f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {locked:.4f} {margin_coin}")
        print(f"üìä –í USD —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ: ${usd_tvalue:.2f}")
        
        print(f"\nüìà –¢–û–†–ì–û–í–´–ï –õ–ò–ú–ò–¢–´:")
        print("-" * 30)
        print(f"üîÑ –ö—Ä–æ—Å—Å-–º–∞—Ä–∂–∞ (–º–∞–∫—Å. –¥–æ—Å—Ç—É–ø–Ω–æ): {cross_max_available:.4f} {margin_coin}")
        print(f"üéØ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞ (–º–∞–∫—Å. –¥–æ—Å—Ç—É–ø–Ω–æ): {fixed_max_available:.4f} {margin_coin}")
        print(f"üì§ –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞: {max_transfer_out:.4f} {margin_coin}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        unrealized_pl = account.get('unrealizedPL')
        if unrealized_pl is not None:
            unrealized_pl = float(unrealized_pl)
            print(f"üíπ –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è P&L: {unrealized_pl:.4f} {margin_coin}")
        
        bonus = account.get('bonus')
        if bonus is not None:
            bonus = float(bonus)
            print(f"üéÅ –ë–æ–Ω—É—Å: {bonus:.4f} {margin_coin}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö
        cross_risk_rate = account.get('crossRiskRate')
        if cross_risk_rate is not None:
            risk_rate = float(cross_risk_rate)
            print(f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (–∫—Ä–æ—Å—Å): {risk_rate:.2%}")
    
    print(f"\nüí° –ü–û–î–°–ö–ê–ó–ö–ò:")
    print("-" * 20)
    print("üîç –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: python get_positions.py")
    print("üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: python get_open_orders.py")
    print("üí± –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: python place_order.py")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase', 'baseURL']
    for key in required_keys:
        if not config.get(key):
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}' –≤ config.json")
            return
    
    print("üîë API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    balance_data = get_account_balance(config)
    
    if balance_data:
        print(f"\n‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        print(f"\nüîç –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç–µ?")
        for i, account in enumerate(balance_data):
            margin_coin = account.get('marginCoin', 'N/A')
            available = float(account.get('available', 0))
            print(f"{i+1}. {margin_coin} (–¥–æ—Å—Ç—É–ø–Ω–æ: {available:.4f})")
        
        print("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ")

if __name__ == "__main__":
    main()
