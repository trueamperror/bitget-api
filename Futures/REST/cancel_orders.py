#!/usr/bin/env python3
"""
–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ USDT Perpetual Futures –Ω–∞ Bitget
"""

import json
import hmac
import hashlib
import base64
import time
import requests
from datetime import datetime


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('../../config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None


def create_signature(timestamp, method, request_path, query_string, body, secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        secret_key.encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')


def make_authenticated_request(config, method, endpoint, params=None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    timestamp = str(int(time.time() * 1000))
    query_string = ''
    body = ''
    
    if method.upper() == 'GET' and params:
        query_string = '&'.join([f"{k}={v}" for k, v in params.items()])
    elif method.upper() == 'POST' and params:
        body = json.dumps(params)
    
    signature = create_signature(timestamp, method, endpoint, query_string, body, config['secretKey'])
    
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    url = f"{config['baseURL']}{endpoint}"
    if query_string:
        url += f"?{query_string}"
    
    try:
        if method.upper() == 'GET':
            response = requests.get(url, headers=headers, timeout=30)
        else:
            response = requests.post(url, headers=headers, data=body, timeout=30)
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå HTTP {response.status_code}: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


def save_response_example(endpoint_name, data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞"""
    try:
        filename = f"../../docs/{endpoint_name}_response.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"üíæ –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ BITGET FUTURES")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase', 'baseURL']
    for key in required_keys:
        if not config.get(key):
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}' –≤ config.json")
            return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö futures –æ—Ä–¥–µ—Ä–æ–≤...")
    response = make_authenticated_request(config, 'GET', '/api/v2/mix/order/orders-pending', 
                                        {'productType': 'USDT-FUTURES'})
    
    if response:
        print("\nüìã RAW JSON RESPONSE:")
        print("=" * 50)
        print(json.dumps(response, indent=2, ensure_ascii=False))
        print("=" * 50)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
        save_response_example('get_open_orders', response)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if response.get('code') == '00000':
            data = response.get('data', {})
            orders = data.get('entrustedList', []) if isinstance(data, dict) else []
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"‚úÖ –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(orders)}")
            
            if orders and len(orders) > 0:
                symbols = []
                for order in orders:
                    if isinstance(order, dict) and 'symbol' in order:
                        symbols.append(order['symbol'])
                
                if symbols:
                    unique_symbols = set(symbols)
                    print(f"üí± –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(unique_symbols)}")
                    print(f"üîó –°–∏–º–≤–æ–ª—ã: {', '.join(sorted(unique_symbols))}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–æ–≤
                print(f"\nüìã –î–ï–¢–ê–õ–ò –û–†–î–ï–†–û–í:")
                for i, order in enumerate(orders[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    if isinstance(order, dict):
                        symbol = order.get('symbol', 'N/A')
                        side = order.get('side', 'N/A')
                        size = order.get('size', 'N/A')
                        price = order.get('price', 'N/A')
                        order_type = order.get('orderType', 'N/A')
                        print(f"   {i}. {symbol} {side.upper()} {size} @ ${price} ({order_type})")
                
                if len(orders) > 5:
                    print(f"   ... –∏ –µ—â–µ {len(orders) - 5} –æ—Ä–¥–µ—Ä–æ–≤")
            else:
                print("üìù –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.get('msg')}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
