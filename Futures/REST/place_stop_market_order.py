#!/usr/bin/env python3
"""
Bitget USDT Perpetual REST API - Place Stop Market Order

–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤.
–û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Å—Ç–æ–ø-—Ü–µ–Ω—ã.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/contract/trade/Place-Order

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
- side: —Å—Ç–æ—Ä–æ–Ω–∞ (buy/sell) 
- size: —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
- triggerPrice: —Å—Ç–æ–ø-—Ü–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
- orderType: stop_market
"""

import requests
import json
import hmac
import hashlib
import base64
import time
from datetime import datetime


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('/Users/timurbogatyrev/Documents/VS Code/Algo/ExchangeAPI/Bitget/config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None


def generate_signature(timestamp, method, request_path, query_string='', body=''):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    config = load_config()
    if not config:
        return None
    
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        config['secretKey'].encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')


def place_stop_market_order(symbol, side, size, trigger_price, client_oid=None):
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞
    
    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
        side (str): –°—Ç–æ—Ä–æ–Ω–∞ (buy/sell)
        size (str): –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        trigger_price (str): –°—Ç–æ–ø-—Ü–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        client_oid (str, optional): –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID –æ—Ä–¥–µ—Ä–∞
    
    Returns:
        dict: –û—Ç–≤–µ—Ç API —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞
    """
    config = load_config()
    if not config:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return None
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if side not in ['buy', 'sell']:
        print("‚ùå –°—Ç–æ—Ä–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'buy' –∏–ª–∏ 'sell'")
        return None
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    timestamp = str(int(time.time() * 1000))
    method = 'POST'
    request_path = '/api/v2/mix/order/place-order'
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if not client_oid:
        client_oid = f"stop_market_{int(time.time())}"
    
    body_data = {
        'symbol': symbol,
        'productType': 'USDT-FUTURES',
        'marginMode': 'crossed',
        'marginCoin': 'USDT',
        'side': side,
        'orderType': 'stop_market',
        'size': str(size),
        'triggerPrice': str(trigger_price),
        'clientOid': client_oid
    }
    
    body = json.dumps(body_data)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
    signature = generate_signature(timestamp, method, request_path, '', body)
    if not signature:
        return None
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    try:
        url = f"{config['baseURL']}{request_path}"
        
        side_emoji = "üü¢" if side == "buy" else "üî¥"
        print(f"üõë –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞...")
        print(f"üí± –ü–∞—Ä–∞: {symbol}")
        print(f"{side_emoji} –°—Ç–æ—Ä–æ–Ω–∞: {side.upper()}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {size}")
        print(f"üéØ –°—Ç–æ–ø-—Ü–µ–Ω–∞: ${trigger_price}")
        print(f"üÜî Client OID: {client_oid}")
        
        response = requests.post(url, headers=headers, data=body)
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('code') == '00000':
                order_data = data.get('data', {})
                
                print("\\n‚úÖ –°—Ç–æ–ø-–º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω!")
                print("=" * 50)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ
                order_id = order_data.get('orderId', 'N/A')
                client_order_id = order_data.get('clientOid', client_oid)
                
                print(f"üÜî ID –æ—Ä–¥–µ—Ä–∞: {order_id}")
                print(f"üë§ Client OID: {client_order_id}")
                print(f"üí± –°–∏–º–≤–æ–ª: {symbol}")
                print(f"{side_emoji} –°—Ç–æ—Ä–æ–Ω–∞: {side.upper()}")
                print(f"üìä –†–∞–∑–º–µ—Ä: {size}")
                print(f"üõë –¢–∏–ø: STOP MARKET")
                print(f"üéØ –¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: ${trigger_price}")
                
                # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞
                print(f"\\nüí° –ú–ï–•–ê–ù–ò–ó–ú –°–¢–û–ü-–ú–ê–†–ö–ï–¢ –û–†–î–ï–†–ê:")
                if side == "buy":
                    print("üü¢ –ü—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã –¥–æ ${} –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ".format(trigger_price))
                    print("üìà –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–æ–Ω–≥ –ø—Ä–∏ –ø—Ä–æ–±–∏—Ç–∏–∏ —É—Ä–æ–≤–Ω—è")
                else:
                    print("üî¥ –ü—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–æ ${} –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ".format(trigger_price))
                    print("üìâ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —à–æ—Ä—Ç –ø—Ä–∏ –ø—Ä–æ–±–∏—Ç–∏–∏ —É—Ä–æ–≤–Ω—è")
                
                print(f"\\n‚ö†Ô∏è –í–ê–ñ–ù–û:")
                print("‚Ä¢ –û—Ä–¥–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω –ø–æ —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ")
                print("‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã")
                print("‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞")
                
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö
                try:
                    size_float = float(size)
                    trigger_float = float(trigger_price)
                    notional = size_float * trigger_float
                    
                    if notional > 10000:  # –ë–æ–ª—å—à–∞—è –ø–æ–∑–∏—Ü–∏—è
                        print(f"\\nüö® –ö–†–£–ü–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø: ${notional:,.2f}")
                        print("‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏!")
                    
                except:
                    pass
                
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg', 'Unknown error')}")
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                error_msg = data.get('msg', '').lower()
                if 'insufficient' in error_msg:
                    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞")
                elif 'price' in error_msg:
                    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–æ–ø-—Ü–µ–Ω—ã")
                elif 'size' in error_msg:
                    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞")
                
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None


def place_stop_market_interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞"""
    print("üõë –†–ê–ó–ú–ï–©–ï–ù–ò–ï –°–¢–û–ü-–ú–ê–†–ö–ï–¢ –û–†–î–ï–†–ê")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª
    symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
    if not symbol:
        print("‚ùå –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ—Ä–æ–Ω—É
    print("\\nüìä –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É:")
    print("1. üü¢ BUY - –ü–æ–∫—É–ø–∫–∞ (–ª–æ–Ω–≥)")
    print("2. üî¥ SELL - –ü—Ä–æ–¥–∞–∂–∞ (—à–æ—Ä—Ç)")
    
    side_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
    
    if side_choice == "1":
        side = "buy"
    elif side_choice == "2":
        side = "sell"
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä
    try:
        size = input(f"üìä –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ").strip()
        size_float = float(size)
        if size_float <= 0:
            print("‚ùå –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return None
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–ø-—Ü–µ–Ω—É
    try:
        trigger_price = input(f"üéØ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø-—Ü–µ–Ω—É —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è ($): ").strip()
        trigger_float = float(trigger_price)
        if trigger_float <= 0:
            print("‚ùå –°—Ç–æ–ø-—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return None
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–ø-—Ü–µ–Ω–∞")
        return None
    
    # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    client_oid = input("üÜî Client OID (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()
    if not client_oid:
        client_oid = None
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\\nüìã –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–†–î–ï–†–ê:")
    print("=" * 30)
    side_emoji = "üü¢" if side == "buy" else "üî¥"
    print(f"üí± –ü–∞—Ä–∞: {symbol}")
    print(f"{side_emoji} –°—Ç–æ—Ä–æ–Ω–∞: {side.upper()}")
    print(f"üìä –†–∞–∑–º–µ—Ä: {size}")
    print(f"üõë –¢–∏–ø: STOP MARKET")
    print(f"üéØ –°—Ç–æ–ø-—Ü–µ–Ω–∞: ${trigger_price}")
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    try:
        notional = size_float * trigger_float
        print(f"üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${notional:,.2f}")
    except:
        pass
    
    # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏
    print(f"\\nüí° –õ–û–ì–ò–ö–ê –ò–°–ü–û–õ–ù–ï–ù–ò–Ø:")
    if side == "buy":
        print(f"üü¢ –û—Ä–¥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã –¥–æ ${trigger_price}")
        print("üìà –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ –ø–æ–∫—É–ø–∫–∏")
    else:
        print(f"üî¥ –û—Ä–¥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–æ ${trigger_price}")
        print("üìâ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ –ø—Ä–æ–¥–∞–∂–∏")
    
    confirm = input("\\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ? (yes/no): ").strip().lower()
    
    if confirm in ['yes', 'y', '–¥–∞']:
        return place_stop_market_order(symbol, side, size, trigger_price, client_oid)
    else:
        print("‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return None


def place_stop_loss_order():
    """–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä–∞ (–∑–∞—â–∏—Ç–Ω—ã–π —Å—Ç–æ–ø)"""
    print("üõ°Ô∏è –†–ê–ó–ú–ï–©–ï–ù–ò–ï –°–¢–û–ü-–õ–û–°–° –û–†–î–ï–†–ê")
    print("=" * 40)
    
    symbol = input("üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: ").strip().upper()
    if not symbol:
        print("‚ùå –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        return None
    
    print("\\nüìä –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã:")
    print("1. üî¥ –ó–∞—â–∏—Ç–∞ –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ (SELL —Å—Ç–æ–ø)")
    print("2. üü¢ –ó–∞—â–∏—Ç–∞ —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–∏ (BUY —Å—Ç–æ–ø)")
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
    
    if choice == "1":
        side = "sell"
        print("üî¥ –°—Ç–æ–ø –¥–ª—è –∑–∞—â–∏—Ç—ã –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏")
        print("üí° –û—Ä–¥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã (–∑–∞—â–∏—Ç–∞ –æ—Ç —É–±—ã—Ç–∫–æ–≤)")
    elif choice == "2":
        side = "buy"
        print("üü¢ –°—Ç–æ–ø –¥–ª—è –∑–∞—â–∏—Ç—ã —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–∏")
        print("üí° –û—Ä–¥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã (–∑–∞—â–∏—Ç–∞ –æ—Ç —É–±—ã—Ç–∫–æ–≤)")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return None
    
    try:
        size = input(f"üìä –†–∞–∑–º–µ—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è: ").strip()
        trigger_price = input(f"üéØ –°—Ç–æ–ø-—Ü–µ–Ω–∞ –∑–∞—â–∏—Ç—ã ($): ").strip()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        print(f"\\nüõ°Ô∏è –°–¢–û–ü-–õ–û–°–° –ó–ê–©–ò–¢–ê:")
        print(f"üí± {symbol}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {size}")
        print(f"üéØ –¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: ${trigger_price}")
        print(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ!")
        
        confirm = input("\\n–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—â–∏—Ç–Ω—ã–π —Å—Ç–æ–ø? (yes/no): ").strip().lower()
        
        if confirm in ['yes', 'y', '–¥–∞']:
            client_oid = f"stop_loss_{int(time.time())}"
            return place_stop_market_order(symbol, side, size, trigger_price, client_oid)
        else:
            print("‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
        return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üõë BITGET USDT PERP - –°–¢–û–ü-–ú–ê–†–ö–ï–¢ –û–†–î–ï–†–ê")
    print("=" * 50)
    
    print("\\nüîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. üõë –°—Ç–æ–ø-–º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä")
    print("2. üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ")
    print("3. üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å (–∑–∞—â–∏—Ç–∞)")
    
    try:
        choice = input("\\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == "1":
            symbol = input("üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: ").strip().upper()
            side = input("üìä –°—Ç–æ—Ä–æ–Ω–∞ (buy/sell): ").strip().lower()
            size = input("üìä –†–∞–∑–º–µ—Ä: ").strip()
            trigger_price = input("üéØ –°—Ç–æ–ø-—Ü–µ–Ω–∞: ").strip()
            
            if all([symbol, side, size, trigger_price]):
                place_stop_market_order(symbol, side, size, trigger_price)
            else:
                print("‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã")
                
        elif choice == "2":
            place_stop_market_interactive()
            
        elif choice == "3":
            place_stop_loss_order()
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
