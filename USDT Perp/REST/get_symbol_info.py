#!/usr/bin/env python3
"""
Bitget API - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö (USDT Perpetual Futures)
–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
https://www.bitget.com/api-doc/contract/market/Get-Symbol-Information

–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ù–µ—Ç
–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: 20 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É
"""

import requests
import json
from datetime import datetime

def get_symbol_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö"""
    
    url = "https://api.bitget.com/api/v2/mix/market/contracts"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è USDT Perpetual
    params = {
        'productType': 'USDT-FUTURES'  # USDT Perpetual Futures
    }
    
    try:
        print("üöÄ Bitget USDT Perpetual Futures - Get Symbol Info")
        print("=" * 60)
        print("üîç –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö...")
        print(f"üåê –≠–Ω–¥–ø–æ–∏–Ω—Ç: {url}")
        
        response = requests.get(url, params=params, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            
            print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print("üìã RAW JSON Response –æ—Ç –±–∏—Ä–∂–∏ (–ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞):")
            print("=" * 50)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
            display_data = data.copy()
            if display_data.get('data') and len(display_data['data']) > 3:
                display_data['data'] = display_data['data'][:3]
                print(json.dumps(display_data, indent=2, ensure_ascii=False))
                print(f"... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 3 –∏–∑ {len(data.get('data', []))} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                print(json.dumps(data, indent=2, ensure_ascii=False))
            print("=" * 50)
            
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def display_symbols_analysis(symbols):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–´–• –ü–ê–† USDT PERPETUAL FUTURES")
    print("=" * 70)
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    active_symbols = [s for s in symbols if s.get('status') == 'normal']
    suspended_symbols = [s for s in symbols if s.get('status') != 'normal']
    
    print(f"üî¢ –í—Å–µ–≥–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(symbols)}")
    print(f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: {len(active_symbols)}")
    print(f"üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö/–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä: {len(suspended_symbols)}")
    
    # –¢–æ–ø-10 –ø–æ –æ–±—ä–µ–º—É
    print(f"\nüìà –¢–û–ü-10 –ü–ê–† –ü–û –ü–ê–†–ê–ú–ï–¢–†–ê–ú:")
    print("-" * 100)
    print(f"{'–°–∏–º–≤–æ–ª':<20} {'–°—Ç–∞—Ç—É—Å':<10} {'–ú–∏–Ω.—Ä–∞–∑–º–µ—Ä':<15} {'–ú–∞–∫—Å.—Ä–∞–∑–º–µ—Ä':<15} {'–¶–µ–Ω–∞ —Ç–∏–∫–∞':<12} {'–ü–ª–µ—á–æ':<10}")
    print("-" * 100)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10
    active_sorted = sorted(active_symbols, key=lambda x: x.get('symbol', ''))[:10]
    
    for symbol in active_sorted:
        symbol_name = symbol.get('symbol', 'N/A')
        status = "üü¢active" if symbol.get('status') == 'normal' else "üî¥inactive"
        min_size = symbol.get('minTradeNum', 'N/A')
        max_size = symbol.get('maxTradeNum', 'N/A')
        tick_size = symbol.get('priceEndStep', 'N/A')
        leverage = symbol.get('maxLever', 'N/A')
        
        print(f"{symbol_name:<20} {status:<10} {str(min_size):<15} {str(max_size):<15} {str(tick_size):<12} {str(leverage):<10}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–∑–æ–≤—ã–º –∞–∫—Ç–∏–≤–∞–º
    base_coins = {}
    for symbol in symbols:
        base_coin = symbol.get('baseCoin', 'Unknown')
        if base_coin not in base_coins:
            base_coins[base_coin] = 0
        base_coins[base_coin] += 1
    
    print(f"\nüí∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ë–ê–ó–û–í–´–ú –ê–ö–¢–ò–í–ê–ú:")
    print("-" * 40)
    
    # –¢–æ–ø-10 –±–∞–∑–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
    sorted_bases = sorted(base_coins.items(), key=lambda x: x[1], reverse=True)[:10]
    for base, count in sorted_bases:
        print(f"   {base}: {count} –ø–∞—Ä")

def search_symbol(symbols, search_term):
    """–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    if not symbols:
        return None
    
    search_term = search_term.upper()
    found = []
    
    for symbol in symbols:
        symbol_name = symbol.get('symbol', '')
        if search_term in symbol_name:
            found.append(symbol)
    
    return found

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    symbols = get_symbol_info()
    
    if not symbols:
        return
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
    while True:
        print(f"\nüîç –ü–û–ò–°–ö –¢–û–†–ì–û–í–´–• –ü–ê–†")
        print("-" * 30)
        search_term = input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
        
        if search_term.lower() == 'exit':
            break
        
        if not search_term:
            continue
        
        found_symbols = search_symbol(symbols, search_term)
        
        if found_symbols:
            print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(found_symbols)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
            print("-" * 80)
            print(f"{'–°–∏–º–≤–æ–ª':<20} {'–°—Ç–∞—Ç—É—Å':<10} {'–ë–∞–∑–æ–≤–∞—è':<10} {'–ö–æ—Ç–∏—Ä.':<10} {'–ü–ª–µ—á–æ':<10}")
            print("-" * 80)
            
            for symbol in found_symbols[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
                symbol_name = symbol.get('symbol', 'N/A')
                status = "üü¢normal" if symbol.get('status') == 'normal' else "üî¥other"
                base_coin = symbol.get('baseCoin', 'N/A')
                quote_coin = symbol.get('quoteCoin', 'N/A')
                max_lever = symbol.get('maxLever', 'N/A')
                
                print(f"{symbol_name:<20} {status:<10} {base_coin:<10} {quote_coin:<10} {str(max_lever):<10}")
                
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º
            if found_symbols:
                first_symbol = found_symbols[0]
                print(f"\nüìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {first_symbol.get('symbol')}:")
                print("-" * 50)
                
                details = [
                    ('–°–∏–º–≤–æ–ª', first_symbol.get('symbol')),
                    ('–°—Ç–∞—Ç—É—Å', first_symbol.get('status')),
                    ('–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞', first_symbol.get('baseCoin')),
                    ('–ö–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞', first_symbol.get('quoteCoin')),
                    ('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä', first_symbol.get('minTradeNum')),
                    ('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä', first_symbol.get('maxTradeNum')),
                    ('–®–∞–≥ —Ü–µ–Ω—ã', first_symbol.get('priceEndStep')),
                    ('–®–∞–≥ —Ä–∞–∑–º–µ—Ä–∞', first_symbol.get('volumePlace')),
                    ('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ', first_symbol.get('maxLever')),
                    ('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ', first_symbol.get('minLever')),
                    ('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏', first_symbol.get('supportMarginMode')),
                    ('–û—Ç–∫—Ä—ã—Ç–∏–µ –ª–æ–Ω–≥–æ–≤', first_symbol.get('openCostUpRate')),
                    ('–û—Ç–∫—Ä—ã—Ç–∏–µ —à–æ—Ä—Ç–æ–≤', first_symbol.get('openCostDownRate'))
                ]
                
                for label, value in details:
                    print(f"   {label}: {value}")
        else:
            print(f"‚ùå –°–∏–º–≤–æ–ª—ã —Å '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    main()
