#!/usr/bin/env python3
"""
Bitget USDT Perpetual REST API - Place Stop Limit Order

–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤.
–û—Ä–¥–µ—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª–∏–º–∏—Ç–Ω—ã–º –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Å—Ç–æ–ø-—Ü–µ–Ω—ã.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/contract/trade/Place-Order

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
- side: —Å—Ç–æ—Ä–æ–Ω–∞ (buy/sell)
- size: —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
- triggerPrice: —Å—Ç–æ–ø-—Ü–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
- price: –ª–∏–º–∏—Ç–Ω–∞—è —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
- orderType: stop_limit
"""

import requests
import json
import hmac
import hashlib
import base64
import time
from datetime import datetime


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('/Users/timurbogatyrev/Documents/VS Code/Algo/ExchangeAPI/Bitget/config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None


def generate_signature(timestamp, method, request_path, query_string='', body=''):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    config = load_config()
    if not config:
        return None
    
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        config['secretKey'].encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')


def place_stop_limit_order(symbol, side, size, trigger_price, limit_price, client_oid=None):
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä–∞
    
    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
        side (str): –°—Ç–æ—Ä–æ–Ω–∞ (buy/sell)
        size (str): –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        trigger_price (str): –°—Ç–æ–ø-—Ü–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        limit_price (str): –õ–∏–º–∏—Ç–Ω–∞—è —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        client_oid (str, optional): –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID –æ—Ä–¥–µ—Ä–∞
    
    Returns:
        dict: –û—Ç–≤–µ—Ç API —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞
    """
    config = load_config()
    if not config:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase']
    for key in required_keys:
        if key not in config or not config[key]:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return None
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if side not in ['buy', 'sell']:
        print("‚ùå –°—Ç–æ—Ä–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'buy' –∏–ª–∏ 'sell'")
        return None
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    timestamp = str(int(time.time() * 1000))
    method = 'POST'
    request_path = '/api/v2/mix/order/place-order'
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if not client_oid:
        client_oid = f"stop_limit_{int(time.time())}"
    
    body_data = {
        'symbol': symbol,
        'productType': 'USDT-FUTURES',
        'marginMode': 'crossed',
        'marginCoin': 'USDT',
        'side': side,
        'orderType': 'stop_limit',
        'size': str(size),
        'price': str(limit_price),
        'triggerPrice': str(trigger_price),
        'clientOid': client_oid
    }
    
    body = json.dumps(body_data)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
    signature = generate_signature(timestamp, method, request_path, '', body)
    if not signature:
        return None
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    try:
        url = f"{config['baseURL']}{request_path}"
        
        side_emoji = "üü¢" if side == "buy" else "üî¥"
        print(f"üéØ –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä–∞...")
        print(f"üí± –ü–∞—Ä–∞: {symbol}")
        print(f"{side_emoji} –°—Ç–æ—Ä–æ–Ω–∞: {side.upper()}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {size}")
        print(f"üõë –°—Ç–æ–ø-—Ü–µ–Ω–∞: ${trigger_price}")
        print(f"üí∞ –õ–∏–º–∏—Ç-—Ü–µ–Ω–∞: ${limit_price}")
        print(f"üÜî Client OID: {client_oid}")
        
        response = requests.post(url, headers=headers, data=body)
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('code') == '00000':
                order_data = data.get('data', {})
                
                print("\\n‚úÖ –°—Ç–æ–ø-–ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω!")
                print("=" * 50)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ
                order_id = order_data.get('orderId', 'N/A')
                client_order_id = order_data.get('clientOid', client_oid)
                
                print(f"üÜî ID –æ—Ä–¥–µ—Ä–∞: {order_id}")
                print(f"üë§ Client OID: {client_order_id}")
                print(f"üí± –°–∏–º–≤–æ–ª: {symbol}")
                print(f"{side_emoji} –°—Ç–æ—Ä–æ–Ω–∞: {side.upper()}")
                print(f"üìä –†–∞–∑–º–µ—Ä: {size}")
                print(f"üéØ –¢–∏–ø: STOP LIMIT")
                print(f"üõë –¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: ${trigger_price}")
                print(f"üí∞ –õ–∏–º–∏—Ç–Ω–∞—è —Ü–µ–Ω–∞: ${limit_price}")
                
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞
                print(f"\\nüí° –ú–ï–•–ê–ù–ò–ó–ú –°–¢–û–ü-–õ–ò–ú–ò–¢ –û–†–î–ï–†–ê:")
                print("1. üéØ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç–æ–ø-—Ü–µ–Ω—ã")
                if side == "buy":
                    print(f"2. üìà –ü—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã –¥–æ ${trigger_price} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä")
                    print(f"3. üü¢ –ü–æ–∫—É–ø–∫–∞ –ø–æ —Ü–µ–Ω–µ –Ω–µ –≤—ã—à–µ ${limit_price}")
                else:
                    print(f"2. üìâ –ü—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–æ ${trigger_price} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä")
                    print(f"3. üî¥ –ü—Ä–æ–¥–∞–∂–∞ –ø–æ —Ü–µ–Ω–µ –Ω–µ –Ω–∏–∂–µ ${limit_price}")
                print("4. ‚è≥ –û—Ä–¥–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å—Ç–∞–∫–∞–Ω–µ –¥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã")
                
                # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω
                try:
                    trigger_float = float(trigger_price)
                    limit_float = float(limit_price)
                    size_float = float(size)
                    
                    print(f"\\nüìä –ê–ù–ê–õ–ò–ó –¶–ï–ù:")
                    if side == "buy":
                        if limit_float >= trigger_float:
                            print("‚úÖ –õ–æ–≥–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: –ª–∏–º–∏—Ç >= —Å—Ç–æ–ø")
                        else:
                            print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ª–∏–º–∏—Ç < —Å—Ç–æ–ø (–º–æ–∂–µ—Ç –Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è)")
                    else:
                        if limit_float <= trigger_float:
                            print("‚úÖ –õ–æ–≥–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: –ª–∏–º–∏—Ç <= —Å—Ç–æ–ø")
                        else:
                            print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ª–∏–º–∏—Ç > —Å—Ç–æ–ø (–º–æ–∂–µ—Ç –Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è)")
                    
                    price_diff = abs(trigger_float - limit_float)
                    price_diff_pct = (price_diff / trigger_float) * 100
                    print(f"üìè –†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω: ${price_diff:.2f} ({price_diff_pct:.2f}%)")
                    
                    notional = size_float * limit_float
                    print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: ${notional:,.2f}")
                    
                    if notional > 10000:
                        print(f"üö® –ö–†–£–ü–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø: ${notional:,.2f}")
                        print("‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏!")
                
                except:
                    pass
                
                print(f"\\n‚ö†Ô∏è –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –°–¢–û–ü-–õ–ò–ú–ò–¢:")
                print("‚Ä¢ üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
                print("‚Ä¢ üí∞ –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è")
                print("‚Ä¢ üìä –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
                
                print(f"\\n‚ö†Ô∏è –ù–ï–î–û–°–¢–ê–¢–ö–ò:")
                print("‚Ä¢ ‚è≥ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
                print("‚Ä¢ üìà –†–∏—Å–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è")
                print("‚Ä¢ üîÑ –¢—Ä–µ–±—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg', 'Unknown error')}")
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                error_msg = data.get('msg', '').lower()
                if 'insufficient' in error_msg:
                    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞")
                elif 'price' in error_msg:
                    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ü–µ–Ω")
                elif 'size' in error_msg:
                    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞")
                
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None


def place_stop_limit_interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä–∞"""
    print("üéØ –†–ê–ó–ú–ï–©–ï–ù–ò–ï –°–¢–û–ü-–õ–ò–ú–ò–¢ –û–†–î–ï–†–ê")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª
    symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
    if not symbol:
        print("‚ùå –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ—Ä–æ–Ω—É
    print("\\nüìä –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É:")
    print("1. üü¢ BUY - –ü–æ–∫—É–ø–∫–∞ (–ª–æ–Ω–≥)")
    print("2. üî¥ SELL - –ü—Ä–æ–¥–∞–∂–∞ (—à–æ—Ä—Ç)")
    
    side_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
    
    if side_choice == "1":
        side = "buy"
    elif side_choice == "2":
        side = "sell"
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä
    try:
        size = input(f"üìä –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ").strip()
        size_float = float(size)
        if size_float <= 0:
            print("‚ùå –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return None
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–ø-—Ü–µ–Ω—É
    try:
        trigger_price = input(f"üõë –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø-—Ü–µ–Ω—É —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è ($): ").strip()
        trigger_float = float(trigger_price)
        if trigger_float <= 0:
            print("‚ùå –°—Ç–æ–ø-—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return None
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–ø-—Ü–µ–Ω–∞")
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç–Ω—É—é —Ü–µ–Ω—É
    try:
        limit_price = input(f"üí∞ –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç–Ω—É—é —Ü–µ–Ω—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è ($): ").strip()
        limit_float = float(limit_price)
        if limit_float <= 0:
            print("‚ùå –õ–∏–º–∏—Ç–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return None
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ª–∏–º–∏—Ç–Ω–∞—è —Ü–µ–Ω–∞")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å —Ü–µ–Ω
    print(f"\\nüîç –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –¶–ï–ù:")
    if side == "buy":
        if limit_float < trigger_float:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –õ–∏–º–∏—Ç –º–µ–Ω—å—à–µ —Å—Ç–æ–ø–∞!")
            print("üí° –î–ª—è BUY –æ–±—ã—á–Ω–æ –ª–∏–º–∏—Ç >= —Å—Ç–æ–ø")
            confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").strip().lower()
            if confirm not in ['yes', 'y', '–¥–∞']:
                return None
    else:
        if limit_float > trigger_float:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –õ–∏–º–∏—Ç –±–æ–ª—å—à–µ —Å—Ç–æ–ø–∞!")
            print("üí° –î–ª—è SELL –æ–±—ã—á–Ω–æ –ª–∏–º–∏—Ç <= —Å—Ç–æ–ø")
            confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").strip().lower()
            if confirm not in ['yes', 'y', '–¥–∞']:
                return None
    
    # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    client_oid = input("üÜî Client OID (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()
    if not client_oid:
        client_oid = None
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    print(f"\\nüìã –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–†–î–ï–†–ê:")
    print("=" * 35)
    side_emoji = "üü¢" if side == "buy" else "üî¥"
    print(f"üí± –ü–∞—Ä–∞: {symbol}")
    print(f"{side_emoji} –°—Ç–æ—Ä–æ–Ω–∞: {side.upper()}")
    print(f"üìä –†–∞–∑–º–µ—Ä: {size}")
    print(f"üéØ –¢–∏–ø: STOP LIMIT")
    print(f"üõë –°—Ç–æ–ø-—Ü–µ–Ω–∞: ${trigger_price}")
    print(f"üí∞ –õ–∏–º–∏—Ç-—Ü–µ–Ω–∞: ${limit_price}")
    
    # –†–∞—Å—á–µ—Ç—ã
    try:
        price_diff = abs(trigger_float - limit_float)
        price_diff_pct = (price_diff / trigger_float) * 100
        notional = size_float * limit_float
        
        print(f"\\nüìä –†–ê–°–ß–ï–¢–´:")
        print(f"üìè –†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω: {price_diff_pct:.2f}%")
        print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${notional:,.2f}")
    except:
        pass
    
    # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏
    print(f"\\nüí° –ß–¢–û –ü–†–û–ò–ó–û–ô–î–ï–¢:")
    if side == "buy":
        print(f"1. –ü—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã –¥–æ ${trigger_price} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä")
        print(f"2. –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ —Ü–µ–Ω–µ –Ω–µ –≤—ã—à–µ ${limit_price}")
    else:
        print(f"1. –ü—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–æ ${trigger_price} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä")
        print(f"2. –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ —Ü–µ–Ω–µ –Ω–µ –Ω–∏–∂–µ ${limit_price}")
    
    confirm = input("\\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ? (yes/no): ").strip().lower()
    
    if confirm in ['yes', 'y', '–¥–∞']:
        return place_stop_limit_order(symbol, side, size, trigger_price, limit_price, client_oid)
    else:
        print("‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return None


def place_bracket_order():
    """–†–∞–∑–º–µ—â–µ–Ω–∏–µ bracket –æ—Ä–¥–µ—Ä–∞ (—Å—Ç–æ–ø-–ª–∏–º–∏—Ç + —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç)"""
    print("üéØ BRACKET –û–†–î–ï–† (–°–¢–û–ü-–õ–ò–ú–ò–¢)")
    print("=" * 40)
    print("üí° –°—Ç–æ–ø-–ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞—â–∏—Ç–æ–π")
    
    symbol = input("üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: ").strip().upper()
    if not symbol:
        print("‚ùå –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        return None
    
    print("\\nüìä –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:")
    print("1. üü¢ –õ–æ–Ω–≥ breakout (–ø–æ–∫—É–ø–∫–∞ –ø—Ä–∏ –ø—Ä–æ–±–∏—Ç–∏–∏)")
    print("2. üî¥ –®–æ—Ä—Ç breakdown (–ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ –ø—Ä–æ–±–∏—Ç–∏–∏)")
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
    
    if choice == "1":
        side = "buy"
        print("\\nüü¢ –õ–û–ù–ì BREAKOUT –°–¢–†–ê–¢–ï–ì–ò–Ø:")
        print("‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏ –ø—Ä–æ–±–∏—Ç–∏–∏ —É—Ä–æ–≤–Ω—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è")
        print("‚Ä¢ –õ–∏–º–∏—Ç–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è")
    elif choice == "2":
        side = "sell"
        print("\\nüî¥ –®–û–†–¢ BREAKDOWN –°–¢–†–ê–¢–ï–ì–ò–Ø:")
        print("‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ –ø—Ä–æ–±–∏—Ç–∏–∏ —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        print("‚Ä¢ –õ–∏–º–∏—Ç–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return None
    
    try:
        size = input(f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ").strip()
        
        if side == "buy":
            trigger_price = input(f"üìà –¶–µ–Ω–∞ –ø—Ä–æ–±–∏—Ç–∏—è –≤–≤–µ—Ä—Ö (—Å—Ç–æ–ø): ").strip()
            limit_price = input(f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (–ª–∏–º–∏—Ç): ").strip()
        else:
            trigger_price = input(f"üìâ –¶–µ–Ω–∞ –ø—Ä–æ–±–∏—Ç–∏—è –≤–Ω–∏–∑ (—Å—Ç–æ–ø): ").strip()
            limit_price = input(f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (–ª–∏–º–∏—Ç): ").strip()
        
        print(f"\\nüéØ BRACKET –û–†–î–ï–†:")
        print(f"üí± {symbol}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {size}")
        print(f"üõë –°—Ç–æ–ø: ${trigger_price}")
        print(f"üí∞ –õ–∏–º–∏—Ç: ${limit_price}")
        
        confirm = input("\\n–†–∞–∑–º–µ—Å—Ç–∏—Ç—å bracket –æ—Ä–¥–µ—Ä? (yes/no): ").strip().lower()
        
        if confirm in ['yes', 'y', '–¥–∞']:
            client_oid = f"bracket_{int(time.time())}"
            return place_stop_limit_order(symbol, side, size, trigger_price, limit_price, client_oid)
        else:
            print("‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
        return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ BITGET USDT PERP - –°–¢–û–ü-–õ–ò–ú–ò–¢ –û–†–î–ï–†–ê")
    print("=" * 50)
    
    print("\\nüîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. üéØ –°—Ç–æ–ø-–ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä")
    print("2. üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ")
    print("3. üìä Bracket –æ—Ä–¥–µ—Ä")
    
    try:
        choice = input("\\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == "1":
            symbol = input("üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: ").strip().upper()
            side = input("üìä –°—Ç–æ—Ä–æ–Ω–∞ (buy/sell): ").strip().lower()
            size = input("üìä –†–∞–∑–º–µ—Ä: ").strip()
            trigger_price = input("üõë –°—Ç–æ–ø-—Ü–µ–Ω–∞: ").strip()
            limit_price = input("üí∞ –õ–∏–º–∏—Ç-—Ü–µ–Ω–∞: ").strip()
            
            if all([symbol, side, size, trigger_price, limit_price]):
                place_stop_limit_order(symbol, side, size, trigger_price, limit_price)
            else:
                print("‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã")
                
        elif choice == "2":
            place_stop_limit_interactive()
            
        elif choice == "3":
            place_bracket_order()
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
