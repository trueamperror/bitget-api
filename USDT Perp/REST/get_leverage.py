#!/usr/bin/env python3
"""
Bitget USDT Perpetual REST API - Get Leverage Information

–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö –ø–ª–µ—á–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ—á–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/contract/market/Get-Position-Tier

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
- productType: —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é USDT-FUTURES)
"""

import requests
import json
import time
from datetime import datetime


def get_leverage_info(symbol="BTCUSDT", productType="USDT-FUTURES"):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö –ø–ª–µ—á–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã.
    
    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTCUSDT")
        productType (str): –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ ("USDT-FUTURES", "COIN-FUTURES", "SUSDT-FUTURES", "SCOIN-FUTURES")
    
    Returns:
        dict: –û—Ç–≤–µ—Ç API —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–ª–µ—á–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    
    endpoint = "/api/v2/mix/market/query-position-lever"
    base_url = "https://api.bitget.com"
    url = base_url + endpoint
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        'symbol': symbol,
        'productType': productType
    }
    
    try:
        print(f"üì° –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–µ—á–µ –¥–ª—è {symbol}...")
        
        headers = {
            'Content-Type': 'application/json'
        }
        
        response = requests.get(url, headers=headers, params=params, timeout=30)
        
        print(f"üåê URL: {response.url}")
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            
            print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print("üìã RAW JSON Response –æ—Ç –±–∏—Ä–∂–∏:")
            print("=" * 50)
            print(json.dumps(data, indent=2, ensure_ascii=False))
            print("=" * 50)
            
            return data
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {error_data}")
            except:
                print(f"üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
        return None
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None


def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API."""
    print("üöÄ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–µ—á–µ")
    print("=" * 60)
    
    while True:
        print("\nüìã –û–ø—Ü–∏–∏:")
        print("1. –ü–æ–ª—É—á–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è BTCUSDT")
        print("2. –ü–æ–ª—É—á–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è ETHUSDT")
        print("3. –ü–æ–ª—É—á–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è ADAUSDT")
        print("4. –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Å–∏–º–≤–æ–ª")
        print("5. –í—ã—Ö–æ–¥")
        
        choice = input("\nüí´ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-5): ").strip()
        
        if choice == '1':
            get_leverage_info("BTCUSDT")
        elif choice == '2':
            get_leverage_info("ETHUSDT")
        elif choice == '3':
            get_leverage_info("ADAUSDT")
        elif choice == '4':
            symbol = input("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, SOLUSDT): ").strip().upper()
            if symbol:
                get_leverage_info(symbol)
            else:
                print("‚ùå –°–∏–º–≤–æ–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        elif choice == '5':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    interactive_mode()
