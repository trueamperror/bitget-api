#!/usr/bin/env python3
"""
–†–∞–∑–º–µ—â–µ–Ω–∏–µ limit –æ—Ä–¥–µ—Ä–∞ –Ω–∞ USDT Perpetual Futures –Ω–∞ Bitget

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–º–µ—â–∞–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç long –∏ short –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ –º–∞—Ä–∂–∏.
"""

import json
import hmac
import hashlib
import base64
import time
import requests
from datetime import datetime


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('../../config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ config.json!")
        return None


def create_signature(timestamp, method, request_path, query_string, body, secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if query_string:
        message = f"{timestamp}{method.upper()}{request_path}?{query_string}{body}"
    else:
        message = f"{timestamp}{method.upper()}{request_path}{body}"
    
    signature = hmac.new(
        secret_key.encode('utf-8'),
        message.encode('utf-8'),
        hashlib.sha256
    ).digest()
    
    return base64.b64encode(signature).decode('utf-8')


def get_current_price(config, symbol):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
    try:
        url = f"{config['baseURL']}/api/v2/mix/market/ticker"
        params = {
            'symbol': symbol,
            'productType': 'USDT-FUTURES'
        }
        response = requests.get(url, params=params, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000' and data.get('data'):
                ticker_data = data['data'][0] if isinstance(data['data'], list) else data['data']
                return float(ticker_data.get('lastPr', 0))
        return None
    except:
        return None


def get_symbol_info(config, symbol):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ"""
    try:
        url = f"{config['baseURL']}/api/v2/mix/market/contracts"
        params = {'productType': 'USDT-FUTURES'}
        response = requests.get(url, params=params, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000' and data.get('data'):
                for symbol_info in data['data']:
                    if symbol_info.get('symbol') == symbol:
                        return {
                            'minTradeNum': float(symbol_info.get('minTradeNum', 0)),
                            'priceEndStep': float(symbol_info.get('priceEndStep', 0)),
                            'volumePlace': int(symbol_info.get('volumePlace', 0)),
                            'pricePlace': int(symbol_info.get('pricePlace', 0)),
                            'baseCoin': symbol_info.get('baseCoin'),
                            'quoteCoin': symbol_info.get('quoteCoin'),
                            'maxLever': symbol_info.get('maxLever'),
                            'minLever': symbol_info.get('minLever')
                        }
        return None
    except:
        return None


def place_limit_order(config, symbol, side, size, price, margin_mode='crossed'):
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ limit –æ—Ä–¥–µ—Ä–∞ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö (One-way mode)
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT')
    - side: 'buy' (–¥–ª–∏–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è) –∏–ª–∏ 'sell' (–∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è)
    - size: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
    - price: –¶–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
    - margin_mode: 'crossed' (–∫—Ä–æ—Å—Å-–º–∞—Ä–∂–∞) –∏–ª–∏ 'isolated' (–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞)
    """
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞ (One-way mode)
    order_data = {
        'symbol': symbol.upper(),
        'productType': 'USDT-FUTURES',
        'marginMode': margin_mode,
        'marginCoin': 'USDT',
        'size': str(size),
        'side': side.lower(),
        'orderType': 'limit',
        'price': str(price),
        'force': 'gtc'  # Good Till Canceled
    }
    
    body = json.dumps(order_data)
    timestamp = str(int(time.time() * 1000))
    method = 'POST'
    request_path = '/api/v2/mix/order/place-order'
    
    signature = create_signature(timestamp, method, request_path, '', body, config['secretKey'])
    
    headers = {
        'ACCESS-KEY': config['apiKey'],
        'ACCESS-SIGN': signature,
        'ACCESS-TIMESTAMP': timestamp,
        'ACCESS-PASSPHRASE': config['passphrase'],
        'Content-Type': 'application/json',
        'locale': 'en-US'
    }
    
    url = f"{config['baseURL']}{request_path}"
    
    try:
        print(f"üîÑ –†–∞–∑–º–µ—â–µ–Ω–∏–µ FUTURES LIMIT –æ—Ä–¥–µ—Ä–∞...")
        print(f"üí± –ü–∞—Ä–∞: {symbol}")
        print(f"üéØ –°—Ç–æ—Ä–æ–Ω–∞: {get_side_emoji(side)} {side.upper()}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {size} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
        print(f"üí∞ –¶–µ–Ω–∞: ${price}")
        print(f"‚öñÔ∏è –†–µ–∂–∏–º –º–∞—Ä–∂–∏: {margin_mode}")
        
        response = requests.post(url, headers=headers, data=body, timeout=30)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        response_data = response.json() if response.status_code == 200 else {"error": response.text}
        save_response_example('place_futures_limit_order', {
            'request': order_data,
            'response': response_data,
            'status_code': response.status_code,
            'timestamp': datetime.now().isoformat()
        })
        
        if response.status_code == 200:
            data = response.json()
            if data.get('code') == '00000':
                return data.get('data', {})
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('msg')}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


def get_side_emoji(side):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ä–¥–µ—Ä–∞"""
    side_emojis = {
        'buy': 'üü¢',
        'sell': 'ÔøΩ'
    }
    return side_emojis.get(side.lower(), '‚ö™')


def save_response_example(endpoint_name, data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞"""
    try:
        filename = f"../../docs/response_examples/{endpoint_name}_{int(time.time())}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"üíæ –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {e}")


def display_order_result(order_result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
    if not order_result:
        return
    
    print(f"\n‚úÖ FUTURES LIMIT –û–†–î–ï–† –†–ê–ó–ú–ï–©–ï–ù!")
    print("=" * 45)
    
    order_id = order_result.get('orderId', 'N/A')
    client_order_id = order_result.get('clientOid', 'N/A')
    
    print(f"üÜî ID –æ—Ä–¥–µ—Ä–∞: {order_id}")
    print(f"üë§ Client ID: {client_order_id}")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    
    print(f"\nüí° Limit –æ—Ä–¥–µ—Ä –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è!")
    print(f"üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å:")
    print(f"   python get_order_status.py")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìä –†–ê–ó–ú–ï–©–ï–ù–ò–ï FUTURES LIMIT –û–†–î–ï–†–ê BITGET")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    if not config:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    required_keys = ['apiKey', 'secretKey', 'passphrase', 'baseURL']
    for key in required_keys:
        if not config.get(key):
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}' –≤ config.json")
            return
    
    # –í—ã–±–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
    symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –ø–∞—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é BTCUSDT): ").strip().upper()
    if not symbol:
        symbol = "BTCUSDT"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–µ
    print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {symbol}...")
    symbol_info = get_symbol_info(config, symbol)
    current_price = get_current_price(config, symbol)
    
    if current_price:
        print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}")
    
    if symbol_info:
        print(f"üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {symbol_info['minTradeNum']}")
        print(f"ü™ô –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {symbol_info['baseCoin']}")
        print(f"üíµ –ö–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞: {symbol_info['quoteCoin']}")
        print(f"üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ: {symbol_info['maxLever']}")
        print(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã: {symbol_info['pricePlace']} –∑–Ω–∞–∫–æ–≤")
    
    # –í—ã–±–æ—Ä —Å—Ç–æ—Ä–æ–Ω—ã
    print(f"\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. üü¢ –ö—É–ø–∏—Ç—å (Buy) - –î–ª–∏–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è")
    print("2. üî¥ –ü—Ä–æ–¥–∞—Ç—å (Sell) - –ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è")
    
    side_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
    
    side_map = {
        "1": "buy",
        "2": "sell"
    }
    
    if side_choice not in side_map:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
    
    side = side_map[side_choice]
    
    # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    size = input("üìè –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö: ").strip()
    try:
        size = float(size)
        if symbol_info and size < symbol_info['minTradeNum']:
            print(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {symbol_info['minTradeNum']}")
            return
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—Ä–∞")
        return
    
    # –¶–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
    if current_price:
        print(f"\nüí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}")
        price_input = input(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –æ—Ä–¥–µ—Ä–∞: ").strip()
    else:
        price_input = input(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –æ—Ä–¥–µ—Ä–∞: ").strip()
    
    try:
        price = float(price_input)
        if price <= 0:
            print("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã")
        return
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –º–∞—Ä–∂–∏
    print(f"\n‚öñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–∞—Ä–∂–∏:")
    print("1. üîÑ –ö—Ä–æ—Å—Å-–º–∞—Ä–∂–∞ (Crossed) - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è")
    print("2. üéØ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞ (Isolated)")
    
    margin_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
    
    if margin_choice == "1":
        margin_mode = "crossed"
    elif margin_choice == "2":
        margin_mode = "isolated"
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n‚ùì –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï FUTURES LIMIT –û–†–î–ï–†–ê")
    print("=" * 45)
    print(f"üí± –ü–∞—Ä–∞: {symbol}")
    print(f"üéØ –î–µ–π—Å—Ç–≤–∏–µ: {get_side_emoji(side)} {side.upper()}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {size} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
    print(f"üí∞ –¶–µ–Ω–∞: ${price}")
    print(f"‚öñÔ∏è –†–µ–∂–∏–º –º–∞—Ä–∂–∏: {margin_mode}")
    
    notional_value = size * price
    print(f"üìä –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: ${notional_value:.2f}")
    
    confirm = input("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (y/N): ").strip().lower()
    
    if confirm != 'y':
        print("‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
    result = place_limit_order(config, symbol, side, size, price, margin_mode)
    
    if result:
        display_order_result(result)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å futures limit –æ—Ä–¥–µ—Ä")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
