#!/usr/bin/env python3
"""
Bitget USDT Perpetual Futures WebSocket - Depth Channel

–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫ —Ñ—å—é—á–µ—Ä—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ bid/ask —Ü–µ–Ω—ã –∏ –æ–±—ä–µ–º—ã –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.bitget.com/api-doc/contract/websocket/public/Depth-Channel

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
- asks: –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É [—Ü–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
- bids: –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É [—Ü–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
- ts: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
- checksum: –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
"""

import asyncio
import json
import ssl
import websockets
from datetime import datetime


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('/Users/timurbogatyrev/Documents/VS Code/Algo/ExchangeAPI/Bitget/config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None


class FuturesDepthChannel:
    def __init__(self, config):
        self.config = config
        self.ws = None
        self.symbols = []
        self.update_count = 0
        self.depth_stats = {}
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π WebSocket URL
            futures_ws_url = self.config.get('futuresWsURL', 'wss://ws.bitget.com/v2/ws/public')
            
            self.ws = await websockets.connect(
                futures_ws_url,
                ssl=ssl_context,
                ping_interval=30,
                ping_timeout=10
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Futures WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def subscribe_depth(self, symbol, depth_level="books5"):
        """
        –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ —Ñ—å—é—á–µ—Ä—Å–∞
        depth_level: books5, books15, books
        """
        subscribe_message = {
            "op": "subscribe",
            "args": [
                {
                    "instType": "USDT-FUTURES",
                    "channel": depth_level,
                    "instId": symbol.upper()
                }
            ]
        }
        
        if self.ws:
            await self.ws.send(json.dumps(subscribe_message))
            self.symbols.append(symbol.upper())
            self.depth_stats[symbol.upper()] = {
                'spread_history': [],
                'bid_pressure_history': [],
                'ask_pressure_history': [],
                'imbalance_history': [],
                'last_best_bid': 0,
                'last_best_ask': 0
            }
            print(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞–∫–∞–Ω —Ñ—å—é—á–µ—Ä—Å–∞ {symbol} ({depth_level})")
    
    def format_depth_data(self, data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞"""
        if not data or 'data' not in data:
            return
        
        self.update_count += 1
        
        for book_data in data['data']:
            symbol = data.get('arg', {}).get('instId', 'N/A')
            asks = book_data.get('asks', [])
            bids = book_data.get('bids', [])
            ts = book_data.get('ts', 0)
            
            if not asks or not bids:
                continue
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            if ts:
                dt = datetime.fromtimestamp(int(ts) / 1000)
                time_str = dt.strftime("%H:%M:%S.%f")[:-3]
            else:
                time_str = datetime.now().strftime("%H:%M:%S.%f")[:-3]
            
            # –õ—É—á—à–∏–µ —Ü–µ–Ω—ã
            best_ask = float(asks[0][0])
            best_bid = float(bids[0][0])
            best_ask_size = float(asks[0][1])
            best_bid_size = float(bids[0][1])
            
            # –°–ø—Ä–µ–¥
            spread = best_ask - best_bid
            spread_percent = (spread / best_ask) * 100 if best_ask > 0 else 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if symbol in self.depth_stats:
                stats = self.depth_stats[symbol]
                stats['spread_history'].append(spread_percent)
                stats['last_best_bid'] = best_bid
                stats['last_best_ask'] = best_ask
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                if len(stats['spread_history']) > 100:
                    stats['spread_history'] = stats['spread_history'][-50:]
            
            print(f"\\nüìö [{time_str}] FUTURES ORDER BOOK #{self.update_count}")
            print(f"üí± {symbol}")
            print("=" * 60)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ asks (–ø—Ä–æ–¥–∞–∂–∏) - –æ—Ç –Ω–∏–∑–∫–æ–π —Ü–µ–Ω—ã –∫ –≤—ã—Å–æ–∫–æ–π
            print("üî¥ ASKS (–®–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–∏)")
            print("   –¶–µ–Ω–∞          ‚îÇ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã    ‚îÇ –°—É–º–º–∞ USDT")
            print("‚îÄ" * 50)
            
            total_ask_volume = 0
            total_ask_value = 0
            for i, ask in enumerate(asks[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 5
                price = float(ask[0])
                size = float(ask[1])
                total = price * size
                total_ask_volume += size
                total_ask_value += total
                
                # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
                size_indicator = ""
                if total > 100000:
                    size_indicator = "üêã"
                elif total > 50000:
                    size_indicator = "ü¶à"
                elif total > 10000:
                    size_indicator = "üêü"
                
                print(f"   ${price:>12.4f} ‚îÇ {size:>11.0f} ‚îÇ ${total:>10.0f} {size_indicator}")
            
            # –°–ø—Ä–µ–¥
            print(f"         üí∞ –°–ü–†–ï–î: ${spread:.4f} ({spread_percent:.4f}%)")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ bids (–ø–æ–∫—É–ø–∫–∏) - –æ—Ç –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω—ã –∫ –Ω–∏–∑–∫–æ–π
            print("üü¢ BIDS (–õ–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏)")
            print("   –¶–µ–Ω–∞          ‚îÇ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã    ‚îÇ –°—É–º–º–∞ USDT")
            print("‚îÄ" * 50)
            
            total_bid_volume = 0
            total_bid_value = 0
            for i, bid in enumerate(bids[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 5
                price = float(bid[0])
                size = float(bid[1])
                total = price * size
                total_bid_volume += size
                total_bid_value += total
                
                # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
                size_indicator = ""
                if total > 100000:
                    size_indicator = "üêã"
                elif total > 50000:
                    size_indicator = "ü¶à"
                elif total > 10000:
                    size_indicator = "üêü"
                
                print(f"   ${price:>12.4f} ‚îÇ {size:>11.0f} ‚îÇ ${total:>10.0f} {size_indicator}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–∫–∞–Ω–∞
            bid_ask_ratio = total_bid_value / total_ask_value if total_ask_value > 0 else 0
            imbalance = ((total_bid_value - total_ask_value) / (total_bid_value + total_ask_value)) * 100 if (total_bid_value + total_ask_value) > 0 else 0
            
            print(f"\\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–ê–ö–ê–ù–ê")
            print(f"üì§ –û–±—â–∏–π –æ–±—ä–µ–º asks: {total_ask_volume:,.0f} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (${total_ask_value:,.0f})")
            print(f"üì• –û–±—â–∏–π –æ–±—ä–µ–º bids: {total_bid_volume:,.0f} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (${total_bid_value:,.0f})")
            print(f"‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ bid/ask: {bid_ask_ratio:.3f}")
            print(f"üìä –î–∏—Å–±–∞–ª–∞–Ω—Å: {imbalance:+.2f}% ", end="")
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–∞–≤–ª–µ–Ω–∏—è
            if imbalance > 20:
                print("üü¢ (–ü–û–ö–£–ü–ê–¢–ï–õ–¨–°–ö–û–ï –î–ê–í–õ–ï–ù–ò–ï)")
            elif imbalance < -20:
                print("üî¥ (–ü–†–û–î–ê–í–ê–¢–ï–õ–¨–°–ö–û–ï –î–ê–í–õ–ï–ù–ò–ï)")
            else:
                print("‚ö™ (–°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–û)")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if self.update_count % 10 == 0:
                self.show_advanced_stats(symbol)
    
    def show_advanced_stats(self, symbol):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞–∫–∞–Ω–∞"""
        if symbol not in self.depth_stats:
            return
        
        stats = self.depth_stats[symbol]
        
        if len(stats['spread_history']) < 5:
            return
        
        print(f"\\nüìà –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê {symbol}")
        print("=" * 50)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø—Ä–µ–¥–∞
        recent_spreads = stats['spread_history'][-10:]
        avg_spread = sum(recent_spreads) / len(recent_spreads)
        min_spread = min(recent_spreads)
        max_spread = max(recent_spreads)
        
        print(f"üí∞ –°–ø—Ä–µ–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):")
        print(f"   –°—Ä–µ–¥–Ω–∏–π: {avg_spread:.4f}%")
        print(f"   –ú–∏–Ω–∏–º—É–º: {min_spread:.4f}%")
        print(f"   –ú–∞–∫—Å–∏–º—É–º: {max_spread:.4f}%")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        if avg_spread < 0.01:
            liquidity = "üü¢ –û–¢–õ–ò–ß–ù–ê–Ø"
        elif avg_spread < 0.05:
            liquidity = "üü° –•–û–†–û–®–ê–Ø"
        elif avg_spread < 0.1:
            liquidity = "üü† –°–†–ï–î–ù–Ø–Ø"
        else:
            liquidity = "üî¥ –ù–ò–ó–ö–ê–Ø"
        
        print(f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {liquidity}")
        
        # –¢–µ–∫—É—â–∏–µ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã
        print(f"üìä –õ—É—á—à–∏–µ —Ü–µ–Ω—ã:")
        print(f"   –ë–∏–¥: ${stats['last_best_bid']:,.4f}")
        print(f"   –ê—Å–∫: ${stats['last_best_ask']:,.4f}")
        print(f"   –ú–∏–¥: ${(stats['last_best_bid'] + stats['last_best_ask']) / 2:,.4f}")
    
    async def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            data = json.loads(message)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
            if data.get('event') == 'subscribe':
                if data.get('code') == '0':
                    channel = data.get('arg', {}).get('channel', 'unknown')
                    symbol = data.get('arg', {}).get('instId', 'unknown')
                    print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞: {symbol} ({channel})")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {data.get('msg', 'Unknown error')}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞
            elif data.get('action') == 'snapshot' or data.get('action') == 'update':
                channel = data.get('arg', {}).get('channel', '')
                if 'books' in channel:
                    self.format_depth_data(data)
            
            # –ü–∏–Ω–≥-–ø–æ–Ω–≥
            elif 'ping' in data:
                pong_message = {'pong': data['ping']}
                if self.ws:
                    await self.ws.send(json.dumps(pong_message))
        
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {message}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def listen(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.ws:
                async for message in self.ws:
                    await self.handle_message(message)
        except websockets.exceptions.ConnectionClosed:
            print("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if self.ws:
            await self.ws.close()
            print(f"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket. –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.update_count}")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            for symbol in self.symbols:
                self.show_advanced_stats(symbol)


async def monitor_futures_depth():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞–∫–∞–Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞"""
    config = load_config()
    if not config:
        return
    
    print("üìö –ú–û–ù–ò–¢–û–†–ò–ù–ì FUTURES –°–¢–ê–ö–ê–ù–ê")
    print("=" * 40)
    
    depth_client = FuturesDepthChannel(config)
    
    try:
        if not await depth_client.connect():
            return
        
        symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª —Ñ—å—é—á–µ—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
        if not symbol:
            symbol = "BTCUSDT"
        
        print("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥–ª—É–±–∏–Ω—É —Å—Ç–∞–∫–∞–Ω–∞:")
        print("1. üìö –¢–æ–ø-5 —É—Ä–æ–≤–Ω–µ–π (books5)")
        print("2. üìñ –¢–æ–ø-15 —É—Ä–æ–≤–Ω–µ–π (books15)")
        print("3. üìô –ü–æ–ª–Ω—ã–π —Å—Ç–∞–∫–∞–Ω (books)")
        
        depth_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if depth_choice == "1":
            depth_level = "books5"
        elif depth_choice == "2":
            depth_level = "books15"
        elif depth_choice == "3":
            depth_level = "books"
            print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü–æ–ª–Ω—ã–π —Å—Ç–∞–∫–∞–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö!")
            confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
            if confirm != 'y':
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                return
        else:
            depth_level = "books5"
        
        await depth_client.subscribe_depth(symbol, depth_level)
        
        print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞–∫–∞–Ω–∞ {symbol} ({depth_level})...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await depth_client.listen()
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await depth_client.disconnect()


async def liquidity_analysis():
    """–ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Ñ—å—é—á–µ—Ä—Å–∞"""
    config = load_config()
    if not config:
        return
    
    print("üíß –ê–ù–ê–õ–ò–ó –õ–ò–ö–í–ò–î–ù–û–°–¢–ò FUTURES")
    print("=" * 40)
    
    depth_client = FuturesDepthChannel(config)
    
    try:
        if not await depth_client.connect():
            return
        
        symbol = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
        if not symbol:
            symbol = "BTCUSDT"
        
        duration = input("‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300): ").strip()
        try:
            duration = int(duration) if duration else 300
        except ValueError:
            duration = 300
        
        await depth_client.subscribe_depth(symbol, "books15")
        
        print(f"üîÑ –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ {symbol} –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            await asyncio.wait_for(depth_client.listen(), timeout=duration)
        except asyncio.TimeoutError:
            print(f"\\n‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω ({duration} —Å–µ–∫)")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            if symbol in depth_client.depth_stats:
                stats = depth_client.depth_stats[symbol]
                
                if stats['spread_history']:
                    avg_spread = sum(stats['spread_history']) / len(stats['spread_history'])
                    
                    print(f"\\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –õ–ò–ö–í–ò–î–ù–û–°–¢–ò:")
                    print(f"üí∞ –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥: {avg_spread:.4f}%")
                    print(f"üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–∫–∞–Ω–∞: {depth_client.update_count}")
                    
                    if avg_spread < 0.01:
                        print("üü¢ –û–¢–õ–ò–ß–ù–ê–Ø –õ–ò–ö–í–ò–î–ù–û–°–¢–¨ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
                    elif avg_spread < 0.05:
                        print("üü° –•–û–†–û–®–ê–Ø –õ–ò–ö–í–ò–î–ù–û–°–¢–¨ - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫")
                    elif avg_spread < 0.1:
                        print("üü† –°–†–ï–î–ù–Ø–Ø –õ–ò–ö–í–ò–î–ù–û–°–¢–¨ - –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö")
                    else:
                        print("üî¥ –ù–ò–ó–ö–ê–Ø –õ–ò–ö–í–ò–î–ù–û–°–¢–¨ - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è")
                else:
                    print("üì≠ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
    except KeyboardInterrupt:
        print("\\nüëã –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await depth_client.disconnect()


async def spread_monitoring():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–∞"""
    config = load_config()
    if not config:
        return
    
    print("üí∞ –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ü–†–ï–î–ê FUTURES")
    print("=" * 40)
    
    depth_client = FuturesDepthChannel(config)
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ —Å–ø—Ä–µ–¥–µ
    original_format = depth_client.format_depth_data
    
    def spread_focused_format(data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Å–ø—Ä–µ–¥"""
        if not data or 'data' not in data:
            return
        
        for book_data in data['data']:
            symbol = data.get('arg', {}).get('instId', 'N/A')
            asks = book_data.get('asks', [])
            bids = book_data.get('bids', [])
            
            if not asks or not bids:
                continue
            
            best_ask = float(asks[0][0])
            best_bid = float(bids[0][0])
            spread = best_ask - best_bid
            spread_percent = (spread / best_ask) * 100
            
            time_str = datetime.now().strftime("%H:%M:%S.%f")[:-3]
            
            print(f"üí∞ [{time_str}] SPREAD {symbol}")
            print(f"üü¢ –ë–∏–¥: ${best_bid:,.4f} ‚îÇ üî¥ –ê—Å–∫: ${best_ask:,.4f}")
            print(f"üìä –°–ø—Ä–µ–¥: ${spread:.4f} ({spread_percent:.4f}%)")
            print("‚îÄ" * 40)
    
    depth_client.format_depth_data = spread_focused_format
    
    try:
        if not await depth_client.connect():
            return
        
        symbols_input = input("üí± –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT,ETHUSDT): ").strip()
        if not symbols_input:
            symbols = ["BTCUSDT", "ETHUSDT"]
        else:
            symbols = [s.strip().upper() for s in symbols_input.split(',')]
        
        for symbol in symbols:
            await depth_client.subscribe_depth(symbol, "books5")
            await asyncio.sleep(0.1)
        
        print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–∞ –¥–ª—è {len(symbols)} —Ñ—å—é—á–µ—Ä—Å–æ–≤...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await depth_client.listen()
        
    except KeyboardInterrupt:
        print("\\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await depth_client.disconnect()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìö BITGET FUTURES DEPTH CHANNEL")
    print("=" * 40)
    
    print("üîå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print("1. üìö –°—Ç–∞–∫–∞–Ω —Ñ—å—é—á–µ—Ä—Å–∞")
    print("2. üíß –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
    print("3. üí∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–∞")
    
    try:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == "1":
            await monitor_futures_depth()
        elif choice == "2":
            await liquidity_analysis()
        elif choice == "3":
            await spread_monitoring()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


if __name__ == "__main__":
    asyncio.run(main())
